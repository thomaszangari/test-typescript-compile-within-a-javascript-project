{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _temp;\n\nimport React from \"react\";\nimport { persist } from \"mobx-persist\";\nimport { action, observable } from \"mobx\";\nimport config from \"../config\";\nexport let AuthStore = (_class = (_temp = class AuthStore {\n  // Password Login\n  // OTP Verify\n  // User Details\n  constructor(rootStore) {\n    this.rootStore = null;\n\n    _initializerDefineProperty(this, \"passwordAuthErrorMessage\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"accessToken\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"refreshToken\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"otpAuthErrorMessage\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"otpAccessToken\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"userId\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"userName\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"userFullName\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"userRole\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"userPolicies\", _descriptor10, this);\n\n    this.rootStore = rootStore;\n  }\n\n  makeWSConnection() {\n    // Create WebSocket connection.\n    let baseURL = config.SERVER_BASE_URL.toString();\n\n    if (baseURL.startsWith('https://')) {\n      baseURL = baseURL.replace(\"https://\", \"\");\n    } else if (baseURL.startsWith('http://')) {\n      baseURL = baseURL.replace(\"http://\", \"\");\n    }\n\n    const socket = new WebSocket(`wss://${baseURL}`); // Connection opened\n\n    socket.addEventListener('open', event => {\n      socket.send('Hello Server!');\n      console.log('WebSocket Connected');\n    }); // Listen for messages\n\n    socket.addEventListener('message', event => {\n      console.log('Message from server', event.data);\n      const details = JSON.parse(event.data);\n      debugger;\n\n      if (details && details.errorMessage) {\n        this.props.miscellaneousStore.setFailedJobDetails(details);\n      }\n    }); // Listen for possible errors\n\n    socket.addEventListener('error', event => {\n      console.log('Message from server ', event.data);\n    });\n  }\n\n  postLogin(props) {\n    this.getPolicies(props);\n    this.makeWSConnection();\n  }\n  /**\r\n   *\r\n   * @param userName\r\n   * @param password\r\n   */\n\n\n  loginWithPassword(email, password, props) {\n    let data = {\n      \"username\": email,\n      \"password\": Buffer.from(password).toString('base64')\n    };\n    fetch(`${config.SERVER_BASE_URL}/v1/auth/login`, {\n      method: 'POST',\n      // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(res => {\n      if (res && res.error) {\n        this.passwordAuthErrorMessage = res.error;\n      } else {\n        this.otpAuthErrorMessage = null;\n        this.passwordAuthErrorMessage = null;\n        const {\n          accessToken,\n          refreshToken,\n          firstname,\n          lastname,\n          userid,\n          OTPAccessToken\n        } = res;\n        localStorage.setItem('userName', email);\n\n        if (accessToken !== undefined) {\n          //this.setState({errorMessage: 'Authentication successful', accessToken, refreshToken});\n          //this.passwordAuthErrorMessage = 'Authentication successful';\n          localStorage.setItem('accessToken', accessToken);\n          localStorage.setItem('refreshToken', refreshToken);\n          localStorage.setItem('loggedInUserFullName', `${firstname} ${lastname}`);\n          localStorage.setItem('loggedInUserID', userid);\n          this.accessToken = accessToken;\n          this.refreshToken = refreshToken;\n          this.userId = userid;\n          this.userName = email;\n          this.userFullName = `${firstname} ${lastname}`;\n          this.postLogin(props);\n        } else if (OTPAccessToken !== undefined) {\n          //this.setState({errorMessage: 'Authentication successful'});\n          //this.passwordAuthErrorMessage = 'Authentication successful';\n          localStorage.setItem('OTPAccessToken', OTPAccessToken);\n          this.otpAccessToken = OTPAccessToken;\n          this.userName = email;\n          props.history.push('/login/mfa');\n        }\n      }\n    }).catch(error => {\n      this.passwordAuthErrorMessage = error.toString();\n    });\n    /*data = {\r\n        \"username\": email\r\n    }\r\n      fetch(`${config.SERVER_BASE_URL}/v1/users/querypolicies`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(data),\r\n    })\r\n        .then(response => response.json())\r\n        .then(res => {\r\n            if (res && res.error) {\r\n                //this.setState({errorMessage: res.error});\r\n                this.passwordAuthErrorMessage = res.error;\r\n            } else {\r\n                localStorage.setItem('userpolicies', JSON.stringify(res));\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            //this.setState({errorMessage: error.toString()});\r\n            this.passwordAuthErrorMessage = error.toString();\r\n        });*/\n  }\n  /**\r\n   *\r\n   * @param userName\r\n   * @param TOTP\r\n   */\n\n\n  loginWithTOTP(OTP, props) {\n    let data = {\n      \"OTP\": OTP\n    };\n    fetch(`${config.SERVER_BASE_URL}/v1/auth/login/mfa`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.getOTPAccessToken()}`\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(res => {\n      if (res && res.error) {\n        this.otpAuthErrorMessage = res.error;\n      } else {\n        this.otpAuthErrorMessage = null;\n        this.passwordAuthErrorMessage = null;\n        const {\n          accessToken,\n          refreshToken,\n          firstname,\n          lastname,\n          userid,\n          userName\n        } = res; // this.setState({errorMessage: 'Authentication successful', accessToken, refreshToken});\n\n        localStorage.setItem('accessToken', accessToken);\n        localStorage.setItem('refreshToken', refreshToken); //localStorage.setItem('userName', userName);\n\n        localStorage.setItem('loggedInUserFullName', `${firstname} ${lastname}`);\n        localStorage.setItem('loggedInUserID', userid); //this.props.history.push('/dashboard', {userName: email});\n\n        this.accessToken = accessToken;\n        this.refreshToken = refreshToken;\n        this.userId = userid; //this.userName = email;\n\n        this.userFullName = `${firstname} ${lastname}`;\n        this.postLogin(props);\n      }\n    }).catch(error => {\n      this.otpAuthErrorMessage = error.toString();\n    });\n  }\n  /**\r\n   *\r\n   */\n\n\n  requestOTP() {\n    const token = localStorage.getItem('OTPAccessToken');\n    fetch(`${config.SERVER_BASE_URL}/v1/auth/otp`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res && res.error) {\n        this.otpAuthErrorMessage = res.error;\n      } else if (res && res.message) {\n        this.otpAuthErrorMessage = res.message;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n  /**\r\n   *\r\n   */\n\n\n  logout(props) {\n    const token = this.getRefreshToken();\n    const username = this.getUserName();\n    const url = `${config.SERVER_BASE_URL}/v1/auth/logout`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        token: token\n      })\n    }).then(response => response.json()).then(res => {\n      if (res.error) {\n        alert(res.error);\n      } else {\n        //this.navigateToHome();\n        localStorage.clear();\n        props.history.push('/');\n      }\n    }).catch(error => {\n      alert('Error:', error);\n    });\n  }\n\n  getPolicies(props) {\n    const data = {\n      \"username\": localStorage.getItem('userName')\n    };\n    fetch(`${config.SERVER_BASE_URL}/v1/users/querypolicies`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(res => {\n      if (res && res.error) {\n        //this.setState({errorMessage: res.error});\n        this.passwordAuthErrorMessage = res.error;\n      } else {\n        // props.history.push('/dashboard');\n        localStorage.setItem('userpolicies', JSON.stringify(res));\n        props.history.push('/dashboard', {\n          userName: this.userName\n        });\n      }\n    }).catch(error => {\n      console.log(error); //this.setState({errorMessage: error.toString()});\n\n      this.passwordAuthErrorMessage = error.toString();\n    });\n  }\n\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  getRefreshToken() {\n    return this.refreshToken;\n  }\n\n  getOTPAccessToken() {\n    return this.otpAccessToken;\n  }\n\n  getUserName() {\n    return this.userName;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"passwordAuthErrorMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"accessToken\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"refreshToken\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"otpAuthErrorMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"otpAccessToken\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"userId\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"userName\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"userFullName\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"userRole\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"userPolicies\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"loginWithPassword\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"loginWithPassword\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"loginWithTOTP\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"loginWithTOTP\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"requestOTP\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"requestOTP\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"logout\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"logout\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getPolicies\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getPolicies\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getAccessToken\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getAccessToken\"), _class.prototype)), _class);","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/Capstone/lottery/mslc-backoffice-client/v1/Code/src/store/AuthStore.js"],"names":["React","persist","action","observable","config","AuthStore","constructor","rootStore","makeWSConnection","baseURL","SERVER_BASE_URL","toString","startsWith","replace","socket","WebSocket","addEventListener","event","send","console","log","data","details","JSON","parse","errorMessage","props","miscellaneousStore","setFailedJobDetails","postLogin","getPolicies","loginWithPassword","email","password","Buffer","from","fetch","method","headers","body","stringify","then","response","json","res","error","passwordAuthErrorMessage","otpAuthErrorMessage","accessToken","refreshToken","firstname","lastname","userid","OTPAccessToken","localStorage","setItem","undefined","userId","userName","userFullName","otpAccessToken","history","push","catch","loginWithTOTP","OTP","getOTPAccessToken","requestOTP","token","getItem","message","logout","getRefreshToken","username","getUserName","url","alert","clear","getAccessToken"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,MAAR,EAAgBC,UAAhB,QAAiC,MAAjC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,WAAaC,SAAb,sBAAO,MAAMA,SAAN,CAAgB;AAInB;AAKA;AAIA;AAOAC,EAAAA,WAAW,CAACC,SAAD,EAAY;AAAA,SAlBvBA,SAkBuB,GAlBX,IAkBW;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;AAEDC,EAAAA,gBAAgB,GAAG;AACf;AACA,QAAIC,OAAO,GAAIL,MAAM,CAACM,eAAR,CAAyBC,QAAzB,EAAd;;AACA,QAAGF,OAAO,CAACG,UAAR,CAAmB,UAAnB,CAAH,EAAkC;AAC9BH,MAAAA,OAAO,GAAGA,OAAO,CAACI,OAAR,CAAgB,UAAhB,EAA4B,EAA5B,CAAV;AACH,KAFD,MAEO,IAAGJ,OAAO,CAACG,UAAR,CAAmB,SAAnB,CAAH,EAAkC;AACrCH,MAAAA,OAAO,GAAGA,OAAO,CAACI,OAAR,CAAgB,SAAhB,EAA2B,EAA3B,CAAV;AACH;;AACD,UAAMC,MAAM,GAAG,IAAIC,SAAJ,CAAe,SAAQN,OAAQ,EAA/B,CAAf,CARe,CAUf;;AACAK,IAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAkCC,KAAD,IAAW;AACxCH,MAAAA,MAAM,CAACI,IAAP,CAAY,eAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,KAHD,EAXe,CAgBf;;AACAN,IAAAA,MAAM,CAACE,gBAAP,CAAwB,SAAxB,EAAqCC,KAAD,IAAW;AAC3CE,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,KAAK,CAACI,IAAzC;AACA,YAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACI,IAAjB,CAAhB;AACA;;AACA,UAAGC,OAAO,IAAIA,OAAO,CAACG,YAAtB,EAAoC;AAChC,aAAKC,KAAL,CAAWC,kBAAX,CAA8BC,mBAA9B,CAAkDN,OAAlD;AACH;AACJ,KAPD,EAjBe,CA0Bf;;AACAR,IAAAA,MAAM,CAACE,gBAAP,CAAwB,OAAxB,EAAmCC,KAAD,IAAU;AACxCE,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,KAAK,CAACI,IAA1C;AACH,KAFD;AAGH;;AAEDQ,EAAAA,SAAS,CAACH,KAAD,EAAQ;AACb,SAAKI,WAAL,CAAiBJ,KAAjB;AACA,SAAKlB,gBAAL;AACH;AAED;;;;;;;AAKQuB,EAAAA,iBAAR,CAA0BC,KAA1B,EAAiCC,QAAjC,EAA2CP,KAA3C,EAAkD;AAE9C,QAAIL,IAAI,GAAG;AACP,kBAAYW,KADL;AAEP,kBAAYE,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBtB,QAAtB,CAA+B,QAA/B;AAFL,KAAX;AAKAyB,IAAAA,KAAK,CAAE,GAAEhC,MAAM,CAACM,eAAgB,gBAA3B,EAA4C;AAC7C2B,MAAAA,MAAM,EAAE,MADqC;AAC7B;AAChBC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFoC;AAK7CC,MAAAA,IAAI,EAAEhB,IAAI,CAACiB,SAAL,CAAenB,IAAf;AALuC,KAA5C,CAAL,CAOKoB,IAPL,CAOUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPtB,EAQKF,IARL,CAQUG,GAAG,IAAI;AACT,UAAIA,GAAG,IAAIA,GAAG,CAACC,KAAf,EAAsB;AAClB,aAAKC,wBAAL,GAAgCF,GAAG,CAACC,KAApC;AACH,OAFD,MAEO;AAEH,aAAKE,mBAAL,GAA2B,IAA3B;AACA,aAAKD,wBAAL,GAAgC,IAAhC;AAEA,cAAM;AAACE,UAAAA,WAAD;AAAcC,UAAAA,YAAd;AAA4BC,UAAAA,SAA5B;AAAuCC,UAAAA,QAAvC;AAAiDC,UAAAA,MAAjD;AAAyDC,UAAAA;AAAzD,YAA2ET,GAAjF;AACAU,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCvB,KAAjC;;AACA,YAAIgB,WAAW,KAAKQ,SAApB,EAA+B;AAC3B;AACA;AACAF,UAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCP,WAApC;AACAM,UAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCN,YAArC;AACAK,UAAAA,YAAY,CAACC,OAAb,CAAqB,sBAArB,EAA8C,GAAEL,SAAU,IAAGC,QAAS,EAAtE;AACAG,UAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCH,MAAvC;AAEA,eAAKJ,WAAL,GAAmBA,WAAnB;AACA,eAAKC,YAAL,GAAoBA,YAApB;AACA,eAAKQ,MAAL,GAAcL,MAAd;AACA,eAAKM,QAAL,GAAgB1B,KAAhB;AACA,eAAK2B,YAAL,GAAqB,GAAET,SAAU,IAAGC,QAAS,EAA7C;AACA,eAAKtB,SAAL,CAAeH,KAAf;AAEH,SAfD,MAeO,IAAI2B,cAAc,KAAKG,SAAvB,EAAkC;AACrC;AACA;AACAF,UAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCF,cAAvC;AACA,eAAKO,cAAL,GAAsBP,cAAtB;AACA,eAAKK,QAAL,GAAgB1B,KAAhB;AACAN,UAAAA,KAAK,CAACmC,OAAN,CAAcC,IAAd,CAAmB,YAAnB;AACH;AACJ;AACJ,KA1CL,EA2CKC,KA3CL,CA2CYlB,KAAD,IAAW;AACd,WAAKC,wBAAL,GAAgCD,KAAK,CAAClC,QAAN,EAAhC;AACH,KA7CL;AA+CA;;;;;;;;;;;;;;;;;;;;;;;;AAyBH;AAED;;;;;;;AAKQqD,EAAAA,aAAR,CAAsBC,GAAtB,EAA2BvC,KAA3B,EAAkC;AAE9B,QAAIL,IAAI,GAAG;AACP,aAAO4C;AADA,KAAX;AAIA7B,IAAAA,KAAK,CAAE,GAAEhC,MAAM,CAACM,eAAgB,oBAA3B,EAAgD;AACjD2B,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAkB,UAAS,KAAK4B,iBAAL,EAAyB;AAF/C,OAFwC;AAMjD3B,MAAAA,IAAI,EAAEhB,IAAI,CAACiB,SAAL,CAAenB,IAAf;AAN2C,KAAhD,CAAL,CAQKoB,IARL,CAQUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARtB,EASKF,IATL,CASUG,GAAG,IAAI;AACT,UAAIA,GAAG,IAAIA,GAAG,CAACC,KAAf,EAAsB;AAClB,aAAKE,mBAAL,GAA2BH,GAAG,CAACC,KAA/B;AACH,OAFD,MAEO;AAEH,aAAKE,mBAAL,GAA2B,IAA3B;AACA,aAAKD,wBAAL,GAAgC,IAAhC;AAEA,cAAM;AAACE,UAAAA,WAAD;AAAcC,UAAAA,YAAd;AAA4BC,UAAAA,SAA5B;AAAuCC,UAAAA,QAAvC;AAAiDC,UAAAA,MAAjD;AAAyDM,UAAAA;AAAzD,YAAqEd,GAA3E,CALG,CAMH;;AACAU,QAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCP,WAApC;AACAM,QAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCN,YAArC,EARG,CASH;;AACAK,QAAAA,YAAY,CAACC,OAAb,CAAqB,sBAArB,EAA8C,GAAEL,SAAU,IAAGC,QAAS,EAAtE;AACAG,QAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCH,MAAvC,EAXG,CAYH;;AAEA,aAAKJ,WAAL,GAAmBA,WAAnB;AACA,aAAKC,YAAL,GAAoBA,YAApB;AACA,aAAKQ,MAAL,GAAcL,MAAd,CAhBG,CAiBH;;AACA,aAAKO,YAAL,GAAqB,GAAET,SAAU,IAAGC,QAAS,EAA7C;AACA,aAAKtB,SAAL,CAAeH,KAAf;AAEH;AACJ,KAlCL,EAmCKqC,KAnCL,CAmCYlB,KAAD,IAAW;AACd,WAAKE,mBAAL,GAA2BF,KAAK,CAAClC,QAAN,EAA3B;AACH,KArCL;AAsCH;AAED;;;;;AAGQwD,EAAAA,UAAR,GAAqB;AAEjB,UAAMC,KAAK,GAAGd,YAAY,CAACe,OAAb,CAAqB,gBAArB,CAAd;AAEAjC,IAAAA,KAAK,CAAE,GAAEhC,MAAM,CAACM,eAAgB,cAA3B,EAA0C;AAC3C2B,MAAAA,MAAM,EAAE,KADmC;AAE3CC,MAAAA,OAAO,EAAE;AACL,yBAAkB,UAAS8B,KAAM,EAD5B;AAEL,wBAAgB;AAFX;AAFkC,KAA1C,CAAL,CAOK3B,IAPL,CAOUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPtB,EAQKF,IARL,CAQUG,GAAG,IAAI;AACT,UAAIA,GAAG,IAAIA,GAAG,CAACC,KAAf,EAAsB;AAClB,aAAKE,mBAAL,GAA2BH,GAAG,CAACC,KAA/B;AACH,OAFD,MAEO,IAAID,GAAG,IAAIA,GAAG,CAAC0B,OAAf,EAAwB;AAC3B,aAAKvB,mBAAL,GAA2BH,GAAG,CAAC0B,OAA/B;AACH;AACJ,KAdL,EAeKP,KAfL,CAeYlB,KAAD,IAAW;AACd,WAAKpB,YAAL,GAAoBoB,KAAK,CAAClC,QAAN,EAApB;AACH,KAjBL;AAkBH;AAED;;;;;AAGQ4D,EAAAA,MAAR,CAAe7C,KAAf,EAAsB;AAElB,UAAM0C,KAAK,GAAG,KAAKI,eAAL,EAAd;AACA,UAAMC,QAAQ,GAAG,KAAKC,WAAL,EAAjB;AACA,UAAMC,GAAG,GAAI,GAAEvE,MAAM,CAACM,eAAgB,iBAAtC;AACA0B,IAAAA,KAAK,CAACuC,GAAD,EAAM;AACPtC,MAAAA,MAAM,EAAE,MADD;AAEPC,MAAAA,OAAO,EAAE;AACL,yBAAkB,UAASgB,YAAY,CAACe,OAAb,CAAqB,aAArB,CAAoC,EAD1D;AAEL,wBAAgB;AAFX,OAFF;AAMP9B,MAAAA,IAAI,EAAEhB,IAAI,CAACiB,SAAL,CAAe;AAACiC,QAAAA,QAAQ,EAAEA,QAAX;AAAqBL,QAAAA,KAAK,EAAEA;AAA5B,OAAf;AANC,KAAN,CAAL,CAQK3B,IARL,CAQUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARtB,EASKF,IATL,CASUG,GAAG,IAAI;AACT,UAAIA,GAAG,CAACC,KAAR,EAAe;AACX+B,QAAAA,KAAK,CAAChC,GAAG,CAACC,KAAL,CAAL;AACH,OAFD,MAEO;AACH;AACAS,QAAAA,YAAY,CAACuB,KAAb;AACAnD,QAAAA,KAAK,CAACmC,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH;AACJ,KAjBL,EAkBKC,KAlBL,CAkBYlB,KAAD,IAAW;AACd+B,MAAAA,KAAK,CAAC,QAAD,EAAW/B,KAAX,CAAL;AACH,KApBL;AAqBH;;AAEOf,EAAAA,WAAR,CAAoBJ,KAApB,EAA2B;AAEvB,UAAML,IAAI,GAAG;AACT,kBAAYiC,YAAY,CAACe,OAAb,CAAqB,UAArB;AADH,KAAb;AAIAjC,IAAAA,KAAK,CAAE,GAAEhC,MAAM,CAACM,eAAgB,yBAA3B,EAAqD;AACtD2B,MAAAA,MAAM,EAAE,MAD8C;AAEtDC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF6C;AAKtDC,MAAAA,IAAI,EAAEhB,IAAI,CAACiB,SAAL,CAAenB,IAAf;AALgD,KAArD,CAAL,CAOKoB,IAPL,CAOUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPtB,EAQKF,IARL,CAQUG,GAAG,IAAI;AACT,UAAIA,GAAG,IAAIA,GAAG,CAACC,KAAf,EAAsB;AAClB;AACA,aAAKC,wBAAL,GAAgCF,GAAG,CAACC,KAApC;AACH,OAHD,MAGO;AACH;AACAS,QAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqChC,IAAI,CAACiB,SAAL,CAAeI,GAAf,CAArC;AACAlB,QAAAA,KAAK,CAACmC,OAAN,CAAcC,IAAd,CAAmB,YAAnB,EAAiC;AAACJ,UAAAA,QAAQ,EAAE,KAAKA;AAAhB,SAAjC;AACH;AACJ,KAjBL,EAkBKK,KAlBL,CAkBYlB,KAAD,IAAW;AACd1B,MAAAA,OAAO,CAACC,GAAR,CAAYyB,KAAZ,EADc,CAEd;;AACA,WAAKC,wBAAL,GAAgCD,KAAK,CAAClC,QAAN,EAAhC;AACH,KAtBL;AAuBH;;AAEOmE,EAAAA,cAAR,GAAyB;AACrB,WAAO,KAAK9B,WAAZ;AACH;;AAEDwB,EAAAA,eAAe,GAAG;AACd,WAAO,KAAKvB,YAAZ;AACH;;AAEDiB,EAAAA,iBAAiB,GAAG;AAChB,WAAO,KAAKN,cAAZ;AACH;;AAEDc,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKhB,QAAZ;AACH;;AA7SkB,CAAvB,kGAKKvD,UALL;AAAA;AAAA;AAAA;AAAA;AAAA,WAK2C,IAL3C;AAAA;AAAA,+EAMKF,OANL,EAMcE,UANd;AAAA;AAAA;AAAA;AAAA;AAAA,WAMuC,IANvC;AAAA;AAAA,gFAOKF,OAPL,EAOcE,UAPd;AAAA;AAAA;AAAA;AAAA;AAAA,WAOwC,IAPxC;AAAA;AAAA,uFAUKA,UAVL;AAAA;AAAA;AAAA;AAAA;AAAA,WAUsC,IAVtC;AAAA;AAAA,kFAWKF,OAXL,EAWcE,UAXd;AAAA;AAAA;AAAA;AAAA;AAAA,WAW0C,IAX1C;AAAA;AAAA,0EAcKF,OAdL,EAccE,UAdd;AAAA;AAAA;AAAA;AAAA;AAAA,WAckC,IAdlC;AAAA;AAAA,4EAeKF,OAfL,EAecE,UAfd;AAAA;AAAA;AAAA;AAAA;AAAA,WAeoC,IAfpC;AAAA;AAAA,gFAgBKF,OAhBL,EAgBcE,UAhBd;AAAA;AAAA;AAAA;AAAA;AAAA,WAgBwC,IAhBxC;AAAA;AAAA,4EAiBKF,OAjBL,EAiBcE,UAjBd;AAAA;AAAA;AAAA;AAAA;AAAA,WAiBoC,IAjBpC;AAAA;AAAA,iFAkBKF,OAlBL,EAkBcE,UAlBd;AAAA;AAAA;AAAA;AAAA;AAAA,WAkBwC,IAlBxC;AAAA;AAAA,sEAkEKD,MAlEL,4JAwJKA,MAxJL,qJAyMKA,MAzML,8IAoOKA,MApOL,+IAgQKA,MAhQL,uJA+RKA,MA/RL","sourcesContent":["import React from \"react\";\r\nimport {persist} from \"mobx-persist\";\r\nimport {action, observable} from \"mobx\";\r\nimport config from \"../config\";\r\n\r\nexport class AuthStore {\r\n\r\n    rootStore = null;\r\n\r\n    // Password Login\r\n    @observable passwordAuthErrorMessage = null;\r\n    @persist @observable accessToken = null;\r\n    @persist @observable refreshToken = null;\r\n\r\n    // OTP Verify\r\n    @observable otpAuthErrorMessage = null;\r\n    @persist @observable otpAccessToken = null;\r\n\r\n    // User Details\r\n    @persist @observable userId = null;\r\n    @persist @observable userName = null;\r\n    @persist @observable userFullName = null;\r\n    @persist @observable userRole = null;\r\n    @persist @observable userPolicies = null;\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n    }\r\n\r\n    makeWSConnection() {\r\n        // Create WebSocket connection.\r\n        let baseURL = (config.SERVER_BASE_URL).toString();\r\n        if(baseURL.startsWith('https://')){\r\n            baseURL = baseURL.replace(\"https://\", \"\");\r\n        } else if(baseURL.startsWith('http://')) {\r\n            baseURL = baseURL.replace(\"http://\", \"\");\r\n        }\r\n        const socket = new WebSocket(`wss://${baseURL}`);\r\n\r\n        // Connection opened\r\n        socket.addEventListener('open',  (event) => {\r\n            socket.send('Hello Server!');\r\n            console.log('WebSocket Connected');\r\n        });\r\n\r\n        // Listen for messages\r\n        socket.addEventListener('message',  (event) => {\r\n            console.log('Message from server', event.data);\r\n            const details = JSON.parse(event.data);\r\n            debugger;\r\n            if(details && details.errorMessage) {\r\n                this.props.miscellaneousStore.setFailedJobDetails(details);\r\n            }\r\n        });\r\n\r\n        // Listen for possible errors\r\n        socket.addEventListener('error',  (event) =>{\r\n            console.log('Message from server ', event.data);\r\n        });\r\n    }\r\n\r\n    postLogin(props) {\r\n        this.getPolicies(props);\r\n        this.makeWSConnection();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param userName\r\n     * @param password\r\n     */\r\n    @action loginWithPassword(email, password, props) {\r\n\r\n        let data = {\r\n            \"username\": email,\r\n            \"password\": Buffer.from(password).toString('base64')\r\n        }\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/auth/login`, {\r\n            method: 'POST', // or 'PUT'\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.error) {\r\n                    this.passwordAuthErrorMessage = res.error;\r\n                } else {\r\n\r\n                    this.otpAuthErrorMessage = null;\r\n                    this.passwordAuthErrorMessage = null;\r\n\r\n                    const {accessToken, refreshToken, firstname, lastname, userid, OTPAccessToken} = res;\r\n                    localStorage.setItem('userName', email);\r\n                    if (accessToken !== undefined) {\r\n                        //this.setState({errorMessage: 'Authentication successful', accessToken, refreshToken});\r\n                        //this.passwordAuthErrorMessage = 'Authentication successful';\r\n                        localStorage.setItem('accessToken', accessToken);\r\n                        localStorage.setItem('refreshToken', refreshToken);\r\n                        localStorage.setItem('loggedInUserFullName', `${firstname} ${lastname}`);\r\n                        localStorage.setItem('loggedInUserID', userid);\r\n\r\n                        this.accessToken = accessToken;\r\n                        this.refreshToken = refreshToken;\r\n                        this.userId = userid;\r\n                        this.userName = email;\r\n                        this.userFullName = `${firstname} ${lastname}`\r\n                        this.postLogin(props);\r\n\r\n                    } else if (OTPAccessToken !== undefined) {\r\n                        //this.setState({errorMessage: 'Authentication successful'});\r\n                        //this.passwordAuthErrorMessage = 'Authentication successful';\r\n                        localStorage.setItem('OTPAccessToken', OTPAccessToken);\r\n                        this.otpAccessToken = OTPAccessToken;\r\n                        this.userName = email;\r\n                        props.history.push('/login/mfa');\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.passwordAuthErrorMessage = error.toString();\r\n            });\r\n\r\n        /*data = {\r\n            \"username\": email\r\n        }\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/users/querypolicies`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.error) {\r\n                    //this.setState({errorMessage: res.error});\r\n                    this.passwordAuthErrorMessage = res.error;\r\n                } else {\r\n                    localStorage.setItem('userpolicies', JSON.stringify(res));\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                //this.setState({errorMessage: error.toString()});\r\n                this.passwordAuthErrorMessage = error.toString();\r\n            });*/\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param userName\r\n     * @param TOTP\r\n     */\r\n    @action loginWithTOTP(OTP, props) {\r\n\r\n        let data = {\r\n            \"OTP\": OTP\r\n        }\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/auth/login/mfa`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${this.getOTPAccessToken()}`\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.error) {\r\n                    this.otpAuthErrorMessage = res.error;\r\n                } else {\r\n\r\n                    this.otpAuthErrorMessage = null;\r\n                    this.passwordAuthErrorMessage = null;\r\n\r\n                    const {accessToken, refreshToken, firstname, lastname, userid, userName} = res;\r\n                    // this.setState({errorMessage: 'Authentication successful', accessToken, refreshToken});\r\n                    localStorage.setItem('accessToken', accessToken);\r\n                    localStorage.setItem('refreshToken', refreshToken);\r\n                    //localStorage.setItem('userName', userName);\r\n                    localStorage.setItem('loggedInUserFullName', `${firstname} ${lastname}`);\r\n                    localStorage.setItem('loggedInUserID', userid);\r\n                    //this.props.history.push('/dashboard', {userName: email});\r\n\r\n                    this.accessToken = accessToken;\r\n                    this.refreshToken = refreshToken;\r\n                    this.userId = userid;\r\n                    //this.userName = email;\r\n                    this.userFullName = `${firstname} ${lastname}`\r\n                    this.postLogin(props);\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.otpAuthErrorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    @action requestOTP() {\r\n\r\n        const token = localStorage.getItem('OTPAccessToken');\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/auth/otp`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.error) {\r\n                    this.otpAuthErrorMessage = res.error;\r\n                } else if (res && res.message) {\r\n                    this.otpAuthErrorMessage = res.message;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    @action logout(props) {\r\n\r\n        const token = this.getRefreshToken();\r\n        const username = this.getUserName();\r\n        const url = `${config.SERVER_BASE_URL}/v1/auth/logout`;\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({username: username, token: token}),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res.error) {\r\n                    alert(res.error);\r\n                } else {\r\n                    //this.navigateToHome();\r\n                    localStorage.clear();\r\n                    props.history.push('/');\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                alert('Error:', error);\r\n            });\r\n    }\r\n\r\n    @action getPolicies(props) {\r\n\r\n        const data = {\r\n            \"username\": localStorage.getItem('userName')\r\n        }\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/users/querypolicies`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.error) {\r\n                    //this.setState({errorMessage: res.error});\r\n                    this.passwordAuthErrorMessage = res.error;\r\n                } else {\r\n                    // props.history.push('/dashboard');\r\n                    localStorage.setItem('userpolicies', JSON.stringify(res));\r\n                    props.history.push('/dashboard', {userName: this.userName});\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                //this.setState({errorMessage: error.toString()});\r\n                this.passwordAuthErrorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    @action getAccessToken() {\r\n        return this.accessToken;\r\n    }\r\n\r\n    getRefreshToken() {\r\n        return this.refreshToken;\r\n    }\r\n\r\n    getOTPAccessToken() {\r\n        return this.otpAccessToken;\r\n    }\r\n\r\n    getUserName() {\r\n        return this.userName;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}