{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\ReactExampleCode\\\\test-typescript-compile-within-a-javascript-project\\\\Code\\\\src\\\\PaginatedTable\\\\ReactTable.js\";\nimport React from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport './ReactTable.css';\n\nclass ReactTable extends React.Component {\n  render() {\n    const columns = this.props.tableHeader.map(column => {\n      return {\n        dataField: column.key,\n        text: column.label,\n        classes: column.classes || ''\n      };\n    });\n    const products = this.props.rowData;\n    const header = this.props.header;\n    const noDataMessage = this.props.noDataMessage || 'Table is Empty';\n\n    const indication = () => noDataMessage;\n\n    const sizePerPageRenderer = ({\n      options,\n      currSizePerPage,\n      onSizePerPageChange\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btn-group\",\n      role: \"group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, options.map(option => {\n      const isSelect = currSizePerPage === `${option.page}`;\n      return /*#__PURE__*/React.createElement(\"button\", {\n        key: option.text,\n        type: \"button\",\n        onClick: () => onSizePerPageChange(option.page),\n        className: `btn ${isSelect ? 'btn-secondary' : 'btn-warning'}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }\n      }, option.text);\n    }));\n\n    const options = {\n      // paginationSize: 5,\n      // pageStartIndex: 1,\n      // // alwaysShowAllBtns: true, // Always show next and previous button\n      // // withFirstAndLast: false, // Hide the going to First and Last page button\n      // // hideSizePerPage: true, // Hide the sizePerPage dropdown always\n      // hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\n      firstPageText: 'First',\n      prePageText: 'Back',\n      nextPageText: 'Next',\n      lastPageText: 'Last',\n      // nextPageTitle: 'First page',\n      // prePageTitle: 'Pre page',\n      // firstPageTitle: 'Next page',\n      // lastPageTitle: 'Last page',\n      // showTotal: false,\n      sizePerPageRenderer,\n      disablePageTitle: true,\n      sizePerPageList: [{\n        text: '5',\n        value: 5\n      }, {\n        text: '10',\n        value: 10\n      }, {\n        text: '25',\n        value: 25\n      }, {\n        text: 'All',\n        value: products.length\n      }] // A numeric array is also available. the purpose of above example is custom the text\n\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"react-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, header ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 27\n      }\n    }, header) : null, /*#__PURE__*/React.createElement(BootstrapTable, {\n      keyField: \"id\",\n      data: products,\n      columns: columns,\n      pagination: paginationFactory(options),\n      bordered: false,\n      classes: this.props.className,\n      noDataIndication: indication,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default ReactTable;","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/ReactExampleCode/test-typescript-compile-within-a-javascript-project/Code/src/PaginatedTable/ReactTable.js"],"names":["React","BootstrapTable","paginationFactory","ReactTable","Component","render","columns","props","tableHeader","map","column","dataField","key","text","label","classes","products","rowData","header","noDataMessage","indication","sizePerPageRenderer","options","currSizePerPage","onSizePerPageChange","option","isSelect","page","firstPageText","prePageText","nextPageText","lastPageText","disablePageTitle","sizePerPageList","value","length","className"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport './ReactTable.css';\r\n\r\nclass ReactTable extends React.Component {\r\n\r\n    render() {\r\n        const columns = this.props.tableHeader.map(column => {\r\n            return {\r\n                dataField: column.key,\r\n                text: column.label,\r\n                classes: column.classes || ''\r\n            }\r\n        });\r\n        const products = this.props.rowData;\r\n        const header = this.props.header;\r\n        const noDataMessage = this.props.noDataMessage || 'Table is Empty';\r\n        const indication = () => noDataMessage;\r\n\r\n        const sizePerPageRenderer = ({\r\n                                         options,\r\n                                         currSizePerPage,\r\n                                         onSizePerPageChange\r\n                                     }) => (\r\n            <div className=\"btn-group\" role=\"group\">\r\n                {\r\n                    options.map((option) => {\r\n                        const isSelect = currSizePerPage === `${option.page}`;\r\n                        return (\r\n                            <button\r\n                                key={ option.text }\r\n                                type=\"button\"\r\n                                onClick={ () => onSizePerPageChange(option.page) }\r\n                                className={ `btn ${isSelect ? 'btn-secondary' : 'btn-warning'}` }\r\n                            >\r\n                                { option.text }\r\n                            </button>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n        const options = {\r\n            // paginationSize: 5,\r\n            // pageStartIndex: 1,\r\n            // // alwaysShowAllBtns: true, // Always show next and previous button\r\n            // // withFirstAndLast: false, // Hide the going to First and Last page button\r\n            // // hideSizePerPage: true, // Hide the sizePerPage dropdown always\r\n            // hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\r\n            firstPageText: 'First',\r\n            prePageText: 'Back',\r\n            nextPageText: 'Next',\r\n            lastPageText: 'Last',\r\n            // nextPageTitle: 'First page',\r\n            // prePageTitle: 'Pre page',\r\n            // firstPageTitle: 'Next page',\r\n            // lastPageTitle: 'Last page',\r\n            // showTotal: false,\r\n            sizePerPageRenderer,\r\n            disablePageTitle: true,\r\n            sizePerPageList: [{\r\n                text: '5', value: 5\r\n            }, {\r\n                text: '10', value: 10\r\n            }, {\r\n                text: '25', value: 25\r\n            }, {\r\n                text: 'All', value: products.length\r\n            }] // A numeric array is also available. the purpose of above example is custom the text\r\n        };\r\n        return (\r\n            <div className='react-table'>\r\n                {header ? <div className='table-header'>{header}</div> : null}\r\n                <BootstrapTable keyField='id'\r\n                            data={ products }\r\n                            columns={ columns }\r\n                            pagination={ paginationFactory(options) }\r\n                            bordered={false}\r\n                            classes={this.props.className}\r\n                            noDataIndication={ indication }\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactTable;\r\n"]},"metadata":{},"sourceType":"module"}