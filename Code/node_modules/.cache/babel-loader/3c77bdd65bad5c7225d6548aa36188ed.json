{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;\n\nimport React from \"react\";\nimport { action, observable, toJS } from \"mobx\";\nimport config from \"../config\";\nexport let SettingsStore = (_class = (_temp = class SettingsStore {\n  constructor(rootStore) {\n    this.rootStore = null;\n\n    _initializerDefineProperty(this, \"showConfirmSaveModal\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"showToast\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"successMessage\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"errorMessage\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"inboundRules\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"inboundRules_UNMODIFIED\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"myIPAddress\", _descriptor7, this);\n\n    this.rootStore = rootStore;\n  }\n\n  setShowConfirmSaveModal(flag) {\n    this.showConfirmSaveModal = flag;\n  }\n  /**\r\n   *\r\n   */\n\n\n  getMFABypassRules() {\n    /*        this.inboundRules = [\r\n                {id: 1, source: 'source1', ip: '0.0.0.0', description: 'test1'},\r\n                {id: 2, source: 'source2', ip: '1.1.1.1', description: 'test2'},\r\n                {id: 3, source: 'source3', ip: '2.2.2.2', description: 'test3'}\r\n            ];\r\n              this.inboundRules_UNMODIFIED = this.inboundRules;\r\n      */\n    fetch(`${config.SERVER_BASE_URL}/v1/settings/inboundrules`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res && res.data) {\n        this.setMFABypassRules(res.data);\n        this.setMFABypassRules_UNMODIFIED(res.data);\n      } else if (res && res.error) {\n        const errorMessage = res.error;\n      }\n    }).catch(error => {\n      // alert(error.toString())\n      this.errorMessage = error.toString();\n    });\n  }\n  /**\r\n   *\r\n   * @param data\r\n   */\n\n\n  setMFABypassRules(data) {\n    //this.inboundRules.splice(0, this.inboundRules.length)\n    if (data) {\n      this.inboundRules = data;\n    } else {\n      this.inboundRules = [];\n    }\n  }\n  /**\r\n   *\r\n   * @param data\r\n   */\n\n\n  setMFABypassRules_UNMODIFIED(data) {\n    this.inboundRules_UNMODIFIED.splice(0, this.inboundRules_UNMODIFIED.length);\n\n    if (data) {\n      this.inboundRules_UNMODIFIED = data;\n    } else {\n      this.inboundRules_UNMODIFIED = [];\n    }\n  }\n  /**\r\n   *\r\n   * @param source\r\n   * @param description\r\n   */\n\n\n  addMFABypassRule(source, description) {\n    const _inboundRules = this.inboundRules;\n    const id = Math.random();\n    const obj = {\n      id: id,\n      source: '',\n      ip: '',\n      description: ''\n    };\n\n    _inboundRules.push(obj);\n\n    this.inboundRules = _inboundRules;\n  }\n  /**\r\n   *\r\n   * @param source\r\n   * @param description\r\n   */\n\n\n  deleteMFABypassRule(id) {\n    const _inboundRules = toJS(this.inboundRules);\n\n    const index = _inboundRules.findIndex(obj => obj.id === id);\n\n    _inboundRules.splice(index, 1);\n\n    this.inboundRules = _inboundRules;\n  }\n  /**\r\n   *\r\n   */\n\n\n  saveMFABypassRules() {\n    //alert(JSON.stringify(this.inboundRules))\n    // API CALL\n    fetch(`${config.SERVER_BASE_URL}/v1/settings/inboundrules`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.inboundRules)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.setMFABypassRules_UNMODIFIED(this.inboundRules);\n        this.successMessage = res.message;\n        this.errorMessage = null;\n        this.showToast = true;\n        this.showConfirmSaveModal = false;\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showToast = true;\n        this.showConfirmSaveModal = false;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  discardMFABypassRuleChanges() {\n    this.inboundRules.splice(0, this.inboundRules.length);\n    this.inboundRules = this.inboundRules_UNMODIFIED;\n  }\n\n  getMyIPAddress() {\n    fetch(`${config.SERVER_BASE_URL}/v1/ipaddress`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.text()).then(res => {\n      if (res) {\n        this.myIPAddress = res;\n      } else if (res && res.error) {\n        const errorMessage = res.error;\n      }\n    }).catch(error => {\n      alert(error.toString());\n      this.errorMessage = error.toString();\n    });\n    return this.myIPAddress;\n  }\n\n  setToast(flag) {\n    this.showToast = flag;\n    this.successMessage = null;\n    this.errorMessage = null;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"showConfirmSaveModal\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"showToast\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"successMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"errorMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"inboundRules\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"inboundRules_UNMODIFIED\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"myIPAddress\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getMFABypassRules\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getMFABypassRules\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setMFABypassRules\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setMFABypassRules\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setMFABypassRules_UNMODIFIED\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setMFABypassRules_UNMODIFIED\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addMFABypassRule\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addMFABypassRule\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"deleteMFABypassRule\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"deleteMFABypassRule\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"saveMFABypassRules\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"saveMFABypassRules\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"discardMFABypassRuleChanges\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"discardMFABypassRuleChanges\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getMyIPAddress\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getMyIPAddress\"), _class.prototype)), _class);","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/Capstone/lottery/mslc-backoffice-client/v1/Code/src/store/SettingsStore.js"],"names":["React","action","observable","toJS","config","SettingsStore","constructor","rootStore","setShowConfirmSaveModal","flag","showConfirmSaveModal","getMFABypassRules","fetch","SERVER_BASE_URL","method","headers","localStorage","getItem","then","response","json","res","data","setMFABypassRules","setMFABypassRules_UNMODIFIED","error","errorMessage","catch","toString","inboundRules","inboundRules_UNMODIFIED","splice","length","addMFABypassRule","source","description","_inboundRules","id","Math","random","obj","ip","push","deleteMFABypassRule","index","findIndex","saveMFABypassRules","body","JSON","stringify","message","successMessage","showToast","discardMFABypassRuleChanges","getMyIPAddress","text","myIPAddress","alert","setToast"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {action, observable, toJS} from \"mobx\";\r\nimport config from \"../config\";\r\n\r\nexport class SettingsStore {\r\n\r\n    rootStore = null;\r\n\r\n    @observable showConfirmSaveModal = false;\r\n    @observable showToast = false;\r\n    @observable successMessage = '';\r\n    @observable errorMessage = '';\r\n\r\n    @observable inboundRules = []\r\n    @observable inboundRules_UNMODIFIED = []\r\n\r\n    @observable myIPAddress = '';\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n    }\r\n\r\n    setShowConfirmSaveModal(flag) {\r\n        this.showConfirmSaveModal = flag\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    @action getMFABypassRules() {\r\n\r\n        /*        this.inboundRules = [\r\n                    {id: 1, source: 'source1', ip: '0.0.0.0', description: 'test1'},\r\n                    {id: 2, source: 'source2', ip: '1.1.1.1', description: 'test2'},\r\n                    {id: 3, source: 'source3', ip: '2.2.2.2', description: 'test3'}\r\n                ];\r\n\r\n                this.inboundRules_UNMODIFIED = this.inboundRules;\r\n\r\n        */\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/settings/inboundrules`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.data) {\r\n                    this.setMFABypassRules(res.data);\r\n                    this.setMFABypassRules_UNMODIFIED(res.data);\r\n                } else if (res && res.error) {\r\n                    const errorMessage = res.error;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                // alert(error.toString())\r\n                this.errorMessage = error.toString();\r\n            });\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param data\r\n     */\r\n    @action setMFABypassRules(data) {\r\n        //this.inboundRules.splice(0, this.inboundRules.length)\r\n        if (data) {\r\n            this.inboundRules = data;\r\n        } else {\r\n            this.inboundRules = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param data\r\n     */\r\n    @action setMFABypassRules_UNMODIFIED(data) {\r\n        this.inboundRules_UNMODIFIED.splice(0, this.inboundRules_UNMODIFIED.length)\r\n        if (data) {\r\n            this.inboundRules_UNMODIFIED = data;\r\n        } else {\r\n            this.inboundRules_UNMODIFIED = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param source\r\n     * @param description\r\n     */\r\n    @action addMFABypassRule(source, description) {\r\n        const _inboundRules = this.inboundRules;\r\n        const id = Math.random();\r\n        const obj = {\r\n            id: id,\r\n            source: '',\r\n            ip: '',\r\n            description: ''\r\n        }\r\n        _inboundRules.push(obj);\r\n        this.inboundRules = _inboundRules;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param source\r\n     * @param description\r\n     */\r\n    @action deleteMFABypassRule(id) {\r\n        const _inboundRules = toJS(this.inboundRules);\r\n        const index = _inboundRules.findIndex(obj => obj.id === id);\r\n        _inboundRules.splice(index, 1);\r\n        this.inboundRules = _inboundRules;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    @action saveMFABypassRules() {\r\n\r\n        //alert(JSON.stringify(this.inboundRules))\r\n\r\n        // API CALL\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/settings/inboundrules`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.inboundRules),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.message) {\r\n                    this.setMFABypassRules_UNMODIFIED(this.inboundRules);\r\n                    this.successMessage = res.message;\r\n                    this.errorMessage = null;\r\n                    this.showToast = true;\r\n                    this.showConfirmSaveModal = false;\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showToast = true;\r\n                    this.showConfirmSaveModal = false;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    @action discardMFABypassRuleChanges() {\r\n        this.inboundRules.splice(0, this.inboundRules.length);\r\n        this.inboundRules = this.inboundRules_UNMODIFIED;\r\n    }\r\n\r\n    @action getMyIPAddress() {\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/ipaddress`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => response.text())\r\n            .then(res => {\r\n                if (res) {\r\n                    this.myIPAddress = res;\r\n                } else if (res && res.error) {\r\n                    const errorMessage = res.error;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                alert(error.toString())\r\n                this.errorMessage = error.toString();\r\n            });\r\n\r\n        return this.myIPAddress;\r\n    }\r\n\r\n    setToast(flag) {\r\n        this.showToast = flag;\r\n        this.successMessage = null;\r\n        this.errorMessage = null;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}