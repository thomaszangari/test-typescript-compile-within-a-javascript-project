{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\ReactExampleCode\\\\test-typescript-compile-within-a-javascript-project\\\\Code\\\\src\\\\pages\\\\src\\\\components\\\\Home\\\\ChooseYourCoupon\\\\index.tsx\";\nimport React, { useState } from 'react';\nimport PrescriptionDetailedForm from '../../component/PrescriptionDetailedForm';\nimport CouponsTiles from '../../component/CouponsTiles';\nimport { Link } from 'react-router-dom'; //import styles from '../../../../../styles/ChooseYourCoupon.module.scss'; used in version 1\n\n/**\r\n * @Pages\r\n * \r\n * List of coupons based on prescriptin details\r\n * uses coupon service\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language the language to display the data \r\n * @param prescriptionFromRoute the prescription passed by the Route \r\n * @param location the location where to search\r\n * \r\n * uses\r\n * \r\n * @component CouponTiles\r\n * @component PrescriptionDetailedForm\r\n */\nlet allTheData;\n\nconst ChooseYourCoupon = ({\n  language,\n  prescriptionFromRoute,\n  location\n}) => {\n  location = JSON.parse(location);\n  prescriptionFromRoute = JSON.parse(prescriptionFromRoute);\n  console.log('location', location, prescriptionFromRoute);\n  let pharmacyText = {\n    _text: \"\"\n  };\n  let drug = {\n    ndcCode: pharmacyText,\n    brandGenericIndicator: pharmacyText,\n    gsn: pharmacyText,\n    drugRanking: pharmacyText,\n    quantity: pharmacyText,\n    quantityRacking: pharmacyText\n  };\n  let pharmacy = {\n    name: pharmacyText,\n    streetAddress: pharmacyText,\n    city: pharmacyText,\n    state: pharmacyText,\n    zipCode: pharmacyText,\n    latitude: pharmacyText,\n    longitude: pharmacyText,\n    hoursOfOperatio: pharmacyText,\n    phone: pharmacyText,\n    npi: pharmacyText,\n    chainCode: pharmacyText,\n    distance: pharmacyText\n  };\n  let pricing = {\n    price: pharmacyText,\n    priceBasis: pharmacyText,\n    usualAndCustomaryPrice: pharmacyText,\n    macPrice: pharmacyText,\n    awpPrice: pharmacyText\n  };\n  let locatedDrug = [];\n  let locatedDrugName = {\n    drugName: pharmacyText,\n    brandGenericIndicator: pharmacyText,\n    isSelected: pharmacyText\n  };\n  let drugs = {\n    locatedDrug\n  };\n  let forms = {\n    locatedDrugForm\n  };\n  let names = {\n    locatedDrugName\n  };\n  let quantities = {\n    locatedDrugQty\n  };\n  let strengths = {\n    locatedDrugStrength\n  };\n  let locatedDrugStrength;\n  let locatedDrugQty;\n  let locatedDrugForm;\n  let couponData = {\n    drugs,\n    forms,\n    names,\n    quantities,\n    strengths\n  };\n  const [coupons, setCoupons] = useState(couponData);\n  const [valuesForFilter, setValuesForFilter] = useState({\n    form: \"\",\n    dosage: \"\",\n    quantity: \"\"\n  });\n  let filterValues = {\n    form: \"\",\n    dosage: \"\",\n    quantity: \"\"\n  };\n\n  const setValuesForFilterCoupons = value => {\n    setValuesForFilter(Object.assign(valuesForFilter, value)); //setValuesForFilter(Object.assign(valuesForFilter,value));\n    //fileterCoupons();\n  };\n\n  const fileterCoupons = () => {\n    //coupons.drugs.locatedDrug = allTheData.drugs.locatedDrug.filter((e:LocatedDrugInterface) => e.drug.quantity._text === valuesForFilter.quantity);\n    setCoupons(JSON.parse(JSON.stringify(coupons)));\n  };\n  /**\r\n   * returns to the location pages \r\n   * \r\n   */\n\n\n  const returnToLocation = () => {// router.push\n    //   (\n    //     {\n    //       pathname: '/src/components/Home',\n    //       query: {\n    //         component: 'location',\n    //         prescriptions: prescriptionFromRoute,\n    //         location: location,\n    //         language: language\n    //       },\n    //     })\n  };\n\n  let arr = [];\n  /**\r\n   * helper function for development \r\n   * filles the coupons\r\n   * \r\n   * @component CouponTiles \r\n   */\n\n  const fillCoupon = () => {\n    for (let i = 0; i < 7; i++) {\n      arr.push( /*#__PURE__*/React.createElement(CouponsTiles, {\n        language: language,\n        prescription: prescriptionFromRoute,\n        couponsData: prescriptionFromRoute,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }\n      }));\n    }\n  };\n  /**\r\n   * Call to the service Prescription to retreve the prescriptionsfordatalist available\r\n   * @useState  setPrescriptionDetailsForPrescriptionDetailComponent\r\n   * @param setPrescriptionDetails // passed in from the function\r\n   * @useState\r\n   *  \r\n   */\n  // \n\n\n  fillCoupon(); // Object.keys(coupons).length <= 0 && getCoupons({ variables: { prescription: prescriptionFromRoute.search_name, latitude: location.latitude, longitude: location.longitude }, context: { clientName: 'coupon' } })\n  //allTheData === undefined && getCoupons({ variables: { prescription: prescriptionFromRoute.search_name, latitude: location.latitude, longitude: location.longitude }, context: { clientName: 'coupon' } })\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 5\n    }\n  }, (language === 'english' || language === undefined) && /*#__PURE__*/React.createElement(React.Fragment, null, \" \", /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 69\n    }\n  }, \"Step 3 of 3: \"), \"Choose Your Coupon\")), language === 'spanish' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 36\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 40\n    }\n  }, '<Spanish>', \" Step 3 of 3: \"), \"Choose Your Coupon\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location cursor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }\n  }, (language === 'english' || language === undefined) && /*#__PURE__*/React.createElement(React.Fragment, null, \"Location: \", location.myLocation, \" \", /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: '/src/components/Home',\n      query: {\n        component: 'location',\n        prescriptions: prescriptionFromRoute,\n        location: location,\n        language: language\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 45\n    }\n  }, \"Clear\")), language === 'spanish' && /*#__PURE__*/React.createElement(React.Fragment, null, '<Spanish>', \"Location: \", location, \" \", /*#__PURE__*/React.createElement(\"u\", {\n    onClick: returnToLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 47\n    }\n  }, \"Clear\"))), coupons['drugs'].locatedDrug.length > 0 && /*#__PURE__*/React.createElement(PrescriptionDetailedForm, {\n    language: language,\n    disabled: false,\n    coupons: coupons,\n    prescriptionName: prescriptionFromRoute,\n    filterCoupons: fileterCoupons,\n    setValuesForFilterCoupons: setValuesForFilterCoupons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 52\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list_info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 12\n    }\n  }, \"Sorted by: \"), \"Price\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 12\n    }\n  }, \"Number of Results: \"), \"3\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"radius\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 31\n    }\n  }, \"Radius: \"), \"15 miles\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }\n  }, coupons['drugs'].locatedDrug.map(element => {\n    if (element.drug.quantity._text === valuesForFilter.quantity) return /*#__PURE__*/React.createElement(CouponsTiles, {\n      language: language,\n      prescription: prescriptionFromRoute,\n      couponsData: element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 24\n      }\n    });\n  })));\n};\n\nexport default ChooseYourCoupon;","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/ReactExampleCode/test-typescript-compile-within-a-javascript-project/Code/src/pages/src/components/Home/ChooseYourCoupon/index.tsx"],"names":["React","useState","PrescriptionDetailedForm","CouponsTiles","Link","allTheData","ChooseYourCoupon","language","prescriptionFromRoute","location","JSON","parse","console","log","pharmacyText","_text","drug","ndcCode","brandGenericIndicator","gsn","drugRanking","quantity","quantityRacking","pharmacy","name","streetAddress","city","state","zipCode","latitude","longitude","hoursOfOperatio","phone","npi","chainCode","distance","pricing","price","priceBasis","usualAndCustomaryPrice","macPrice","awpPrice","locatedDrug","locatedDrugName","drugName","isSelected","drugs","forms","locatedDrugForm","names","quantities","locatedDrugQty","strengths","locatedDrugStrength","couponData","coupons","setCoupons","valuesForFilter","setValuesForFilter","form","dosage","filterValues","setValuesForFilterCoupons","value","Object","assign","fileterCoupons","stringify","returnToLocation","arr","fillCoupon","i","push","undefined","myLocation","pathname","query","component","prescriptions","length","map","element"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport PrescriptionDetailedForm from '../../component/PrescriptionDetailedForm';\r\nimport CouponsTiles from '../../component/CouponsTiles';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//import styles from '../../../../../styles/ChooseYourCoupon.module.scss'; used in version 1\r\n\r\n\r\n\r\nexport interface CouponStructureInterface {\r\n  drugs: DrugsInterface;\r\n  forms: LocatedDrugFormInterface;\r\n  names: LocatedDrugNameInterface;\r\n  quantities: LocatedDrugQtyInterface;\r\n  strengths: LocatedDrugStrengthInterface;\r\n}\r\nexport interface LocatedDrugFormInterface {\r\n  locatedDrugForm: GetLocatedDrugFormInterface[];\r\n}\r\nexport interface LocatedDrugNameInterface {\r\n  locatedDrugName: GetLocatedDrugNameInterface;\r\n}\r\nexport interface DrugsInterface {\r\n  locatedDrug:LocatedDrugInterface[];\r\n}\r\nexport interface LocatedDrugQtyInterface {\r\n  locatedDrugQty: GetLocatedDrugQtyInterface[]\r\n\r\n}\r\nexport interface LocatedDrugStrengthInterface {\r\n  locatedDrugStrength: GetLocatedDrugStrengthInterface[];\r\n}\r\nexport interface GetLocatedDrugStrengthInterface {\r\n  strength: PharmacyTextInterface;\r\n  gsn: PharmacyTextInterface;\r\n  isSelected: PharmacyTextInterface;\r\n  ranking: PharmacyTextInterface;\r\n}\r\n\r\n\r\nexport interface GetLocatedDrugQtyInterface {\r\n  quantity: PharmacyTextInterface\r\n  quantityUomr: PharmacyTextInterface\r\n  gsn: PharmacyTextInterface\r\n  isSelected: PharmacyTextInterface\r\n  ranking: PharmacyTextInterface\r\n}\r\n\r\nexport interface GetLocatedDrugFormInterface {\r\n  form: PharmacyTextInterface;\r\n  gsn: PharmacyTextInterface;\r\n  isSelected: PharmacyTextInterface;\r\n  ranking: PharmacyTextInterface;\r\n  awpPrice: PharmacyTextInterface;\r\n}\r\n\r\nexport interface GetLocatedDrugNameInterface {\r\n  drugName: PharmacyTextInterface\r\n  brandGenericIndicator: PharmacyTextInterface\r\n  isSelected: PharmacyTextInterface\r\n}\r\n\r\n\r\n\r\nexport interface LocatedDrugInterface {\r\n  pharmacy: PharmacyInterface\r\n  drug: DrugInterface\r\n  pricing: PricingInterface\r\n}\r\n\r\nexport interface PharmacyInterface {\r\n  name: PharmacyTextInterface;\r\n  streetAddress: PharmacyTextInterface;\r\n  city: PharmacyTextInterface;\r\n  state: PharmacyTextInterface;\r\n  zipCode: PharmacyTextInterface;\r\n  latitude: PharmacyTextInterface;\r\n  longitude: PharmacyTextInterface;\r\n  hoursOfOperatio: PharmacyTextInterface;\r\n  phone: PharmacyTextInterface;\r\n  npi: PharmacyTextInterface;\r\n  chainCode: PharmacyTextInterface;\r\n  distance: PharmacyTextInterface;\r\n}\r\n\r\nexport interface DrugInterface {\r\n  ndcCode: PharmacyTextInterface;\r\n  brandGenericIndicator: PharmacyTextInterface;\r\n  gsn: PharmacyTextInterface;\r\n  drugRanking: PharmacyTextInterface;\r\n  quantity: PharmacyTextInterface;\r\n  quantityRacking: PharmacyTextInterface;\r\n}\r\n\r\nexport interface PricingInterface {\r\n  price: PharmacyTextInterface;\r\n  priceBasis: PharmacyTextInterface;\r\n  usualAndCustomaryPrice: PharmacyTextInterface;\r\n  macPrice: PharmacyTextInterface;\r\n  awpPrice: PharmacyTextInterface;\r\n}\r\nexport interface PharmacyTextInterface {\r\n  _text: string;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @Pages\r\n * \r\n * List of coupons based on prescriptin details\r\n * uses coupon service\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language the language to display the data \r\n * @param prescriptionFromRoute the prescription passed by the Route \r\n * @param location the location where to search\r\n * \r\n * uses\r\n * \r\n * @component CouponTiles\r\n * @component PrescriptionDetailedForm\r\n */\r\n\r\n let allTheData:CouponStructureInterface;\r\nconst ChooseYourCoupon = ({ language, prescriptionFromRoute, location }:any) => {\r\n\r\n      location = JSON.parse(location);  \r\n      prescriptionFromRoute = JSON.parse(prescriptionFromRoute);\r\n      console.log('location',location,prescriptionFromRoute);\r\n  \r\n\r\n  let pharmacyText: PharmacyTextInterface = {\r\n    _text: \"\"\r\n  }\r\n\r\n  \r\n  let drug: DrugInterface = {\r\n    ndcCode: pharmacyText,\r\n    brandGenericIndicator: pharmacyText,\r\n    gsn: pharmacyText,\r\n    drugRanking: pharmacyText,\r\n    quantity: pharmacyText,\r\n    quantityRacking: pharmacyText\r\n  }\r\n\r\n  let pharmacy: PharmacyInterface = {\r\n    name: pharmacyText,\r\n    streetAddress: pharmacyText,\r\n    city: pharmacyText,\r\n    state: pharmacyText,\r\n    zipCode: pharmacyText,\r\n    latitude: pharmacyText,\r\n    longitude: pharmacyText,\r\n    hoursOfOperatio: pharmacyText,\r\n    phone: pharmacyText,\r\n    npi: pharmacyText,\r\n    chainCode: pharmacyText,\r\n    distance: pharmacyText,\r\n  }\r\n\r\n  let pricing = {\r\n    price: pharmacyText,\r\n    priceBasis: pharmacyText,\r\n    usualAndCustomaryPrice: pharmacyText,\r\n    macPrice: pharmacyText,\r\n    awpPrice: pharmacyText,\r\n  }\r\n\r\n\r\n  let locatedDrug: LocatedDrugInterface[] = []; \r\n\r\n  let locatedDrugName: GetLocatedDrugNameInterface = {\r\n    drugName: pharmacyText,\r\n    brandGenericIndicator: pharmacyText,\r\n    isSelected: pharmacyText\r\n  }\r\n\r\n  let drugs: DrugsInterface = {\r\n    locatedDrug\r\n  };\r\n  let forms: LocatedDrugFormInterface = {\r\n    locatedDrugForm\r\n  };\r\n  let names: LocatedDrugNameInterface = {\r\n    locatedDrugName\r\n\r\n  };\r\n  let quantities: LocatedDrugQtyInterface = {\r\n    locatedDrugQty\r\n  };\r\n\r\n  let strengths: LocatedDrugStrengthInterface = {\r\n    locatedDrugStrength\r\n  };\r\n  let locatedDrugStrength: GetLocatedDrugStrengthInterface[];\r\n\r\n  let locatedDrugQty: GetLocatedDrugQtyInterface[];\r\n\r\n  let locatedDrugForm: GetLocatedDrugFormInterface[];\r\n\r\n  let couponData: CouponStructureInterface = {\r\n    drugs,\r\n    forms,\r\n    names,\r\n    quantities,\r\n    strengths\r\n\r\n  }\r\n  const [coupons, setCoupons] = useState<CouponStructureInterface>(couponData);\r\n \r\n  const [ valuesForFilter,setValuesForFilter ] = useState({\r\n    form:\"\",\r\n    dosage:\"\",\r\n    quantity:\"\"                 \r\n});\r\n  \r\n let  filterValues = {form:\"\",\r\n dosage:\"\",\r\n quantity:\"\"  }\r\n  const setValuesForFilterCoupons = (value:any) =>{\r\n         \r\n    setValuesForFilter(Object.assign(valuesForFilter ,value));\r\n        //setValuesForFilter(Object.assign(valuesForFilter,value));\r\n      \r\n        //fileterCoupons();\r\n                \r\n  }\r\n  const fileterCoupons =()=>{\r\n\r\n    //coupons.drugs.locatedDrug = allTheData.drugs.locatedDrug.filter((e:LocatedDrugInterface) => e.drug.quantity._text === valuesForFilter.quantity);\r\n    setCoupons(JSON.parse(JSON.stringify(coupons)));\r\n            \r\n  }\r\n\r\n\r\n  /**\r\n   * returns to the location pages \r\n   * \r\n   */\r\n  const returnToLocation = () => {\r\n    // router.push\r\n    //   (\r\n    //     {\r\n    //       pathname: '/src/components/Home',\r\n    //       query: {\r\n    //         component: 'location',\r\n    //         prescriptions: prescriptionFromRoute,\r\n    //         location: location,\r\n    //         language: language\r\n    //       },\r\n    //     })\r\n\r\n  }\r\n  let arr = [];\r\n\r\n  /**\r\n   * helper function for development \r\n   * filles the coupons\r\n   * \r\n   * @component CouponTiles \r\n   */\r\n  const fillCoupon = () => {\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      arr.push(\r\n        <CouponsTiles language={language} prescription={prescriptionFromRoute} couponsData={prescriptionFromRoute} />);\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Call to the service Prescription to retreve the prescriptionsfordatalist available\r\n   * @useState  setPrescriptionDetailsForPrescriptionDetailComponent\r\n   * @param setPrescriptionDetails // passed in from the function\r\n   * @useState\r\n   *  \r\n   */\r\n  // \r\n  \r\n  fillCoupon();\r\n  // Object.keys(coupons).length <= 0 && getCoupons({ variables: { prescription: prescriptionFromRoute.search_name, latitude: location.latitude, longitude: location.longitude }, context: { clientName: 'coupon' } })\r\n  //allTheData === undefined && getCoupons({ variables: { prescription: prescriptionFromRoute.search_name, latitude: location.latitude, longitude: location.longitude }, context: { clientName: 'coupon' } })\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      {/**\r\n         * refrencing version of: 1/28/2021\r\n         * source: https://github.com/emilynorton?tab=repositories\r\n         */}\r\n\r\n      {(language === 'english' || language === undefined) && <> <h3><span>Step 3 of 3: </span>Choose Your Coupon</h3></>}\r\n      {language === 'spanish' && <><h3><span>{'<Spanish>'} Step 3 of 3: </span>Choose Your Coupon</h3></>}\r\n      <div className='location cursor'>\r\n        {(language === 'english' || language === undefined) &&\r\n          <>\r\n            Location: {location.myLocation} <Link to={{\r\n                      pathname: '/src/components/Home',\r\n            query:{\r\n            component: 'location',\r\n            prescriptions: prescriptionFromRoute,\r\n            location: location,\r\n            language: language}\r\n          }}>Clear</Link>\r\n          </>\r\n\r\n        }\r\n        {language === 'spanish' &&\r\n          <>\r\n            {'<Spanish>'}Location: {location} <u onClick={returnToLocation}>Clear</u>\r\n          </>\r\n        }\r\n      </div>\r\n       {coupons['drugs'].locatedDrug.length > 0 && <PrescriptionDetailedForm language={language} \r\n                                disabled={false}\r\n                                coupons={coupons}                               \r\n                                prescriptionName={prescriptionFromRoute}\r\n                                filterCoupons={fileterCoupons}\r\n                                setValuesForFilterCoupons={setValuesForFilterCoupons} /> }\r\n      <div className=\"list_info\">\r\n        <p><span>Sorted by: </span>Price</p>\r\n        <p><span>Number of Results: </span>3</p>\r\n        <p className=\"radius\"><span>Radius: </span>15 miles</p>\r\n      </div>\r\n      <div>        \r\n        {coupons['drugs'].locatedDrug.map(element =>{  \r\n            if(element.drug.quantity._text === valuesForFilter.quantity)              \r\n                return <CouponsTiles language={language} prescription={prescriptionFromRoute} couponsData={element} />})}\r\n      </div>\r\n\r\n\r\n      \r\n        \r\n        {/* used in version 1 with wire frames\r\n        // version 1 from wire frames\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=25%3A1&viewport=520%2C440%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=102%3A1390&viewport=212%2C389%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=349%3A797&viewport=317%2C508%2C0.5&scaling=scale-down \r\n\r\n        \r\n        <span className={styles.desktop_main_left_find_prescription_home_title} >\r\n        {(language === 'english' ||  language === undefined) && 'Step 3: Choose Your Coupon'}\r\n        {language === 'spanish' &&  '<Spanish>Step 3: Choose Your Coupon'} \r\n          \r\n          \r\n          \r\n        </span>\r\n        <div className={styles.desktop_main_left_location_caption}>\r\n        {(language === 'english' ||  language === undefined) && \r\n        <>\r\n          In { location } <u onClick={returnToLocation}>Change Location</u> \r\n        </>\r\n        \r\n        }\r\n        {language === 'spanish' &&  \r\n        <>\r\n         {'<Spanish>'}  In { location } <u onClick={returnToLocation}>Change Location</u> \r\n        </>        \r\n        }\r\n        </div>\r\n        <PrescriptionDetailedForm language={language} disabled={true}  prescriptionFromRoute={prescriptionFromRoute}   />\r\n        <br />\r\n        <div className={styles.desktop_choose_your_coupon_sort}>\r\n        {(language === 'english' ||  language === undefined) && 'Sorted by: Price'}\r\n        {language === 'spanish' &&  'Sorted by: Price'}          \r\n        </div>\r\n        <div className={styles.desktop_choose_your_coupon_list_container}>\r\n            {arr}\r\n                \r\n        </div>\r\n\r\n    </div> */}\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default ChooseYourCoupon;"]},"metadata":{},"sourceType":"module"}