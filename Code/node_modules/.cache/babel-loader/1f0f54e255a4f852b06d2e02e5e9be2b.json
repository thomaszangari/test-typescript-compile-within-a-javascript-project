{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _temp;\n\nimport React from \"react\";\nimport { action, observable } from \"mobx\";\nimport config from \"../config\";\nimport moment from \"moment\";\nimport { timeOfDayFormat } from \"../constants.js\";\nexport let ClaimStore = (_class = (_temp = class ClaimStore {\n  constructor(rootStore) {\n    this.rootStore = null;\n    this.authStore = null;\n\n    _initializerDefineProperty(this, \"isLoading\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"reconDate\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"reconTableRows\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"reconTableHeader\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"ESAValidations\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"mobileClaims\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"playerPayments\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"taxes\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"ACHTotal\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"returnedPayments\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"ACHRetries\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"paperCheckRetries\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"startDate\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"endDate\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"rejectFileReference\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"batchNumber\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"tableRows\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"tableHeader\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"showToast\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"successMessage\", _descriptor20, this);\n\n    _initializerDefineProperty(this, \"errorMessage\", _descriptor21, this);\n\n    _initializerDefineProperty(this, \"selectedBatchId\", _descriptor22, this);\n\n    _initializerDefineProperty(this, \"selectedBatchData\", _descriptor23, this);\n\n    _initializerDefineProperty(this, \"selectedRejectData\", _descriptor24, this);\n\n    _initializerDefineProperty(this, \"selectedRejectReferenceNumber\", _descriptor25, this);\n\n    _initializerDefineProperty(this, \"selectedRejectId\", _descriptor26, this);\n\n    _initializerDefineProperty(this, \"batchDetails\", _descriptor27, this);\n\n    _initializerDefineProperty(this, \"rejectFileDetails\", _descriptor28, this);\n\n    _initializerDefineProperty(this, \"rejectedClaimsDetails\", _descriptor29, this);\n\n    this.setRejectedClaimData = (tableHeader, data, isClaimCheck) => {\n      const tableRows = [];\n\n      if (data && data.length > 0) {\n        data.forEach(row => {\n          if (row && row.claim && row.transactions) {\n            const {\n              referenceNumber,\n              prizeAmountInCents,\n              playerFirstName,\n              playerLastName,\n              activeFrom\n            } = row.claim;\n            const date = activeFrom ? moment(activeFrom).format('MM-DD-YYYY') : '-';\n            const time = activeFrom ? moment(activeFrom).format(timeOfDayFormat) : '-';\n            const playerName = `${playerFirstName} ${playerLastName}`;\n            const amount = prizeAmountInCents ? prizeAmountInCents / 100 : 0;\n\n            if (!isClaimCheck && row.transactions.length === 1) {\n              tableRows.push({\n                date: date,\n                time: time,\n                player: playerName,\n                referenceNumber: referenceNumber,\n                amount: amount\n              });\n            } else if (isClaimCheck && row.transactions.length > 1) {\n              tableRows.push({\n                date: date,\n                time: time,\n                player: playerName,\n                referenceNumber: referenceNumber,\n                amount: amount\n              });\n            }\n          }\n        });\n      }\n\n      this.rejectedClaimsDetails = {\n        tableHeader,\n        tableRows\n      };\n    };\n\n    this.rootStore = rootStore;\n    this.authStore = this.rootStore.authStore;\n  }\n\n  resetToast() {\n    this.showToast = false;\n    this.errorMessage = null;\n    this.successMessage = null;\n  }\n\n  setReconData(data) {\n    //debugger;\n    const tableHeader = [{\n      key: 'reportType',\n      label: 'Report'\n    }, {\n      key: 'batchReference',\n      label: 'Batch Ref.'\n    }, {\n      key: 'recordCount',\n      label: 'Record Count'\n    }, {\n      key: 'amount',\n      label: 'Total Amount'\n    }, {\n      key: 'timestamp',\n      label: 'Date'\n    }];\n    const lightTableHeader = ['Report', 'Batch Ref.', 'Record Count', 'Total Amount', 'Date'];\n    let lightTableData = [];\n    let playerPaymentsVal = 0;\n    let taxesVal = 0;\n    let ACHTotalVal = 0;\n    let returnedPaymentsVal = 0;\n    let ACHRetriesVal = 0;\n    let paperCheckRetriesVal = 0;\n\n    for (let i = 0; i < data.itemizedReports.length; i++) {\n      let tempItemizedAmount = `$` + `${data.itemizedReports[i].amount}`.padStart(3, '0');\n      tempItemizedAmount = [tempItemizedAmount.slice(0, tempItemizedAmount.length - 2), '.', tempItemizedAmount.slice(tempItemizedAmount.length - 2)].join('');\n      let formattedTime = moment(data.itemizedReports[i].timestamp).format('MM/DD/YYYY hh:mm:ss a'); //let tempReport = <a href={'google.com'}>{data.itemizedReports[i].reportType}</a>;\n\n      switch (data.itemizedReports[i].reportType) {\n        case 'Player Payments by ACH':\n          playerPaymentsVal += data.itemizedReports[i].amount;\n          break;\n\n        case 'Taxes to DOR by ACH':\n          taxesVal += data.itemizedReports[i].amount;\n          break;\n\n        case 'Returned ACH Payments':\n          returnedPaymentsVal += parseInt(data.itemizedReports[i].amount, 10);\n          break;\n\n        case 'Payment Retries by ACH':\n          ACHRetriesVal += data.itemizedReports[i].amount;\n          break;\n\n        case 'Payment Retries by Paper Check':\n          paperCheckRetriesVal += data.itemizedReports[i].amount;\n          break;\n      }\n\n      lightTableData.unshift({\n        id: `${i + 1}`,\n        items: [data.itemizedReports[i].reportType, data.itemizedReports[i].batchReference, `${data.itemizedReports[i].recordCount}`, tempItemizedAmount, formattedTime],\n        label: data.itemizedReports[i].reportType\n      });\n    }\n\n    ACHTotalVal = playerPaymentsVal + taxesVal;\n    /*\r\n    this.reconTableHeader = tableHeader;\r\n    this.reconTableRows = data.itemizedReports;\r\n    */\n\n    this.reconTableHeader = lightTableHeader;\n    this.reconTableRows = lightTableData; //@observable ESAValidations = '$0.00';\n    //@observable mobileClaims = '$0.00';\n    //pad the amount values with 0's if it's under 3 characters, then add the '.' character and '$' character for the currency string\n\n    let tempESA = `$` + `${data.ESAValidation}`.padStart(3, '0');\n    this.ESAValidations = [tempESA.slice(0, tempESA.length - 2), '.', tempESA.slice(tempESA.length - 2)].join('');\n    let tempMobile = `$` + `${data.RTCMobileClaims}`.padStart(3, '0');\n    this.mobileClaims = [tempMobile.slice(0, tempMobile.length - 2), '.', tempMobile.slice(tempMobile.length - 2)].join('');\n    let tempPlayerPayments = `$` + `${playerPaymentsVal}`.padStart(3, '0');\n    this.playerPayments = [tempPlayerPayments.slice(0, tempPlayerPayments.length - 2), '.', tempPlayerPayments.slice(tempPlayerPayments.length - 2)].join('');\n    let tempTaxes = `$` + `${taxesVal}`.padStart(3, '0');\n    this.taxes = [tempTaxes.slice(0, tempTaxes.length - 2), '.', tempTaxes.slice(tempTaxes.length - 2)].join('');\n    let tempACHTotal = `$` + `${ACHTotalVal}`.padStart(3, '0');\n    this.ACHTotal = [tempACHTotal.slice(0, tempACHTotal.length - 2), '.', tempACHTotal.slice(tempACHTotal.length - 2)].join('');\n    let tempReturnedPayments = `$` + `${returnedPaymentsVal}`.padStart(3, '0');\n    this.returnedPayments = [tempReturnedPayments.slice(0, tempReturnedPayments.length - 2), '.', tempReturnedPayments.slice(tempReturnedPayments.length - 2)].join('');\n    let tempACHRetries = `$` + `${ACHRetriesVal}`.padStart(3, '0');\n    this.ACHRetries = [tempACHRetries.slice(0, tempACHRetries.length - 2), '.', tempACHRetries.slice(tempACHRetries.length - 2)].join('');\n    let tempPaperCheckRetries = `$` + `${paperCheckRetriesVal}`.padStart(3, '0');\n    this.paperCheckRetries = [tempPaperCheckRetries.slice(0, tempPaperCheckRetries.length - 2), '.', tempPaperCheckRetries.slice(tempPaperCheckRetries.length - 2)].join('');\n  }\n  /*\r\n  @observable ACHTotal = '$0.00';\r\n  @observable returnedPayments = '$0.00';\r\n  @observable ACHRetries = '$0.00';\r\n  @observable paperCheckRetries = '$0.00';\r\n  */\n\n\n  setData(data) {\n    const tableHeader = [{\n      key: 'startDate',\n      label: 'Date Submitted'\n    }, {\n      key: 'endDate',\n      label: 'Date Received'\n    }, {\n      key: 'time',\n      label: 'Time'\n    }, {\n      key: 'batchnumber',\n      label: 'Batch #'\n    }, {\n      key: 'rejectreferencenumber',\n      label: 'Reject Ref #'\n    }, {\n      key: 'totalnumberofrecords',\n      label: 'Number of Records'\n    }, {\n      key: 'amount',\n      label: 'Amount',\n      type: 'currency',\n      classes: 'currency-column'\n    }, {\n      key: 'status',\n      label: 'Status'\n    }, {\n      key: 'sftpresponse',\n      label: 'SFTP Response'\n    }];\n    data.forEach(element => {\n      let startDate = '';\n      let endDate = '';\n\n      if (element.batchnumber) {\n        startDate = moment(element.filesubmissiondatetime).format('MM-DD-YYYY');\n        element.startDate = startDate;\n        element.rejectreferencenumber = '';\n      }\n\n      if (element.rejectreferencenumber) {\n        endDate = moment(element.processtimestamp).format('MM-DD-YYYY');\n        element.endDate = endDate;\n        element.batchnumber = '';\n      }\n\n      const time = moment(element.batchnumber ? element.filesubmissiondatetime : element.processtimestamp).format(timeOfDayFormat);\n      element.time = time;\n      element.amount = element.amount ? element.amount / 100 : 0;\n      element.amount = element.amount.toFixed(2);\n    });\n    this.tableHeader = tableHeader;\n    this.tableRows = data;\n  }\n\n  getAchData(queryParams) {\n    this.isLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/ach/batch/reports${queryParams}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res.error) {\n        this.showToast = true;\n        this.errorMessage = res.error;\n        this.tableRows = [];\n        this.tableHeader = [];\n      } else {\n        if (res && res.hasOwnProperty('data') && res.data.length === 0) {\n          this.showToast = true;\n          this.errorMessage = 'No Files matching the criteria have been found';\n          this.tableRows = [];\n          this.tableHeader = [];\n        } else if (res && res.hasOwnProperty('data') && res.data.length > 0) {\n          this.setData(res.data);\n        }\n      }\n\n      this.isLoading = false;\n    }).catch(error => {\n      this.errorMessage = error.toString();\n      this.isLoading = false;\n    });\n  }\n\n  getReconData(queryParams) {\n    this.isLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/claim/dailyrecon${queryParams}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res.error) {\n        this.showToast = true;\n        this.errorMessage = res.error;\n        this.tableRows = [];\n        this.tableHeader = [];\n      } else {\n        if (res && res.hasOwnProperty('itemizedReports') && res.itemizedReports.length === 0) {\n          this.showToast = true;\n          this.errorMessage = 'No Files matching the criteria have been found';\n          this.tableRows = [];\n          this.tableHeader = [];\n          this.setReconData(res);\n        } else if (res && res.hasOwnProperty('itemizedReports') && res.itemizedReports.length > 0) {\n          this.setReconData(res);\n        }\n      }\n\n      this.isLoading = false;\n    }).catch(error => {\n      this.errorMessage = error.toString();\n      this.isLoading = false;\n    });\n  }\n\n  setToast() {\n    this.errorMessage = null;\n    this.showToast = false;\n  }\n\n  setStartEndDate(_startDate = '', _endDate = '') {\n    if (_startDate !== '') {\n      this.startDate = _startDate;\n    }\n\n    if (_endDate !== '') {\n      this.endDate = _endDate;\n    }\n  }\n\n  setReconDate(_reconDate = '') {\n    if (_reconDate !== '') {\n      this.reconDate = _reconDate;\n    }\n  }\n\n  setBatchNumber(value) {\n    this.batchNumber = value;\n  }\n\n  setRejectFileReference(value) {\n    this.rejectFileReference = value;\n  }\n\n  clearTableData() {\n    this.tableRows = [];\n    this.tableHeader = [];\n    this.batchNumber = '';\n    this.rejectFileReference = '';\n    this.batchNumber = '';\n    this.startDate = null;\n    this.endDate = null;\n  }\n\n  reconSetSelectedBatchId(data) {\n    this.selectedBatchId = data.items[1];\n    this.selectedBatchData = data;\n    this.selectedRejectData = null;\n    this.selectedRejectReferenceNumber = null;\n  }\n\n  reconSetSelectedRejectReferenceNumber(data) {\n    this.selectedRejectReferenceNumber = data.items[1]; //this.selectedRejectId = data.id;\n\n    this.selectedRejectData = data;\n    this.selectedBatchId = null;\n    this.selectedBatchData = null;\n  }\n\n  setSelectedBatchId(data) {\n    this.selectedBatchId = data.batchnumber;\n    this.selectedBatchData = data;\n    this.selectedRejectData = null;\n    this.selectedRejectReferenceNumber = null;\n  }\n\n  setSelectedRejectReferenceNumber(data) {\n    this.selectedRejectReferenceNumber = data.rejectreferencenumber;\n    this.selectedRejectId = data.id;\n    this.selectedRejectData = data;\n    this.selectedBatchId = null;\n    this.selectedBatchData = null;\n  }\n\n  setBatchDetails(data) {\n    if (data) {\n      const batchDetailTableHeader = [{\n        key: 'date',\n        label: 'Date'\n      }, {\n        key: 'time',\n        label: 'Time'\n      }, {\n        key: 'claimid',\n        label: 'Claim ID'\n      }, {\n        key: 'transactionid',\n        label: 'Transaction ID'\n      }, {\n        key: 'netamount',\n        label: 'Net Amount',\n        type: 'currency',\n        classes: 'currency-column'\n      }, {\n        key: 'maksedroutingnumber',\n        label: 'Routing Number'\n      }, {\n        key: 'maskedaccountnumber',\n        label: 'Account Number'\n      }, {\n        key: 'rtcstatus',\n        label: 'Status'\n      }, {\n        key: 'tracenumber',\n        label: 'Trace Number'\n      }, {\n        key: 'tracenumber',\n        label: 'Detail Sequence'\n      }];\n      data.forEach(element => {\n        element.maksedroutingnumber = element.routingnumber ? '**********' : '-';\n        element.maskedaccountnumber = element.accountnumber ? '**********' : '-';\n        element.date = element.timestamp ? moment(element.timestamp).format('MM-DD-YYYY') : '-';\n        element.time = element.timestamp ? moment(element.timestamp).format(timeOfDayFormat) : '-';\n        element.fileCreationDate = element.filecreationdatetime ? moment(element.filecreationdatetime).format('MM-DD-YYYY') : '-';\n        element.fileCreationTime = element.filecreationdatetime ? moment(element.filecreationdatetime).format(timeOfDayFormat) : '-';\n        element.dateSubmitted = element.filesubmissiondatetime ? moment(element.filesubmissiondatetime).format('MM-DD-YYYY') : '-';\n        element.submittedTime = element.filesubmissiondatetime ? moment(element.filesubmissiondatetime).format(timeOfDayFormat) : '-';\n        element.effectiveEntryDate = element.effectiveentrydate ? moment(element.effectiveentrydate).format('MM-DD-YYYY') : '-';\n        element.settlementDate = element.settlementdate ? moment(element.settlementdate).format('MM-DD-YYYY') : '-';\n        element.netamount = element.netamount ? Number(element.netamount) / 100 : 0;\n        element.netamount = element.netamount.toFixed(2);\n      });\n      this.batchDetails = {\n        batchDetailsTableHeader: batchDetailTableHeader,\n        batchDetailsTableRows: data,\n        selectedBatchDetails: this.selectedBatchData\n      };\n    } else {\n      this.batchDetails = {\n        batchDetailsTableHeader: [],\n        batchDetailsTableRows: [],\n        selectedBatchDetails: {}\n      };\n      this.showToast = true;\n    }\n  }\n\n  fetchBatchDetails() {\n    this.isLoading = true;\n    const batchId = this.selectedBatchId;\n\n    if (batchId) {\n      this.isLoading = true;\n      const url = `${config.SERVER_BASE_URL}/v1/ach/batch/${batchId}`;\n      fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(res => {\n        this.isLoading = false;\n\n        if (res && res.error) {\n          this.errorMessage = res.error;\n          this.showToast = true;\n        } else if (res && res.data) {\n          if (res.data.length > 0) {\n            this.setBatchDetails(res.data);\n          } else {\n            this.errorMessage = 'No Results.';\n            this.showToast = true;\n          }\n        }\n      }).catch(error => {\n        this.isLoading = false;\n        this.errorMessage = error.toString();\n      });\n    }\n  }\n\n  setRejectFileDetails(data) {\n    if (data) {\n      const rejectDetailTableHeader = [{\n        key: 'date',\n        label: 'Original Submission Date'\n      }, {\n        key: 'time',\n        label: 'Original Submission Time'\n      }, {\n        key: 'batchnumber',\n        label: 'Original Batch #'\n      }, {\n        key: 'claimid',\n        label: 'Claim ID'\n      }, {\n        key: 'transactionid',\n        label: 'Transaction ID'\n      }, {\n        key: 'netamount',\n        label: 'Net Amount',\n        type: 'currency',\n        classes: 'currency-column'\n      }, {\n        key: 'maksedroutingnumber',\n        label: 'Routing Number'\n      }, {\n        key: 'maskedaccountnumber',\n        label: 'Account Number'\n      }, {\n        key: 'rtcstatus',\n        label: 'Status'\n      }, {\n        key: 'tracenumber',\n        label: 'Trace Number'\n      }, {\n        key: 'tracenumber',\n        label: 'Detail Sequence'\n      }];\n      data.forEach(element => {\n        element.maksedroutingnumber = element.routingnumber ? '**********' : '-';\n        element.maskedaccountnumber = element.accountnumber ? '**********' : '-';\n        element.date = element.timestamp ? moment(element.timestamp).format('MM-DD-YYYY') : '-';\n        element.time = element.timestamp ? moment(element.timestamp).format(timeOfDayFormat) : '-';\n        element.fileCreationDate = element.recievetimestamp ? moment(element.recievetimestamp).format('MM-DD-YYYY') : '-';\n        element.fileCreationTime = element.recievetimestamp ? moment(element.recievetimestamp).format(timeOfDayFormat) : '-';\n        element.fileReceivedDate = element.processtimestamp ? moment(element.processtimestamp).format('MM-DD-YYYY') : '-';\n        element.fileReceivedTime = element.processtimestamp ? moment(element.processtimestamp).format(timeOfDayFormat) : '-';\n        element.effectiveEntryDate = element.effectiveentrydate ? moment(element.effectiveentrydate).format('MM-DD-YYYY') : '-';\n        element.settlementDate = element.settlementdate ? moment(element.settlementdate).format('MM-DD-YYYY') : '-';\n        element.netamount = element.netamount ? Number(element.netamount) / 100 : 0;\n        element.netamount = element.netamount.toFixed(2);\n      });\n      this.rejectFileDetails = {\n        rejectFileTableHeader: rejectDetailTableHeader,\n        rejectFileTableRows: data,\n        selectedRejectFileDetails: this.selectedRejectData\n      };\n    } else {\n      this.rejectFileDetails = {\n        rejectFileTableHeader: [],\n        rejectFileTableRows: [],\n        selectedRejectFileDetails: {}\n      };\n      this.showToast = true;\n    }\n  }\n\n  fetchRejectFileDetails() {\n    this.isLoading = true;\n\n    if (this.selectedRejectReferenceNumber) {\n      this.isLoading = true;\n      const url = `${config.SERVER_BASE_URL}/v1/ach/reject/${this.selectedRejectReferenceNumber}`;\n      fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(res => {\n        this.isLoading = false;\n\n        if (res && res.error) {\n          this.errorMessage = res.error;\n          this.showToast = true;\n        } else if (res && res.data) {\n          if (res.data.length > 0) {\n            this.setRejectFileDetails(res.data);\n          } else {\n            this.errorMessage = 'No Results.';\n            this.showToast = true;\n          }\n        }\n      }).catch(error => {\n        this.isLoading = false;\n        this.errorMessage = error.toString();\n      });\n    }\n  }\n\n  fetchRejectClaims(isClaimCheck = false) {\n    this.isLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/rejectedclaims`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res.error) {\n        this.showToast = true;\n        this.errorMessage = res.error;\n      } else {\n        const tableHeader = [{\n          key: 'date',\n          label: 'Date'\n        }, {\n          key: 'time',\n          label: 'Time'\n        }, {\n          key: 'player',\n          label: 'Player'\n        }, {\n          key: 'referenceNumber',\n          label: 'Claim Ref #'\n        }, {\n          key: 'amount',\n          label: 'Amount',\n          type: 'currency',\n          classes: 'currency-column'\n        }];\n\n        if (res && res.hasOwnProperty('rejectedClaims') && res.rejectedClaims.length === 0) {\n          this.showToast = true;\n          this.errorMessage = 'No Rejected Claims';\n          this.setRejectedClaimData(tableHeader, []);\n        } else if (res && res.hasOwnProperty('rejectedClaims') && res.rejectedClaims.length > 0) {\n          this.setRejectedClaimData(tableHeader, res.rejectedClaims, isClaimCheck);\n        }\n      }\n\n      this.isLoading = false;\n    }).catch(error => {\n      this.errorMessage = error.toString();\n      this.isLoading = false;\n    });\n  }\n\n  resubmitACHPayment(claimReferenceNumber, accountNumber, routingNumber, accountType) {\n    const data = {\n      \"claimReferenceNumber\": claimReferenceNumber,\n      \"newAchAccount\": {\n        \"achAccountNumber\": accountNumber,\n        \"achRoutingNumber\": routingNumber,\n        \"achAccountType\": accountType\n      }\n    };\n    let url = `${config.SERVER_BASE_URL}/v1/ach/payment/resubmit`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.successMessage = res.message;\n        this.errorMessage = null;\n        this.showToast = true;\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showToast = true;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"isLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"reconDate\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"reconTableRows\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"reconTableHeader\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"ESAValidations\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '$0.00';\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"mobileClaims\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '$0.00';\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"playerPayments\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '$0.00';\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"taxes\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '$0.00';\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"ACHTotal\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '$0.00';\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"returnedPayments\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '$0.00';\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"ACHRetries\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '$0.00';\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"paperCheckRetries\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '$0.00';\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"startDate\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"endDate\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"rejectFileReference\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"batchNumber\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"tableRows\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"tableHeader\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"showToast\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"successMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, \"errorMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, \"selectedBatchId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, \"selectedBatchData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor24 = _applyDecoratedDescriptor(_class.prototype, \"selectedRejectData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor25 = _applyDecoratedDescriptor(_class.prototype, \"selectedRejectReferenceNumber\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor26 = _applyDecoratedDescriptor(_class.prototype, \"selectedRejectId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor27 = _applyDecoratedDescriptor(_class.prototype, \"batchDetails\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor28 = _applyDecoratedDescriptor(_class.prototype, \"rejectFileDetails\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor29 = _applyDecoratedDescriptor(_class.prototype, \"rejectedClaimsDetails\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getAchData\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getAchData\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getReconData\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getReconData\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"fetchRejectClaims\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"fetchRejectClaims\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"resubmitACHPayment\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"resubmitACHPayment\"), _class.prototype)), _class);","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/Capstone/lottery/mslc-backoffice-client/v1/Code/src/store/ClaimStore.js"],"names":["React","action","observable","config","moment","timeOfDayFormat","ClaimStore","constructor","rootStore","authStore","setRejectedClaimData","tableHeader","data","isClaimCheck","tableRows","length","forEach","row","claim","transactions","referenceNumber","prizeAmountInCents","playerFirstName","playerLastName","activeFrom","date","format","time","playerName","amount","push","player","rejectedClaimsDetails","resetToast","showToast","errorMessage","successMessage","setReconData","key","label","lightTableHeader","lightTableData","playerPaymentsVal","taxesVal","ACHTotalVal","returnedPaymentsVal","ACHRetriesVal","paperCheckRetriesVal","i","itemizedReports","tempItemizedAmount","padStart","slice","join","formattedTime","timestamp","reportType","parseInt","unshift","id","items","batchReference","recordCount","reconTableHeader","reconTableRows","tempESA","ESAValidation","ESAValidations","tempMobile","RTCMobileClaims","mobileClaims","tempPlayerPayments","playerPayments","tempTaxes","taxes","tempACHTotal","ACHTotal","tempReturnedPayments","returnedPayments","tempACHRetries","ACHRetries","tempPaperCheckRetries","paperCheckRetries","setData","type","classes","element","startDate","endDate","batchnumber","filesubmissiondatetime","rejectreferencenumber","processtimestamp","toFixed","getAchData","queryParams","isLoading","fetch","SERVER_BASE_URL","method","headers","localStorage","getItem","then","response","json","res","error","hasOwnProperty","catch","toString","getReconData","setToast","setStartEndDate","_startDate","_endDate","setReconDate","_reconDate","reconDate","setBatchNumber","value","batchNumber","setRejectFileReference","rejectFileReference","clearTableData","reconSetSelectedBatchId","selectedBatchId","selectedBatchData","selectedRejectData","selectedRejectReferenceNumber","reconSetSelectedRejectReferenceNumber","setSelectedBatchId","setSelectedRejectReferenceNumber","selectedRejectId","setBatchDetails","batchDetailTableHeader","maksedroutingnumber","routingnumber","maskedaccountnumber","accountnumber","fileCreationDate","filecreationdatetime","fileCreationTime","dateSubmitted","submittedTime","effectiveEntryDate","effectiveentrydate","settlementDate","settlementdate","netamount","Number","batchDetails","batchDetailsTableHeader","batchDetailsTableRows","selectedBatchDetails","fetchBatchDetails","batchId","url","setRejectFileDetails","rejectDetailTableHeader","recievetimestamp","fileReceivedDate","fileReceivedTime","rejectFileDetails","rejectFileTableHeader","rejectFileTableRows","selectedRejectFileDetails","fetchRejectFileDetails","fetchRejectClaims","rejectedClaims","resubmitACHPayment","claimReferenceNumber","accountNumber","routingNumber","accountType","body","JSON","stringify","message"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {action, observable} from \"mobx\";\r\nimport config from \"../config\";\r\nimport moment from \"moment\";\r\nimport {timeOfDayFormat} from \"../constants.js\";\r\nexport class ClaimStore {\r\n\r\n    rootStore = null;\r\n    authStore = null;\r\n\r\n    @observable isLoading = false;\r\n\r\n    @observable reconDate = null;\r\n    @observable reconTableRows = [];\r\n    @observable reconTableHeader = [];\r\n    @observable ESAValidations = '$0.00';\r\n    @observable mobileClaims = '$0.00';\r\n    @observable playerPayments = '$0.00';\r\n    @observable taxes = '$0.00';\r\n    @observable ACHTotal = '$0.00';\r\n    @observable returnedPayments = '$0.00';\r\n    @observable ACHRetries = '$0.00';\r\n    @observable paperCheckRetries = '$0.00';\r\n\r\n\r\n    @observable startDate = null;\r\n    @observable endDate = null;\r\n    @observable rejectFileReference = '';\r\n    @observable batchNumber = '';\r\n\r\n    @observable tableRows = [];\r\n    @observable tableHeader = [];\r\n    @observable showToast = false;\r\n    @observable successMessage = null;\r\n    @observable errorMessage = null;\r\n    @observable selectedBatchId = null;\r\n    @observable selectedBatchData = null;\r\n    @observable selectedRejectData = null;\r\n    @observable selectedRejectReferenceNumber = null;\r\n    @observable selectedRejectId = null;\r\n    @observable batchDetails = null;\r\n    @observable rejectFileDetails = null;\r\n    @observable rejectedClaimsDetails = null;\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.authStore = this.rootStore.authStore;\r\n    }\r\n\r\n    resetToast() {\r\n        this.showToast = false;\r\n        this.errorMessage = null;\r\n        this.successMessage = null;\r\n    }\r\n\r\n    setReconData(data) {\r\n        //debugger;\r\n        \r\n        const tableHeader = [\r\n            {key: 'reportType', label: 'Report'},\r\n            {key: 'batchReference', label: 'Batch Ref.'},\r\n            {key: 'recordCount', label: 'Record Count'},\r\n            {key: 'amount', label: 'Total Amount'},\r\n            {key: 'timestamp', label: 'Date'},\r\n        ];\r\n\r\n        const lightTableHeader = ['Report', 'Batch Ref.', 'Record Count', 'Total Amount', 'Date'];\r\n        let lightTableData = [];\r\n\r\n        let playerPaymentsVal = 0;\r\n        let taxesVal = 0;\r\n        let ACHTotalVal = 0;\r\n        let returnedPaymentsVal = 0;\r\n        let ACHRetriesVal = 0;\r\n        let paperCheckRetriesVal = 0;\r\n\r\n        for(let i = 0; i < data.itemizedReports.length; i++){\r\n\r\n            let tempItemizedAmount = `$` + `${data.itemizedReports[i].amount}`.padStart(3, '0');\r\n            tempItemizedAmount = [tempItemizedAmount.slice(0, tempItemizedAmount.length - 2), '.', tempItemizedAmount.slice(tempItemizedAmount.length - 2)].join('');\r\n\r\n            let formattedTime = moment(data.itemizedReports[i].timestamp).format('MM/DD/YYYY hh:mm:ss a');\r\n            //let tempReport = <a href={'google.com'}>{data.itemizedReports[i].reportType}</a>;\r\n            switch(data.itemizedReports[i].reportType){\r\n                case 'Player Payments by ACH':\r\n                    playerPaymentsVal += data.itemizedReports[i].amount;\r\n                    break;\r\n                case 'Taxes to DOR by ACH':\r\n                    taxesVal += data.itemizedReports[i].amount;\r\n                    break;\r\n                case 'Returned ACH Payments':\r\n                    returnedPaymentsVal += parseInt(data.itemizedReports[i].amount, 10);\r\n                    break;\r\n                case 'Payment Retries by ACH':\r\n                    ACHRetriesVal += data.itemizedReports[i].amount;\r\n                    break;\r\n                case 'Payment Retries by Paper Check':\r\n                    paperCheckRetriesVal += data.itemizedReports[i].amount;\r\n                    break;\r\n            }\r\n\r\n            lightTableData.unshift({\r\n                id: `${i + 1}`,\r\n                items: [data.itemizedReports[i].reportType, data.itemizedReports[i].batchReference, `${data.itemizedReports[i].recordCount}`, tempItemizedAmount, formattedTime],\r\n                label: data.itemizedReports[i].reportType,\r\n            });\r\n        }\r\n\r\n        ACHTotalVal = playerPaymentsVal + taxesVal;\r\n\r\n        /*\r\n        this.reconTableHeader = tableHeader;\r\n        this.reconTableRows = data.itemizedReports;\r\n        */\r\n\r\n        this.reconTableHeader = lightTableHeader;\r\n        this.reconTableRows = lightTableData;\r\n\r\n        //@observable ESAValidations = '$0.00';\r\n        //@observable mobileClaims = '$0.00';\r\n\r\n        //pad the amount values with 0's if it's under 3 characters, then add the '.' character and '$' character for the currency string\r\n        let tempESA = `$` + `${data.ESAValidation}`.padStart(3, '0');\r\n        this.ESAValidations = [tempESA.slice(0, tempESA.length - 2), '.', tempESA.slice(tempESA.length - 2)].join('');\r\n\r\n        let tempMobile = `$` + `${data.RTCMobileClaims}`.padStart(3, '0');\r\n        this.mobileClaims = [tempMobile.slice(0, tempMobile.length - 2), '.', tempMobile.slice(tempMobile.length - 2)].join('');\r\n\r\n        let tempPlayerPayments = `$` + `${playerPaymentsVal}`.padStart(3, '0');\r\n        this.playerPayments = [tempPlayerPayments.slice(0, tempPlayerPayments.length - 2), '.', tempPlayerPayments.slice(tempPlayerPayments.length - 2)].join('');\r\n\r\n        let tempTaxes = `$` + `${taxesVal}`.padStart(3, '0');\r\n        this.taxes = [tempTaxes.slice(0, tempTaxes.length - 2), '.', tempTaxes.slice(tempTaxes.length - 2)].join('');\r\n\r\n        let tempACHTotal = `$` + `${ACHTotalVal}`.padStart(3, '0');\r\n        this.ACHTotal = [tempACHTotal.slice(0, tempACHTotal.length - 2), '.', tempACHTotal.slice(tempACHTotal.length - 2)].join('');\r\n\r\n        let tempReturnedPayments = `$` + `${returnedPaymentsVal}`.padStart(3, '0');\r\n        this.returnedPayments = [tempReturnedPayments.slice(0, tempReturnedPayments.length - 2), '.', tempReturnedPayments.slice(tempReturnedPayments.length - 2)].join('');\r\n \r\n        let tempACHRetries = `$` + `${ACHRetriesVal}`.padStart(3, '0');\r\n        this.ACHRetries = [tempACHRetries.slice(0, tempACHRetries.length - 2), '.', tempACHRetries.slice(tempACHRetries.length - 2)].join('');\r\n\r\n        let tempPaperCheckRetries = `$` + `${paperCheckRetriesVal}`.padStart(3, '0');\r\n        this.paperCheckRetries = [tempPaperCheckRetries.slice(0, tempPaperCheckRetries.length - 2), '.', tempPaperCheckRetries.slice(tempPaperCheckRetries.length - 2)].join('');\r\n    }   \r\n\r\n    /*\r\n    @observable ACHTotal = '$0.00';\r\n    @observable returnedPayments = '$0.00';\r\n    @observable ACHRetries = '$0.00';\r\n    @observable paperCheckRetries = '$0.00';\r\n    */\r\n\r\n    setData(data) {\r\n        const tableHeader = [\r\n            {key: 'startDate', label: 'Date Submitted'},\r\n            {key: 'endDate', label: 'Date Received'},\r\n            {key: 'time', label: 'Time'},\r\n            {key: 'batchnumber', label: 'Batch #'},\r\n            {key: 'rejectreferencenumber', label: 'Reject Ref #'},\r\n            {key: 'totalnumberofrecords', label: 'Number of Records'},\r\n            {key: 'amount', label: 'Amount', type: 'currency', classes: 'currency-column'},\r\n            {key: 'status', label: 'Status'},\r\n            {key: 'sftpresponse', label: 'SFTP Response'},\r\n        ];\r\n        data.forEach(element => {\r\n            let startDate = '';\r\n            let endDate = '';\r\n\r\n\r\n            if (element.batchnumber) {\r\n                startDate = moment(element.filesubmissiondatetime).format('MM-DD-YYYY');\r\n                element.startDate = startDate;\r\n                element.rejectreferencenumber = '';\r\n            }\r\n\r\n            if (element.rejectreferencenumber) {\r\n                endDate = moment(element.processtimestamp).format('MM-DD-YYYY');\r\n                element.endDate = endDate;\r\n                element.batchnumber = '';\r\n            }\r\n\r\n            const time = moment(element.batchnumber ? element.filesubmissiondatetime : element.processtimestamp).format(timeOfDayFormat);\r\n\r\n            element.time = time;\r\n            element.amount = element.amount ? (element.amount / 100) : 0;\r\n            element.amount = element.amount.toFixed(2);\r\n        });\r\n        this.tableHeader = tableHeader;\r\n        this.tableRows = data;\r\n    }\r\n\r\n    @action getAchData(queryParams) {\r\n        this.isLoading = true;\r\n\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/ach/batch/reports${queryParams}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res.error) {\r\n                    this.showToast = true;\r\n                    this.errorMessage = res.error;\r\n                    this.tableRows = [];\r\n                    this.tableHeader = [];\r\n                } else {\r\n                    if (res && res.hasOwnProperty('data') && res.data.length === 0) {\r\n                        this.showToast = true;\r\n                        this.errorMessage = 'No Files matching the criteria have been found';\r\n                        this.tableRows = [];\r\n                        this.tableHeader = [];\r\n                    } else if (res && res.hasOwnProperty('data') && res.data.length > 0) {\r\n                        this.setData(res.data)\r\n                    }\r\n                }\r\n                this.isLoading = false;\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    @action getReconData(queryParams) {\r\n        this.isLoading = true;\r\n\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/claim/dailyrecon${queryParams}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res.error) {\r\n                    this.showToast = true;\r\n                    this.errorMessage = res.error;\r\n                    this.tableRows = [];\r\n                    this.tableHeader = [];\r\n                } else {\r\n                    if (res && res.hasOwnProperty('itemizedReports') && res.itemizedReports.length === 0) {\r\n                        this.showToast = true;\r\n                        this.errorMessage = 'No Files matching the criteria have been found';\r\n                        this.tableRows = [];\r\n                        this.tableHeader = [];\r\n                        this.setReconData(res);\r\n                    } else if (res && res.hasOwnProperty('itemizedReports') && res.itemizedReports.length > 0) {\r\n                        this.setReconData(res)\r\n                    }\r\n                }\r\n                this.isLoading = false;\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    setToast() {\r\n        this.errorMessage = null;\r\n        this.showToast = false;\r\n    }\r\n\r\n    setStartEndDate(_startDate = '', _endDate = '') {\r\n        if (_startDate !== '') {\r\n            this.startDate = _startDate;\r\n        }\r\n        if (_endDate !== '') {\r\n            this.endDate = _endDate;\r\n        }\r\n    }\r\n\r\n    setReconDate(_reconDate = '') {\r\n        if (_reconDate !== '') {\r\n            this.reconDate = _reconDate;\r\n        }\r\n    }\r\n\r\n    setBatchNumber(value) {\r\n        this.batchNumber = value;\r\n    }\r\n\r\n    setRejectFileReference(value) {\r\n        this.rejectFileReference = value;\r\n    }\r\n\r\n    clearTableData() {\r\n        this.tableRows = [];\r\n        this.tableHeader = [];\r\n        this.batchNumber = '';\r\n        this.rejectFileReference = '';\r\n        this.batchNumber = '';\r\n        this.startDate = null;\r\n        this.endDate = null;\r\n    }\r\n\r\n    reconSetSelectedBatchId(data) {\r\n        this.selectedBatchId = data.items[1];\r\n        this.selectedBatchData = data;\r\n        this.selectedRejectData = null;\r\n        this.selectedRejectReferenceNumber = null;\r\n    }\r\n\r\n    reconSetSelectedRejectReferenceNumber(data) {\r\n        this.selectedRejectReferenceNumber = data.items[1];\r\n        //this.selectedRejectId = data.id;\r\n        this.selectedRejectData = data;\r\n        this.selectedBatchId = null;\r\n        this.selectedBatchData = null;\r\n    }\r\n\r\n    setSelectedBatchId(data) {\r\n        this.selectedBatchId = data.batchnumber;\r\n        this.selectedBatchData = data;\r\n        this.selectedRejectData = null;\r\n        this.selectedRejectReferenceNumber = null;\r\n    }\r\n\r\n    setSelectedRejectReferenceNumber(data) {\r\n        this.selectedRejectReferenceNumber = data.rejectreferencenumber;\r\n        this.selectedRejectId = data.id;\r\n        this.selectedRejectData = data;\r\n        this.selectedBatchId = null;\r\n        this.selectedBatchData = null;\r\n    }\r\n\r\n    setBatchDetails(data) {\r\n        if (data) {\r\n\r\n            const batchDetailTableHeader = [\r\n                {key: 'date', label: 'Date'},\r\n                {key: 'time', label: 'Time'},\r\n                {key: 'claimid', label: 'Claim ID'},\r\n                {key: 'transactionid', label: 'Transaction ID'},\r\n                {key: 'netamount', label: 'Net Amount', type: 'currency', classes: 'currency-column'},\r\n                {key: 'maksedroutingnumber', label: 'Routing Number'},\r\n                {key: 'maskedaccountnumber', label: 'Account Number'},\r\n                {key: 'rtcstatus', label: 'Status'},\r\n                {key: 'tracenumber', label: 'Trace Number'},\r\n                {key: 'tracenumber', label: 'Detail Sequence'},\r\n            ];\r\n\r\n            data.forEach(element => {\r\n\r\n                element.maksedroutingnumber = element.routingnumber ? '**********' : '-';\r\n                element.maskedaccountnumber = element.accountnumber ? '**********' : '-';\r\n\r\n                element.date = element.timestamp\r\n                    ? moment(element.timestamp).format('MM-DD-YYYY')\r\n                    : '-';\r\n                element.time = element.timestamp\r\n                    ? moment(element.timestamp).format(timeOfDayFormat)\r\n                    : '-';\r\n\r\n                element.fileCreationDate = element.filecreationdatetime\r\n                    ? moment(element.filecreationdatetime).format('MM-DD-YYYY')\r\n                    : '-';\r\n                element.fileCreationTime = element.filecreationdatetime\r\n                    ? moment(element.filecreationdatetime).format(timeOfDayFormat)\r\n                    : '-';\r\n\r\n                element.dateSubmitted = element.filesubmissiondatetime\r\n                    ? moment(element.filesubmissiondatetime).format('MM-DD-YYYY')\r\n                    : '-';\r\n                element.submittedTime = element.filesubmissiondatetime\r\n                    ? moment(element.filesubmissiondatetime).format(timeOfDayFormat)\r\n                    : '-';\r\n\r\n                element.effectiveEntryDate = element.effectiveentrydate\r\n                    ? moment(element.effectiveentrydate).format('MM-DD-YYYY')\r\n                    : '-';\r\n\r\n                element.settlementDate = element.settlementdate\r\n                    ? moment(element.settlementdate).format('MM-DD-YYYY')\r\n                    : '-';\r\n\r\n                element.netamount = element.netamount ? Number(element.netamount) / 100 : 0;\r\n                element.netamount = element.netamount.toFixed(2);\r\n            });\r\n\r\n            this.batchDetails = {\r\n                batchDetailsTableHeader: batchDetailTableHeader,\r\n                batchDetailsTableRows: data,\r\n                selectedBatchDetails: this.selectedBatchData\r\n            };\r\n\r\n        } else {\r\n            this.batchDetails = {\r\n                batchDetailsTableHeader: [],\r\n                batchDetailsTableRows: [],\r\n                selectedBatchDetails: {}\r\n            };\r\n            this.showToast = true;\r\n        }\r\n    }\r\n\r\n    fetchBatchDetails() {\r\n        this.isLoading = true;\r\n        const batchId = this.selectedBatchId;\r\n        if (batchId) {\r\n            this.isLoading = true;\r\n            const url = `${config.SERVER_BASE_URL}/v1/ach/batch/${batchId}`;\r\n            fetch(url, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            })\r\n                .then(response => response.json())\r\n                .then(res => {\r\n                    this.isLoading = false;\r\n                    if (res && res.error) {\r\n                        this.errorMessage = res.error\r\n                        this.showToast = true;\r\n                    } else if (res && res.data) {\r\n                        if (res.data.length > 0) {\r\n                            this.setBatchDetails(res.data);\r\n                        } else {\r\n                            this.errorMessage = 'No Results.';\r\n                            this.showToast = true;\r\n                        }\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.isLoading = false;\r\n                    this.errorMessage = error.toString();\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    setRejectFileDetails(data) {\r\n        if (data) {\r\n\r\n            const rejectDetailTableHeader = [\r\n                {key: 'date', label: 'Original Submission Date'},\r\n                {key: 'time', label: 'Original Submission Time'},\r\n                {key: 'batchnumber', label: 'Original Batch #'},\r\n                {key: 'claimid', label: 'Claim ID'},\r\n                {key: 'transactionid', label: 'Transaction ID'},\r\n                {key: 'netamount', label: 'Net Amount', type: 'currency', classes: 'currency-column'},\r\n                {key: 'maksedroutingnumber', label: 'Routing Number'},\r\n                {key: 'maskedaccountnumber', label: 'Account Number'},\r\n                {key: 'rtcstatus', label: 'Status'},\r\n                {key: 'tracenumber', label: 'Trace Number'},\r\n                {key: 'tracenumber', label: 'Detail Sequence'},\r\n            ];\r\n\r\n            data.forEach(element => {\r\n\r\n                element.maksedroutingnumber = element.routingnumber ? '**********' : '-';\r\n                element.maskedaccountnumber = element.accountnumber ? '**********' : '-';\r\n\r\n                element.date = element.timestamp\r\n                    ? moment(element.timestamp).format('MM-DD-YYYY')\r\n                    : '-';\r\n                element.time = element.timestamp\r\n                    ? moment(element.timestamp).format(timeOfDayFormat)\r\n                    : '-';\r\n\r\n                element.fileCreationDate = element.recievetimestamp\r\n                    ? moment(element.recievetimestamp).format('MM-DD-YYYY')\r\n                    : '-';\r\n                element.fileCreationTime = element.recievetimestamp\r\n                    ? moment(element.recievetimestamp).format(timeOfDayFormat)\r\n                    : '-';\r\n\r\n                element.fileReceivedDate = element.processtimestamp\r\n                    ? moment(element.processtimestamp).format('MM-DD-YYYY')\r\n                    : '-';\r\n                element.fileReceivedTime = element.processtimestamp\r\n                    ? moment(element.processtimestamp).format(timeOfDayFormat)\r\n                    : '-';\r\n\r\n                element.effectiveEntryDate = element.effectiveentrydate\r\n                    ? moment(element.effectiveentrydate).format('MM-DD-YYYY')\r\n                    : '-';\r\n\r\n                element.settlementDate = element.settlementdate\r\n                    ? moment(element.settlementdate).format('MM-DD-YYYY')\r\n                    : '-';\r\n\r\n                element.netamount = element.netamount ? Number(element.netamount) / 100 : 0;\r\n                element.netamount = element.netamount.toFixed(2);\r\n            });\r\n\r\n            this.rejectFileDetails = {\r\n                rejectFileTableHeader: rejectDetailTableHeader,\r\n                rejectFileTableRows: data,\r\n                selectedRejectFileDetails: this.selectedRejectData\r\n            };\r\n\r\n        } else {\r\n            this.rejectFileDetails = {\r\n                rejectFileTableHeader: [],\r\n                rejectFileTableRows: [],\r\n                selectedRejectFileDetails: {}\r\n            };\r\n            this.showToast = true;\r\n        }\r\n    }\r\n\r\n    fetchRejectFileDetails() {\r\n        this.isLoading = true;\r\n        if (this.selectedRejectReferenceNumber) {\r\n            this.isLoading = true;\r\n            const url = `${config.SERVER_BASE_URL}/v1/ach/reject/${this.selectedRejectReferenceNumber}`;\r\n            fetch(url, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            })\r\n                .then(response => response.json())\r\n                .then(res => {\r\n                    this.isLoading = false;\r\n                    if (res && res.error) {\r\n                        this.errorMessage = res.error\r\n                        this.showToast = true;\r\n                    } else if (res && res.data) {\r\n                        if (res.data.length > 0) {\r\n                            this.setRejectFileDetails(res.data);\r\n                        } else {\r\n                            this.errorMessage = 'No Results.';\r\n                            this.showToast = true;\r\n                        }\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.isLoading = false;\r\n                    this.errorMessage = error.toString();\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    setRejectedClaimData = (tableHeader, data, isClaimCheck) => {\r\n        const tableRows = [];\r\n        if(data && data.length > 0) {\r\n            data.forEach(row => {\r\n                if(row && row.claim && row.transactions) {\r\n                    const {referenceNumber, prizeAmountInCents, playerFirstName, playerLastName, activeFrom} = row.claim;\r\n                    const date = activeFrom\r\n                        ? moment(activeFrom).format('MM-DD-YYYY')\r\n                        : '-';\r\n                    const time = activeFrom\r\n                        ? moment(activeFrom).format(timeOfDayFormat)\r\n                        : '-';\r\n                    const playerName = `${playerFirstName} ${playerLastName}`;\r\n                    const amount = prizeAmountInCents ? (prizeAmountInCents / 100) : 0;\r\n                    if(!isClaimCheck && row.transactions.length === 1) {\r\n                        tableRows.push({\r\n                            date: date,\r\n                            time: time,\r\n                            player: playerName,\r\n                            referenceNumber: referenceNumber,\r\n                            amount: amount\r\n                        })\r\n                    } else if(isClaimCheck && row.transactions.length > 1) {\r\n                        tableRows.push({\r\n                            date: date,\r\n                            time: time,\r\n                            player: playerName,\r\n                            referenceNumber: referenceNumber,\r\n                            amount: amount\r\n                        })\r\n                    }\r\n\r\n                }\r\n            })\r\n        }\r\n        this.rejectedClaimsDetails = {tableHeader, tableRows};\r\n    }\r\n\r\n    @action fetchRejectClaims(isClaimCheck=false) {\r\n        this.isLoading = true;\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/rejectedclaims`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res.error) {\r\n                    this.showToast = true;\r\n                    this.errorMessage = res.error;\r\n                } else {\r\n                    const tableHeader = [\r\n                        {key: 'date', label: 'Date'},\r\n                        {key: 'time', label: 'Time'},\r\n                        {key: 'player', label: 'Player'},\r\n                        {key: 'referenceNumber', label: 'Claim Ref #'},\r\n                        {key: 'amount', label: 'Amount', type: 'currency', classes: 'currency-column'}\r\n                    ];\r\n                    if (res && res.hasOwnProperty('rejectedClaims') && res.rejectedClaims.length === 0) {\r\n                        this.showToast = true;\r\n                        this.errorMessage = 'No Rejected Claims';\r\n                        this.setRejectedClaimData(tableHeader, [])\r\n                    } else if (res && res.hasOwnProperty('rejectedClaims') && res.rejectedClaims.length > 0) {\r\n                        this.setRejectedClaimData(tableHeader, res.rejectedClaims, isClaimCheck)\r\n                    }\r\n                }\r\n                this.isLoading = false;\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    @action resubmitACHPayment(claimReferenceNumber, accountNumber, routingNumber, accountType) {\r\n\r\n        const data = {\r\n            \"claimReferenceNumber\": claimReferenceNumber,\r\n            \"newAchAccount\": {\r\n                \"achAccountNumber\": accountNumber,\r\n                \"achRoutingNumber\": routingNumber,\r\n                \"achAccountType\": accountType\r\n            }\r\n        };\r\n\r\n        let url = `${config.SERVER_BASE_URL}/v1/ach/payment/resubmit`;\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.message) {\r\n                    this.successMessage = res.message;\r\n                    this.errorMessage = null;\r\n                    this.showToast = true;\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showToast = true;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}