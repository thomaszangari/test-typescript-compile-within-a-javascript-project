{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\ReactExampleCode\\\\test-typescript-compile-within-a-javascript-project\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\ReactExampleCode\\\\test-typescript-compile-within-a-javascript-project\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\ReactExampleCode\\\\test-typescript-compile-within-a-javascript-project\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Link}from'react-router-dom';//import styles from '../../../../../styles/Location.module.scss'; used on version 1\n/**\r\n * @context location\r\n * \r\n * uses \r\n * \r\n * @serviceApi location\r\n *  \r\n * \r\n */ // const GET_LOCATION = gql`\n// mutation GetLocationFromZipOrCity($value:String){\n//       GetLocationFromZipOrCity(value:$value)\n//       {\n//            code\n//            message\n//            results{\n//              geometry{\n//                 location{\n//                   lat\n//                   lng\n//                 }\n//               }\n//            }\n//            predictions\n//            {\n//              description\n//            }\n//       }\n// }\n// `;\n/**\r\n * @Pages\r\n * \r\n * Location page to detect current position or find loation\r\n * uses location service\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language the language to display the data \r\n * @param prescriptionFromRoute the prescription been pased when useRoute is used\r\n * @param location the location passed from the route\r\n */var Location=function Location(_ref){var language=_ref.language,prescriptionFromRoute=_ref.prescriptionFromRoute,location=_ref.location;var locationWithOutComas=\"\";/**@gets @sets the locations array from the mutation */var _useState=useState([]),_useState2=_slicedToArray(_useState,2),locationsFromMutation=_useState2[0],setLocationsFromMutation=_useState2[1];/** @gets @sets the selected location  */var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),getLocation=_useState4[0],setLocation=_useState4[1];/**@gets @sets the reset to clear the location passed in the function*/var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),reset=_useState6[0],setReset=_useState6[1];/** @set @gets windowsWidth  */var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),windowWidth=_useState8[0],setWindowWidth=_useState8[1];/** @sets @gets the value in the input box */var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),valueForInputValue=_useState10[0],setValueForInputValue=_useState10[1];/** for alert message box */ //const alert = useAlert();\nvar getSizes=function getSizes(){setWindowWidth(window.innerWidth);};useEffect(function(){setWindowWidth(window.innerWidth);window.addEventListener(\"resize\",getSizes,false);});/**\r\n   * Get Location Mutation Mutation that calls location service to retreve\r\n   * location info from input box. It supports by city name and zip code \r\n   * \r\n   * @variable event.target.value\r\n   * @context location  for Apollo.Link     \r\n   */ // const [getLocations, { loading: mutationLoading }] = useMutation(GET_LOCATION, {\n//   onError(err) {\n//     console.log(err);\n//     alert(err);\n//   },\n//   update(proxy, result) {\n//     try {\n//       console.log(result);\n//       if (result.data.GetLocationFromZipOrCity.code !== 200) {\n//         alert(result.data.GetLocationFromZipOrCity.message);\n//         return;\n//       }        \n//       if (result.data.GetLocationFromZipOrCity.predictions !== null && result.data.GetLocationFromZipOrCity.predictions !== undefined) {\n//         if(location === undefined && result.data.GetLocationFromZipOrCity.predictions.length === 0)\n//            return;\n//         if (result.data.GetLocationFromZipOrCity.predictions.length === 0) {\n//           alert(\"No Location Retreved\");\n//           return;\n//         }\n//       }\n//       if (result.data.GetLocationFromZipOrCity.results !== null) {\n//         setValueForInputValue(undefined);\n//         const location = result.data.GetLocationFromZipOrCity.results[0].geometry.location;\n//         getAddressFromLatAndLng(location.lat, location.lng);\n//         setLocationsFromMutation(result.data.GetLocationFromZipOrCity.results);\n//         return;\n//       }\n//       setLocationsFromMutation(result.data.GetLocationFromZipOrCity.predictions)\n//     }\n//     catch (e) {\n//       alert(e);\n//     }\n//   }\n// });\n/**\r\n   * Respondes to onChange function from input box\r\n   * set the value and context for the GraphQl call \r\n   * \r\n   * @useState setValueForInputValue\r\n   * @mutation getLocations\r\n   * @event e\r\n   */var searchLocation=function searchLocation(e){setValueForInputValue(e.target.value);setLocationsFromMutation([]);//getLocations({ variables: { value: e.target.value }, context: { clientName: 'location' } });\n};/**\r\n   * Clears and resets the values from the input box \r\n   * \r\n   * @useState setValueForInputValue\r\n   * @useState setReset\r\n   * @useState setLocation\r\n   * @event e \r\n   */var clearInput=function clearInput(e){setValueForInputValue(\"\");setReset(true);setLocation({});setLocationsFromMutation([]);};/**\r\n   * Gets the reverse geocode for address with zip from latitude\r\n   * and longitude \r\n   * \r\n   * @url https://api.bigdatacloud.net/data/reverse-geocode-client\";\r\n   * @useState setLocation\r\n   * @useState setValueForInputValue\r\n   * @param lat latitude\r\n   * @param lng longitude\r\n   * @function handleError\r\n   */var getAddressFromLatAndLng=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(lat,lng){var myLocation,latitude,longitude,query,bigdatacloud_api,myObj,obj,valueMyLocation,handleError;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:latitude=\"latitude=\".concat(lat);longitude=\"&longitude=\".concat(lng);query=latitude+longitude+\"&localityLanguage=en\";bigdatacloud_api=process.env.locationUrl;bigdatacloud_api+=\"?\".concat(query);_context.next=7;return fetch(bigdatacloud_api).catch(function(){console.log(\"error\");});case 7:myObj=_context.sent;if(!myObj.ok){_context.next=18;break;}_context.next=11;return myObj.json();case 11:obj=_context.sent;console.log(obj);myLocation={latitude:lat,longitude:lng,postCode:obj.postcode,city:obj.locality,country:obj.countryName,state:obj.principalSubdivisionCode.split('-')[1]};valueMyLocation=\" \".concat(myLocation.postCode,\", \").concat(myLocation.city,\", \").concat(myLocation.state);myLocation.myLocation=valueMyLocation;setLocation(myLocation);setValueForInputValue(valueMyLocation);case 18:handleError=function handleError(err){console.warn(err);return new Response(JSON.stringify({code:400,message:'Stupid network Error'}));};case 19:case\"end\":return _context.stop();}}},_callee);}));return function getAddressFromLatAndLng(_x,_x2){return _ref2.apply(this,arguments);};}();/**\r\n   * Get's the Current position of the user\r\n   * \r\n   * @api navigator.geolocation\r\n   */var getCurrentPosition=function getCurrentPosition(){navigator.geolocation.getCurrentPosition(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(position){var latitude,longitude;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:latitude=\"\".concat(position.coords.latitude);longitude=\"\".concat(position.coords.longitude);getAddressFromLatAndLng(latitude,longitude);case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3){return _ref3.apply(this,arguments);};}());};/**\r\n   * set the location passed from useRoute \r\n   */useEffect(function(){if(location!==undefined&&location!==''){console.log(location);//getLocations({ variables: { value: location }, context: { clientName: 'location' } });\n}});var createLocationWithOutCommas=function createLocationWithOutCommas(value){if(value===undefined)return;var s=\"\";var array=value.split(',');array.forEach(function(element){s+=element;s+=' ';});return s;};return/*#__PURE__*/React.createElement(\"div\",null,reset&&(location=undefined),(language==='english'||language===undefined)&&/*#__PURE__*/React.createElement(React.Fragment,null,\" \",/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(\"span\",null,\"Step 2 of 3: \"),\"Your Location\")),language==='spanish'&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(\"span\",null,'<Spanish>',\" Step 2 of 3: \"),\"Your Prescription\")),/*#__PURE__*/React.createElement(\"form\",{id:\"location\",className:\"location\"},(language==='english'||language===undefined)&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"find_rx\"},\"Enter Your location\")),language==='spanish'&&/*#__PURE__*/React.createElement(React.Fragment,null,'<Spanish>',/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"find_rx\"},\"Enter Your location\")),Object.keys(getLocation).length!==0&&valueForInputValue!==undefined?/*#__PURE__*/React.createElement(\"div\",{className:\"results\"},valueForInputValue,\" \",/*#__PURE__*/React.createElement(\"u\",{className:\"cursor\",onClick:clearInput},(language==='english'||language===undefined)&&'Clear',language==='spanish'&&'<Spanish>Clear')):/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"input\",{value:valueForInputValue,autoComplete:\"off\",onFocus:function onFocus(e){return clearInput(e);},placeholder:\"Type City or Zip Code\",type:\"text\",list:\"Locations\",onChange:searchLocation,id:\"location\"}),/*#__PURE__*/React.createElement(\"datalist\",{id:\"Locations\",className:\"location-datalist\"},locationsFromMutation.map(function(element,index){return/*#__PURE__*/React.createElement(\"option\",{key:\"\".concat(Math.random().toString(36).substr(16)).concat(new Date().toISOString()).concat(Math.random()*index)},createLocationWithOutCommas(element.description));}))),Object.keys(getLocation).length===0&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{onClick:getCurrentPosition},(language==='english'||language===undefined)&&/*#__PURE__*/React.createElement(React.Fragment,null,\"Or...\",/*#__PURE__*/React.createElement(\"u\",{className:\"cursor\"},\"Detect Location\")),language==='spanish'&&/*#__PURE__*/React.createElement(React.Fragment,null,'<Spanish>',\"Or...\",/*#__PURE__*/React.createElement(\"u\",{className:\"cursor\"},\"Detect Location\")))),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\",form:\"location\"},\"Map My Location\")),/*#__PURE__*/React.createElement(\"p\",{className:\"instructions\"},\"Enter a location close to where you'd like to pick up your prescription.\"),/*#__PURE__*/React.createElement(\"div\",{className:\"clickthrough\"},/*#__PURE__*/React.createElement(Link,{className:\"back cursor\",to:{pathname:'/src/components/Home',query:{component:'prescription',prescriptions:prescriptionFromRoute,location:JSON.stringify(getLocation).trim(),language:language}}},'<<',(language==='english'||language==='undefined')&&\"Step 1\",language==='spanish'&&\"<Spanish>Step 1\",\"`\"),(Object.keys(getLocation).length!==0||location)&&/*#__PURE__*/React.createElement(Link,{className:\"cursor\",to:{pathname:'/src/components/Home',query:{component:'choose-your-coupon',prescriptions:prescriptionFromRoute,location:JSON.stringify(getLocation).trim(),language:language}}},(language==='english'||language===undefined)&&'Next: Step3',language==='spanish'&&'<Spanish>Next: Step3','>>')));};export default Location;","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/ReactExampleCode/test-typescript-compile-within-a-javascript-project/Code/src/pages/src/components/Home/Location/index.tsx"],"names":["React","useEffect","useState","Link","Location","language","prescriptionFromRoute","location","locationWithOutComas","locationsFromMutation","setLocationsFromMutation","getLocation","setLocation","reset","setReset","windowWidth","setWindowWidth","valueForInputValue","setValueForInputValue","getSizes","window","innerWidth","addEventListener","searchLocation","e","target","value","clearInput","getAddressFromLatAndLng","lat","lng","latitude","longitude","query","bigdatacloud_api","process","env","locationUrl","fetch","catch","console","log","myObj","ok","json","obj","myLocation","postCode","postcode","city","locality","country","countryName","state","principalSubdivisionCode","split","valueMyLocation","handleError","err","warn","Response","JSON","stringify","code","message","getCurrentPosition","navigator","geolocation","position","coords","undefined","createLocationWithOutCommas","s","array","forEach","element","Object","keys","length","map","index","Math","random","toString","substr","Date","toISOString","description","pathname","component","prescriptions","trim"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Link } from 'react-router-dom';\r\n//import styles from '../../../../../styles/Location.module.scss'; used on version 1\r\n\r\n\r\n/**\r\n * @context location\r\n * \r\n * uses \r\n * \r\n * @serviceApi location\r\n *  \r\n * \r\n */\r\n// const GET_LOCATION = gql`\r\n// mutation GetLocationFromZipOrCity($value:String){\r\n//       GetLocationFromZipOrCity(value:$value)\r\n//       {\r\n//            code\r\n//            message\r\n//            results{\r\n             \r\n//              geometry{\r\n//                 location{\r\n//                   lat\r\n//                   lng\r\n//                 }\r\n//               }\r\n//            }\r\n//            predictions\r\n//            {\r\n//              description\r\n//            }\r\n//       }\r\n// }\r\n// `;\r\n\r\n/**\r\n * @Pages\r\n * \r\n * Location page to detect current position or find loation\r\n * uses location service\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language the language to display the data \r\n * @param prescriptionFromRoute the prescription been pased when useRoute is used\r\n * @param location the location passed from the route\r\n */\r\n\r\nconst Location = ({ language, prescriptionFromRoute, location }:any) => {\r\n\r\n  let locationWithOutComas = \"\";\r\n\r\n  /**@gets @sets the locations array from the mutation */\r\n  const [locationsFromMutation, setLocationsFromMutation] = useState([]);\r\n\r\n  /** @gets @sets the selected location  */\r\n  const [getLocation, setLocation] = useState({});\r\n\r\n  /**@gets @sets the reset to clear the location passed in the function*/\r\n  const [reset, setReset] = useState(false);\r\n\r\n  /** @set @gets windowsWidth  */\r\n  const [windowWidth, setWindowWidth] = useState(0);\r\n\r\n  /** @sets @gets the value in the input box */\r\n  const [valueForInputValue, setValueForInputValue] = useState(\"\");\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n  /** for alert message box */\r\n  //const alert = useAlert();\r\n\r\n\r\n\r\n  const getSizes = () => {\r\n    setWindowWidth(window.innerWidth);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setWindowWidth(window.innerWidth);\r\n    window.addEventListener(\r\n      \"resize\", getSizes, false);\r\n  });\r\n\r\n  /**\r\n   * Get Location Mutation Mutation that calls location service to retreve\r\n   * location info from input box. It supports by city name and zip code \r\n   * \r\n   * @variable event.target.value\r\n   * @context location  for Apollo.Link     \r\n   */\r\n  // const [getLocations, { loading: mutationLoading }] = useMutation(GET_LOCATION, {\r\n  //   onError(err) {\r\n  //     console.log(err);\r\n  //     alert(err);\r\n\r\n  //   },\r\n  //   update(proxy, result) {\r\n  //     try {\r\n  //       console.log(result);\r\n  //       if (result.data.GetLocationFromZipOrCity.code !== 200) {\r\n  //         alert(result.data.GetLocationFromZipOrCity.message);\r\n  //         return;\r\n  //       }        \r\n  //       if (result.data.GetLocationFromZipOrCity.predictions !== null && result.data.GetLocationFromZipOrCity.predictions !== undefined) {\r\n           \r\n  //         if(location === undefined && result.data.GetLocationFromZipOrCity.predictions.length === 0)\r\n  //            return;\r\n  //         if (result.data.GetLocationFromZipOrCity.predictions.length === 0) {\r\n  //           alert(\"No Location Retreved\");\r\n  //           return;\r\n  //         }\r\n  //       }\r\n  //       if (result.data.GetLocationFromZipOrCity.results !== null) {\r\n        \r\n  //         setValueForInputValue(undefined);\r\n  //         const location = result.data.GetLocationFromZipOrCity.results[0].geometry.location;\r\n  //         getAddressFromLatAndLng(location.lat, location.lng);\r\n  //         setLocationsFromMutation(result.data.GetLocationFromZipOrCity.results);\r\n  //         return;\r\n  //       }\r\n     \r\n  //       setLocationsFromMutation(result.data.GetLocationFromZipOrCity.predictions)\r\n  //     }\r\n  //     catch (e) {\r\n  //       alert(e);\r\n  //     }\r\n  //   }\r\n  // });\r\n\r\n  /**\r\n   * Respondes to onChange function from input box\r\n   * set the value and context for the GraphQl call \r\n   * \r\n   * @useState setValueForInputValue\r\n   * @mutation getLocations\r\n   * @event e\r\n   */\r\n  const searchLocation = (e:any) => {\r\n\r\n    setValueForInputValue(e.target.value);\r\n    setLocationsFromMutation([]);\r\n    //getLocations({ variables: { value: e.target.value }, context: { clientName: 'location' } });\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Clears and resets the values from the input box \r\n   * \r\n   * @useState setValueForInputValue\r\n   * @useState setReset\r\n   * @useState setLocation\r\n   * @event e \r\n   */\r\n  const clearInput = (e:any) => {\r\n    setValueForInputValue(\"\");\r\n    setReset(true);\r\n    setLocation({});\r\n    setLocationsFromMutation([]);\r\n  }\r\n\r\n  /**\r\n   * Gets the reverse geocode for address with zip from latitude\r\n   * and longitude \r\n   * \r\n   * @url https://api.bigdatacloud.net/data/reverse-geocode-client\";\r\n   * @useState setLocation\r\n   * @useState setValueForInputValue\r\n   * @param lat latitude\r\n   * @param lng longitude\r\n   * @function handleError\r\n   */\r\n  const getAddressFromLatAndLng = async (lat:any, lng:any) => {\r\n    let myLocation:any;\r\n    let latitude:any = `latitude=${lat}`;\r\n    let longitude:any = `&longitude=${lng}`;\r\n    let query:any = latitude + longitude + \"&localityLanguage=en\";\r\n    let bigdatacloud_api:any = process.env.locationUrl;\r\n\r\n    bigdatacloud_api += `?${query}`;\r\n    let myObj:any = await fetch(bigdatacloud_api)\r\n      .catch(()=>{console.log(\"error\")});\r\n\r\n    if (myObj.ok) {\r\n      let obj = await myObj.json();\r\n      console.log(obj);\r\n      myLocation = {\r\n        latitude: lat,\r\n        longitude: lng,\r\n        postCode: obj.postcode,\r\n        city: obj.locality,\r\n        country: obj.countryName,\r\n        state: obj.principalSubdivisionCode.split('-')[1],\r\n      };\r\n\r\n      let valueMyLocation = ` ${myLocation.postCode}, ${myLocation.city}, ${myLocation.state}`;\r\n      myLocation.myLocation = valueMyLocation\r\n      setLocation(myLocation);\r\n      setValueForInputValue(valueMyLocation);\r\n    }\r\n    var handleError = function (err:any) {\r\n      console.warn(err);\r\n      return new Response(JSON.stringify({\r\n        code: 400,\r\n        message: 'Stupid network Error'\r\n      }));\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get's the Current position of the user\r\n   * \r\n   * @api navigator.geolocation\r\n   */\r\n  const getCurrentPosition = () => {\r\n    navigator.geolocation.getCurrentPosition(async (position) => {\r\n      let latitude = `${position.coords.latitude}`;\r\n      let longitude = `${position.coords.longitude}`;\r\n      getAddressFromLatAndLng(latitude, longitude);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * set the location passed from useRoute \r\n   */\r\n  useEffect(() => {\r\n\r\n    if (location !== undefined && location !== '') {\r\n      console.log(location);\r\n      //getLocations({ variables: { value: location }, context: { clientName: 'location' } });\r\n\r\n\r\n    }\r\n\r\n  });\r\n\r\nconst createLocationWithOutCommas = (value:any) =>{\r\n  if(value === undefined)\r\n     return;\r\n  let s = \"\";\r\n  let array = value.split(',');\r\n  array.forEach((element:any) => {\r\n         s += element ;\r\n         s += ' '; \r\n  });\r\n  return s; \r\n}\r\n\r\n  return (\r\n    <div >\r\n      {/**\r\n       * refrencing version of: 1/28/2021\r\n       * source: https://github.com/emilynorton?tab=repositories\r\n       */}\r\n      \r\n      {reset && (location = undefined)}\r\n      {(language === 'english' || language === undefined) && <> <h3><span>Step 2 of 3: </span>Your Location</h3></>}\r\n      {language === 'spanish' && <><h3><span>{'<Spanish>'} Step 2 of 3: </span>Your Prescription</h3></>}\r\n      <form id=\"location\" className=\"location\">\r\n        {(language === 'english' || language === undefined) && <><label htmlFor=\"find_rx\">Enter Your location</label></>}\r\n        {(language === 'spanish') && <>{'<Spanish>'}<label htmlFor=\"find_rx\">Enter Your location</label></>}\r\n\r\n\r\n        {((Object.keys(getLocation).length !== 0 && valueForInputValue !== undefined) ?\r\n          <div className=\"results\">\r\n            {valueForInputValue} <u className='cursor' onClick={clearInput}>\r\n              {(language === 'english' || language === undefined) && 'Clear'}\r\n              {language === 'spanish' && '<Spanish>Clear'}\r\n            </u>\r\n          </div>\r\n          :\r\n          <>\r\n            <input value={valueForInputValue} autoComplete=\"off\" onFocus={(e) => clearInput(e)} placeholder=\"Type City or Zip Code\" type=\"text\" list=\"Locations\" onChange={searchLocation} id=\"location\" />\r\n            <datalist id=\"Locations\" className='location-datalist'>\r\n              {\r\n                \r\n                locationsFromMutation.map((element:any, index:any) => {\r\n                  \r\n                return <option key={`${Math.random().toString(36).substr(16)}${new Date().toISOString()}${Math.random() * index}`}>{createLocationWithOutCommas(element.description)}</option>}\r\n                )}\r\n            </datalist>\r\n          </>)\r\n        }\r\n\r\n        {(Object.keys(getLocation).length === 0) && <><div onClick={getCurrentPosition}>\r\n          {(language === 'english' || language === undefined) &&\r\n            <>\r\n              Or...<u className='cursor'>Detect Location</u>\r\n            </>}\r\n          {language === 'spanish' && <>{'<Spanish>'}\r\n              Or...<u className='cursor'>Detect Location</u>\r\n          </>}\r\n        </div></>}\r\n\r\n        <button type=\"submit\" form=\"location\">Map My Location</button>\r\n\r\n      </form>\r\n      <p className=\"instructions\">Enter a location close to where you'd like to pick up your prescription.</p>\r\n\r\n      <div className=\"clickthrough\">\r\n        <Link className=\"back cursor\" to={\r\n          \r\n            {\r\n              pathname: '/src/components/Home',\r\n              query: {\r\n                component: 'prescription',\r\n                prescriptions: prescriptionFromRoute,\r\n                location: JSON.stringify(getLocation).trim(),\r\n                language: language\r\n\r\n              }\r\n            }\r\n        }>{'<<'}\r\n          {(language === 'english' || language === 'undefined') && \"Step 1\"}\r\n          {(language === 'spanish') && \"<Spanish>Step 1\"}`\r\n\r\n        </Link>\r\n\r\n        {((Object.keys(getLocation).length !== 0) || location) &&\r\n\r\n          <Link className='cursor' to={\r\n            \r\n              {\r\n                pathname: '/src/components/Home',\r\n                query: {\r\n                  component: 'choose-your-coupon',\r\n                  prescriptions: prescriptionFromRoute,\r\n                  location: JSON.stringify(getLocation).trim(),\r\n                  language: language\r\n                },\r\n              }\r\n          }>\r\n\r\n            {(language === 'english' || language === undefined) && 'Next: Step3'}\r\n            {language === 'spanish' && '<Spanish>Next: Step3'}\r\n            {'>>'}\r\n          </Link>}\r\n      </div>\r\n\r\n\r\n\r\n      {/*\r\n        used in version 1 with wire frames\r\n        // version 1 from wire frames\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=25%3A1&viewport=520%2C440%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=102%3A1390&viewport=212%2C389%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=349%3A797&viewport=317%2C508%2C0.5&scaling=scale-down \r\n\r\n      \r\n      <span className={styles.desktop_main_left_find_prescription_home_title}>\r\n        {console.log('language', language)}\r\n        {(language === 'english' || language === undefined) && 'Step 2: Your Location'}\r\n        {language === 'spanish' && '<Spanish>Step 2: Your Location'}\r\n      </span>\r\n      \r\n      <div className={styles.desktop_main_left_location_caption}>\r\n        {(language === 'english' || language === undefined) && 'Choose a location where you would like to pick up your prescription.'}\r\n        {language === 'spanish' && '<Spanish>Choose a location where you would like to pick up your prescription.'}\r\n\r\n      </div>\r\n      \r\n      { (windowWidth <= 520 && valueForInputValue ?\r\n        <div className={styles.desktop_location_clear}>\r\n          {valueForInputValue} <u onClick={clearInput}>\r\n            {(language === 'english' || language === undefined) && 'Clear'}\r\n            {language === 'spanish' && '<Spanish>Clear'}\r\n          </u>\r\n        </div>\r\n        :\r\n         <>\r\n          <input value={valueForInputValue} autoComplete=\"off\" onFocus={(e) => {\r\n              clearInput(e);\r\n              \r\n            }          \r\n          }\r\n            placeholder=\"Type City or Zip Code\" className={styles.desktop_main_left_find_prescription_home_input} type=\"text\" list=\"Locations\" onChange={searchLocation} id=\"location\" />\r\n          <datalist  className=\"desktop-main-left-find-prescription-home-datalist\" id=\"Locations\">\r\n            {console.log('locationsfrommutation', locationsFromMutation)}\r\n            {locationsFromMutation.map((element, index) =>\r\n              <option key={`location${index}`} value={element.description} />\r\n            )}\r\n          </datalist>\r\n        </>)\r\n      }\r\n      {(windowWidth <= 520 && valueForInputValue) ? null :\r\n        <div onClick={getCurrentPosition} className={styles.desktop_main_location_detect_location}>\r\n          {(language === 'english' || language === undefined) &&\r\n            <>\r\n              Or...<u>Detect Location</u>\r\n            </>}\r\n          {language === 'spanish' && <>{'<Spanish>'}\r\n          Or...<u>Detect Location</u>\r\n          </>}\r\n        </div>\r\n      }\r\n      {console.log('getLocation', getLocation)}\r\n      {((Object.keys(getLocation).length !== 0 && getLocation.constructor === Object) || location) && <button className={`next-button ${styles.desktop_button_location}`} onClick={() => router.push\r\n        (\r\n          {\r\n            pathname: '/src/components/Home',\r\n            query: {\r\n              component: 'choose-your-coupon',\r\n              prescriptions: prescriptionFromRoute,\r\n              location: valueForInputValue.trim(),\r\n              language: language\r\n            },\r\n          })\r\n      }>\r\n        {(language === 'english' || language === undefined) && 'Next: Step3'}\r\n        {language === 'spanish' && '<Spanish>Next: Step3'}\r\n        {'>>'}</button>}\r\n      <div className={styles.desktop_location_back_button} onClick={() => router.push\r\n        (\r\n          {\r\n            pathname: '/src/components/Home',\r\n            query: {\r\n              component: 'prescription',\r\n              prescriptions: prescriptionFromRoute,\r\n              location: valueForInputValue.trim(),\r\n              language: language\r\n\r\n            }\r\n          })\r\n      }><u>{'<<'}\r\n          {(language === 'english' || language === 'undefined') && ` ${(windowWidth > 520 ? \"Step 1: Your Prescription\" : \"Step 1\")}`}\r\n          {(language === 'spanish') && `${(windowWidth > 520 ? \"<Spanish>Step 1: Your Prescription\" : \"<Spanish>Step 1\")}`}\r\n        </u>\r\n      </div> */}\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default Location;"]},"metadata":{},"sourceType":"module"}