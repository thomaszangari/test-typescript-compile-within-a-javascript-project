{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\ReactExampleCode\\\\test-typescript-compile-within-a-javascript-project\\\\Code\\\\src\\\\pages\\\\src\\\\components\\\\Home\\\\Location\\\\index.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'; //import styles from '../../../../../styles/Location.module.scss'; used on version 1\n\n/**\r\n * @context location\r\n * \r\n * uses \r\n * \r\n * @serviceApi location\r\n *  \r\n * \r\n */\n// const GET_LOCATION = gql`\n// mutation GetLocationFromZipOrCity($value:String){\n//       GetLocationFromZipOrCity(value:$value)\n//       {\n//            code\n//            message\n//            results{\n//              geometry{\n//                 location{\n//                   lat\n//                   lng\n//                 }\n//               }\n//            }\n//            predictions\n//            {\n//              description\n//            }\n//       }\n// }\n// `;\n\n/**\r\n * @Pages\r\n * \r\n * Location page to detect current position or find loation\r\n * uses location service\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language the language to display the data \r\n * @param prescriptionFromRoute the prescription been pased when useRoute is used\r\n * @param location the location passed from the route\r\n */\n\nconst Location = ({\n  language,\n  prescriptionFromRoute,\n  location\n}) => {\n  let locationWithOutComas = \"\";\n  /**@gets @sets the locations array from the mutation */\n\n  const [locationsFromMutation, setLocationsFromMutation] = useState([]);\n  /** @gets @sets the selected location  */\n\n  const [getLocation, setLocation] = useState({});\n  /**@gets @sets the reset to clear the location passed in the function*/\n\n  const [reset, setReset] = useState(false);\n  /** @set @gets windowsWidth  */\n\n  const [windowWidth, setWindowWidth] = useState(0);\n  /** @sets @gets the value in the input box */\n\n  const [valueForInputValue, setValueForInputValue] = useState(\"\");\n  /** for alert message box */\n  //const alert = useAlert();\n\n  const getSizes = () => {\n    setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n    setWindowWidth(window.innerWidth);\n    window.addEventListener(\"resize\", getSizes, false);\n  });\n  /**\r\n   * Get Location Mutation Mutation that calls location service to retreve\r\n   * location info from input box. It supports by city name and zip code \r\n   * \r\n   * @variable event.target.value\r\n   * @context location  for Apollo.Link     \r\n   */\n  // const [getLocations, { loading: mutationLoading }] = useMutation(GET_LOCATION, {\n  //   onError(err) {\n  //     console.log(err);\n  //     alert(err);\n  //   },\n  //   update(proxy, result) {\n  //     try {\n  //       console.log(result);\n  //       if (result.data.GetLocationFromZipOrCity.code !== 200) {\n  //         alert(result.data.GetLocationFromZipOrCity.message);\n  //         return;\n  //       }        \n  //       if (result.data.GetLocationFromZipOrCity.predictions !== null && result.data.GetLocationFromZipOrCity.predictions !== undefined) {\n  //         if(location === undefined && result.data.GetLocationFromZipOrCity.predictions.length === 0)\n  //            return;\n  //         if (result.data.GetLocationFromZipOrCity.predictions.length === 0) {\n  //           alert(\"No Location Retreved\");\n  //           return;\n  //         }\n  //       }\n  //       if (result.data.GetLocationFromZipOrCity.results !== null) {\n  //         setValueForInputValue(undefined);\n  //         const location = result.data.GetLocationFromZipOrCity.results[0].geometry.location;\n  //         getAddressFromLatAndLng(location.lat, location.lng);\n  //         setLocationsFromMutation(result.data.GetLocationFromZipOrCity.results);\n  //         return;\n  //       }\n  //       setLocationsFromMutation(result.data.GetLocationFromZipOrCity.predictions)\n  //     }\n  //     catch (e) {\n  //       alert(e);\n  //     }\n  //   }\n  // });\n\n  /**\r\n   * Respondes to onChange function from input box\r\n   * set the value and context for the GraphQl call \r\n   * \r\n   * @useState setValueForInputValue\r\n   * @mutation getLocations\r\n   * @event e\r\n   */\n\n  const searchLocation = e => {\n    setValueForInputValue(e.target.value);\n    setLocationsFromMutation([]); //getLocations({ variables: { value: e.target.value }, context: { clientName: 'location' } });\n  };\n  /**\r\n   * Clears and resets the values from the input box \r\n   * \r\n   * @useState setValueForInputValue\r\n   * @useState setReset\r\n   * @useState setLocation\r\n   * @event e \r\n   */\n\n\n  const clearInput = e => {\n    setValueForInputValue(\"\");\n    setReset(true);\n    setLocation({});\n    setLocationsFromMutation([]);\n  };\n  /**\r\n   * Gets the reverse geocode for address with zip from latitude\r\n   * and longitude \r\n   * \r\n   * @url https://api.bigdatacloud.net/data/reverse-geocode-client\";\r\n   * @useState setLocation\r\n   * @useState setValueForInputValue\r\n   * @param lat latitude\r\n   * @param lng longitude\r\n   * @function handleError\r\n   */\n\n\n  const getAddressFromLatAndLng = async (lat, lng) => {\n    let myLocation;\n    let latitude = `latitude=${lat}`;\n    let longitude = `&longitude=${lng}`;\n    let query = latitude + longitude + \"&localityLanguage=en\";\n    let bigdatacloud_api = process.env.locationUrl;\n    bigdatacloud_api += `?${query}`;\n    let myObj = await fetch(bigdatacloud_api).catch(() => {\n      console.log(\"error\");\n    });\n\n    if (myObj.ok) {\n      let obj = await myObj.json();\n      console.log(obj);\n      myLocation = {\n        latitude: lat,\n        longitude: lng,\n        postCode: obj.postcode,\n        city: obj.locality,\n        country: obj.countryName,\n        state: obj.principalSubdivisionCode.split('-')[1]\n      };\n      let valueMyLocation = ` ${myLocation.postCode}, ${myLocation.city}, ${myLocation.state}`;\n      myLocation.myLocation = valueMyLocation;\n      setLocation(myLocation);\n      setValueForInputValue(valueMyLocation);\n    }\n\n    var handleError = function (err) {\n      console.warn(err);\n      return new Response(JSON.stringify({\n        code: 400,\n        message: 'Stupid network Error'\n      }));\n    };\n  };\n  /**\r\n   * Get's the Current position of the user\r\n   * \r\n   * @api navigator.geolocation\r\n   */\n\n\n  const getCurrentPosition = () => {\n    navigator.geolocation.getCurrentPosition(async position => {\n      let latitude = `${position.coords.latitude}`;\n      let longitude = `${position.coords.longitude}`;\n      getAddressFromLatAndLng(latitude, longitude);\n    });\n  };\n  /**\r\n   * set the location passed from useRoute \r\n   */\n\n\n  useEffect(() => {\n    if (location !== undefined && location !== '') {\n      console.log(location); //getLocations({ variables: { value: location }, context: { clientName: 'location' } });\n    }\n  });\n\n  const createLocationWithOutCommas = value => {\n    if (value === undefined) return;\n    let s = \"\";\n    let array = value.split(',');\n    array.forEach(element => {\n      s += element;\n      s += ' ';\n    });\n    return s;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 5\n    }\n  }, reset && (location = undefined), (language === 'english' || language === undefined) && /*#__PURE__*/React.createElement(React.Fragment, null, \" \", /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 69\n    }\n  }, \"Step 2 of 3: \"), \"Your Location\")), language === 'spanish' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 36\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 40\n    }\n  }, '<Spanish>', \" Step 2 of 3: \"), \"Your Prescription\")), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"location\",\n    className: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }\n  }, (language === 'english' || language === undefined) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"find_rx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 66\n    }\n  }, \"Enter Your location\")), language === 'spanish' && /*#__PURE__*/React.createElement(React.Fragment, null, '<Spanish>', /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"find_rx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 53\n    }\n  }, \"Enter Your location\")), Object.keys(getLocation).length !== 0 && valueForInputValue !== undefined ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"results\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, valueForInputValue, \" \", /*#__PURE__*/React.createElement(\"u\", {\n    className: \"cursor\",\n    onClick: clearInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 34\n    }\n  }, (language === 'english' || language === undefined) && 'Clear', language === 'spanish' && '<Spanish>Clear')) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    value: valueForInputValue,\n    autoComplete: \"off\",\n    onFocus: e => clearInput(e),\n    placeholder: \"Type City or Zip Code\",\n    type: \"text\",\n    list: \"Locations\",\n    onChange: searchLocation,\n    id: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    id: \"Locations\",\n    className: \"location-datalist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }\n  }, locationsFromMutation.map((element, index) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: `${Math.random().toString(36).substr(16)}${new Date().toISOString()}${Math.random() * index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 24\n      }\n    }, createLocationWithOutCommas(element.description));\n  }))), Object.keys(getLocation).length === 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: getCurrentPosition,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 55\n    }\n  }, (language === 'english' || language === undefined) && /*#__PURE__*/React.createElement(React.Fragment, null, \"Or...\", /*#__PURE__*/React.createElement(\"u\", {\n    className: \"cursor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 20\n    }\n  }, \"Detect Location\")), language === 'spanish' && /*#__PURE__*/React.createElement(React.Fragment, null, '<Spanish>', \"Or...\", /*#__PURE__*/React.createElement(\"u\", {\n    className: \"cursor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 20\n    }\n  }, \"Detect Location\")))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    form: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }\n  }, \"Map My Location\")), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"instructions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }\n  }, \"Enter a location close to where you'd like to pick up your prescription.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"clickthrough\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    className: \"back cursor\",\n    to: {\n      pathname: '/src/components/Home',\n      query: {\n        component: 'prescription',\n        prescriptions: prescriptionFromRoute,\n        location: JSON.stringify(getLocation).trim(),\n        language: language\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }, '<<', (language === 'english' || language === 'undefined') && \"Step 1\", language === 'spanish' && \"<Spanish>Step 1\", \"`\"), (Object.keys(getLocation).length !== 0 || location) && /*#__PURE__*/React.createElement(Link, {\n    className: \"cursor\",\n    to: {\n      pathname: '/src/components/Home',\n      query: {\n        component: 'choose-your-coupon',\n        prescriptions: prescriptionFromRoute,\n        location: JSON.stringify(getLocation).trim(),\n        language: language\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 11\n    }\n  }, (language === 'english' || language === undefined) && 'Next: Step3', language === 'spanish' && '<Spanish>Next: Step3', '>>')));\n};\n\nexport default Location;","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/ReactExampleCode/test-typescript-compile-within-a-javascript-project/Code/src/pages/src/components/Home/Location/index.tsx"],"names":["React","useEffect","useState","Link","Location","language","prescriptionFromRoute","location","locationWithOutComas","locationsFromMutation","setLocationsFromMutation","getLocation","setLocation","reset","setReset","windowWidth","setWindowWidth","valueForInputValue","setValueForInputValue","getSizes","window","innerWidth","addEventListener","searchLocation","e","target","value","clearInput","getAddressFromLatAndLng","lat","lng","myLocation","latitude","longitude","query","bigdatacloud_api","process","env","locationUrl","myObj","fetch","catch","console","log","ok","obj","json","postCode","postcode","city","locality","country","countryName","state","principalSubdivisionCode","split","valueMyLocation","handleError","err","warn","Response","JSON","stringify","code","message","getCurrentPosition","navigator","geolocation","position","coords","undefined","createLocationWithOutCommas","s","array","forEach","element","Object","keys","length","map","index","Math","random","toString","substr","Date","toISOString","description","pathname","component","prescriptions","trim"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Link } from 'react-router-dom';\r\n//import styles from '../../../../../styles/Location.module.scss'; used on version 1\r\n\r\n\r\n/**\r\n * @context location\r\n * \r\n * uses \r\n * \r\n * @serviceApi location\r\n *  \r\n * \r\n */\r\n// const GET_LOCATION = gql`\r\n// mutation GetLocationFromZipOrCity($value:String){\r\n//       GetLocationFromZipOrCity(value:$value)\r\n//       {\r\n//            code\r\n//            message\r\n//            results{\r\n             \r\n//              geometry{\r\n//                 location{\r\n//                   lat\r\n//                   lng\r\n//                 }\r\n//               }\r\n//            }\r\n//            predictions\r\n//            {\r\n//              description\r\n//            }\r\n//       }\r\n// }\r\n// `;\r\n\r\n/**\r\n * @Pages\r\n * \r\n * Location page to detect current position or find loation\r\n * uses location service\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language the language to display the data \r\n * @param prescriptionFromRoute the prescription been pased when useRoute is used\r\n * @param location the location passed from the route\r\n */\r\n\r\nconst Location = ({ language, prescriptionFromRoute, location }:any) => {\r\n\r\n  let locationWithOutComas = \"\";\r\n\r\n  /**@gets @sets the locations array from the mutation */\r\n  const [locationsFromMutation, setLocationsFromMutation] = useState([]);\r\n\r\n  /** @gets @sets the selected location  */\r\n  const [getLocation, setLocation] = useState({});\r\n\r\n  /**@gets @sets the reset to clear the location passed in the function*/\r\n  const [reset, setReset] = useState(false);\r\n\r\n  /** @set @gets windowsWidth  */\r\n  const [windowWidth, setWindowWidth] = useState(0);\r\n\r\n  /** @sets @gets the value in the input box */\r\n  const [valueForInputValue, setValueForInputValue] = useState(\"\");\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n  /** for alert message box */\r\n  //const alert = useAlert();\r\n\r\n\r\n\r\n  const getSizes = () => {\r\n    setWindowWidth(window.innerWidth);\r\n  }\r\n\r\n  useEffect(() => {\r\n    setWindowWidth(window.innerWidth);\r\n    window.addEventListener(\r\n      \"resize\", getSizes, false);\r\n  });\r\n\r\n  /**\r\n   * Get Location Mutation Mutation that calls location service to retreve\r\n   * location info from input box. It supports by city name and zip code \r\n   * \r\n   * @variable event.target.value\r\n   * @context location  for Apollo.Link     \r\n   */\r\n  // const [getLocations, { loading: mutationLoading }] = useMutation(GET_LOCATION, {\r\n  //   onError(err) {\r\n  //     console.log(err);\r\n  //     alert(err);\r\n\r\n  //   },\r\n  //   update(proxy, result) {\r\n  //     try {\r\n  //       console.log(result);\r\n  //       if (result.data.GetLocationFromZipOrCity.code !== 200) {\r\n  //         alert(result.data.GetLocationFromZipOrCity.message);\r\n  //         return;\r\n  //       }        \r\n  //       if (result.data.GetLocationFromZipOrCity.predictions !== null && result.data.GetLocationFromZipOrCity.predictions !== undefined) {\r\n           \r\n  //         if(location === undefined && result.data.GetLocationFromZipOrCity.predictions.length === 0)\r\n  //            return;\r\n  //         if (result.data.GetLocationFromZipOrCity.predictions.length === 0) {\r\n  //           alert(\"No Location Retreved\");\r\n  //           return;\r\n  //         }\r\n  //       }\r\n  //       if (result.data.GetLocationFromZipOrCity.results !== null) {\r\n        \r\n  //         setValueForInputValue(undefined);\r\n  //         const location = result.data.GetLocationFromZipOrCity.results[0].geometry.location;\r\n  //         getAddressFromLatAndLng(location.lat, location.lng);\r\n  //         setLocationsFromMutation(result.data.GetLocationFromZipOrCity.results);\r\n  //         return;\r\n  //       }\r\n     \r\n  //       setLocationsFromMutation(result.data.GetLocationFromZipOrCity.predictions)\r\n  //     }\r\n  //     catch (e) {\r\n  //       alert(e);\r\n  //     }\r\n  //   }\r\n  // });\r\n\r\n  /**\r\n   * Respondes to onChange function from input box\r\n   * set the value and context for the GraphQl call \r\n   * \r\n   * @useState setValueForInputValue\r\n   * @mutation getLocations\r\n   * @event e\r\n   */\r\n  const searchLocation = (e:any) => {\r\n\r\n    setValueForInputValue(e.target.value);\r\n    setLocationsFromMutation([]);\r\n    //getLocations({ variables: { value: e.target.value }, context: { clientName: 'location' } });\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Clears and resets the values from the input box \r\n   * \r\n   * @useState setValueForInputValue\r\n   * @useState setReset\r\n   * @useState setLocation\r\n   * @event e \r\n   */\r\n  const clearInput = (e:any) => {\r\n    setValueForInputValue(\"\");\r\n    setReset(true);\r\n    setLocation({});\r\n    setLocationsFromMutation([]);\r\n  }\r\n\r\n  /**\r\n   * Gets the reverse geocode for address with zip from latitude\r\n   * and longitude \r\n   * \r\n   * @url https://api.bigdatacloud.net/data/reverse-geocode-client\";\r\n   * @useState setLocation\r\n   * @useState setValueForInputValue\r\n   * @param lat latitude\r\n   * @param lng longitude\r\n   * @function handleError\r\n   */\r\n  const getAddressFromLatAndLng = async (lat:any, lng:any) => {\r\n    let myLocation:any;\r\n    let latitude:any = `latitude=${lat}`;\r\n    let longitude:any = `&longitude=${lng}`;\r\n    let query:any = latitude + longitude + \"&localityLanguage=en\";\r\n    let bigdatacloud_api:any = process.env.locationUrl;\r\n\r\n    bigdatacloud_api += `?${query}`;\r\n    let myObj:any = await fetch(bigdatacloud_api)\r\n      .catch(()=>{console.log(\"error\")});\r\n\r\n    if (myObj.ok) {\r\n      let obj = await myObj.json();\r\n      console.log(obj);\r\n      myLocation = {\r\n        latitude: lat,\r\n        longitude: lng,\r\n        postCode: obj.postcode,\r\n        city: obj.locality,\r\n        country: obj.countryName,\r\n        state: obj.principalSubdivisionCode.split('-')[1],\r\n      };\r\n\r\n      let valueMyLocation = ` ${myLocation.postCode}, ${myLocation.city}, ${myLocation.state}`;\r\n      myLocation.myLocation = valueMyLocation\r\n      setLocation(myLocation);\r\n      setValueForInputValue(valueMyLocation);\r\n    }\r\n    var handleError = function (err:any) {\r\n      console.warn(err);\r\n      return new Response(JSON.stringify({\r\n        code: 400,\r\n        message: 'Stupid network Error'\r\n      }));\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get's the Current position of the user\r\n   * \r\n   * @api navigator.geolocation\r\n   */\r\n  const getCurrentPosition = () => {\r\n    navigator.geolocation.getCurrentPosition(async (position) => {\r\n      let latitude = `${position.coords.latitude}`;\r\n      let longitude = `${position.coords.longitude}`;\r\n      getAddressFromLatAndLng(latitude, longitude);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * set the location passed from useRoute \r\n   */\r\n  useEffect(() => {\r\n\r\n    if (location !== undefined && location !== '') {\r\n      console.log(location);\r\n      //getLocations({ variables: { value: location }, context: { clientName: 'location' } });\r\n\r\n\r\n    }\r\n\r\n  });\r\n\r\nconst createLocationWithOutCommas = (value:any) =>{\r\n  if(value === undefined)\r\n     return;\r\n  let s = \"\";\r\n  let array = value.split(',');\r\n  array.forEach((element:any) => {\r\n         s += element ;\r\n         s += ' '; \r\n  });\r\n  return s; \r\n}\r\n\r\n  return (\r\n    <div >\r\n      {/**\r\n       * refrencing version of: 1/28/2021\r\n       * source: https://github.com/emilynorton?tab=repositories\r\n       */}\r\n      \r\n      {reset && (location = undefined)}\r\n      {(language === 'english' || language === undefined) && <> <h3><span>Step 2 of 3: </span>Your Location</h3></>}\r\n      {language === 'spanish' && <><h3><span>{'<Spanish>'} Step 2 of 3: </span>Your Prescription</h3></>}\r\n      <form id=\"location\" className=\"location\">\r\n        {(language === 'english' || language === undefined) && <><label htmlFor=\"find_rx\">Enter Your location</label></>}\r\n        {(language === 'spanish') && <>{'<Spanish>'}<label htmlFor=\"find_rx\">Enter Your location</label></>}\r\n\r\n\r\n        {((Object.keys(getLocation).length !== 0 && valueForInputValue !== undefined) ?\r\n          <div className=\"results\">\r\n            {valueForInputValue} <u className='cursor' onClick={clearInput}>\r\n              {(language === 'english' || language === undefined) && 'Clear'}\r\n              {language === 'spanish' && '<Spanish>Clear'}\r\n            </u>\r\n          </div>\r\n          :\r\n          <>\r\n            <input value={valueForInputValue} autoComplete=\"off\" onFocus={(e) => clearInput(e)} placeholder=\"Type City or Zip Code\" type=\"text\" list=\"Locations\" onChange={searchLocation} id=\"location\" />\r\n            <datalist id=\"Locations\" className='location-datalist'>\r\n              {\r\n                \r\n                locationsFromMutation.map((element:any, index:any) => {\r\n                  \r\n                return <option key={`${Math.random().toString(36).substr(16)}${new Date().toISOString()}${Math.random() * index}`}>{createLocationWithOutCommas(element.description)}</option>}\r\n                )}\r\n            </datalist>\r\n          </>)\r\n        }\r\n\r\n        {(Object.keys(getLocation).length === 0) && <><div onClick={getCurrentPosition}>\r\n          {(language === 'english' || language === undefined) &&\r\n            <>\r\n              Or...<u className='cursor'>Detect Location</u>\r\n            </>}\r\n          {language === 'spanish' && <>{'<Spanish>'}\r\n              Or...<u className='cursor'>Detect Location</u>\r\n          </>}\r\n        </div></>}\r\n\r\n        <button type=\"submit\" form=\"location\">Map My Location</button>\r\n\r\n      </form>\r\n      <p className=\"instructions\">Enter a location close to where you'd like to pick up your prescription.</p>\r\n\r\n      <div className=\"clickthrough\">\r\n        <Link className=\"back cursor\" to={\r\n          \r\n            {\r\n              pathname: '/src/components/Home',\r\n              query: {\r\n                component: 'prescription',\r\n                prescriptions: prescriptionFromRoute,\r\n                location: JSON.stringify(getLocation).trim(),\r\n                language: language\r\n\r\n              }\r\n            }\r\n        }>{'<<'}\r\n          {(language === 'english' || language === 'undefined') && \"Step 1\"}\r\n          {(language === 'spanish') && \"<Spanish>Step 1\"}`\r\n\r\n        </Link>\r\n\r\n        {((Object.keys(getLocation).length !== 0) || location) &&\r\n\r\n          <Link className='cursor' to={\r\n            \r\n              {\r\n                pathname: '/src/components/Home',\r\n                query: {\r\n                  component: 'choose-your-coupon',\r\n                  prescriptions: prescriptionFromRoute,\r\n                  location: JSON.stringify(getLocation).trim(),\r\n                  language: language\r\n                },\r\n              }\r\n          }>\r\n\r\n            {(language === 'english' || language === undefined) && 'Next: Step3'}\r\n            {language === 'spanish' && '<Spanish>Next: Step3'}\r\n            {'>>'}\r\n          </Link>}\r\n      </div>\r\n\r\n\r\n\r\n      {/*\r\n        used in version 1 with wire frames\r\n        // version 1 from wire frames\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=25%3A1&viewport=520%2C440%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=102%3A1390&viewport=212%2C389%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=349%3A797&viewport=317%2C508%2C0.5&scaling=scale-down \r\n\r\n      \r\n      <span className={styles.desktop_main_left_find_prescription_home_title}>\r\n        {console.log('language', language)}\r\n        {(language === 'english' || language === undefined) && 'Step 2: Your Location'}\r\n        {language === 'spanish' && '<Spanish>Step 2: Your Location'}\r\n      </span>\r\n      \r\n      <div className={styles.desktop_main_left_location_caption}>\r\n        {(language === 'english' || language === undefined) && 'Choose a location where you would like to pick up your prescription.'}\r\n        {language === 'spanish' && '<Spanish>Choose a location where you would like to pick up your prescription.'}\r\n\r\n      </div>\r\n      \r\n      { (windowWidth <= 520 && valueForInputValue ?\r\n        <div className={styles.desktop_location_clear}>\r\n          {valueForInputValue} <u onClick={clearInput}>\r\n            {(language === 'english' || language === undefined) && 'Clear'}\r\n            {language === 'spanish' && '<Spanish>Clear'}\r\n          </u>\r\n        </div>\r\n        :\r\n         <>\r\n          <input value={valueForInputValue} autoComplete=\"off\" onFocus={(e) => {\r\n              clearInput(e);\r\n              \r\n            }          \r\n          }\r\n            placeholder=\"Type City or Zip Code\" className={styles.desktop_main_left_find_prescription_home_input} type=\"text\" list=\"Locations\" onChange={searchLocation} id=\"location\" />\r\n          <datalist  className=\"desktop-main-left-find-prescription-home-datalist\" id=\"Locations\">\r\n            {console.log('locationsfrommutation', locationsFromMutation)}\r\n            {locationsFromMutation.map((element, index) =>\r\n              <option key={`location${index}`} value={element.description} />\r\n            )}\r\n          </datalist>\r\n        </>)\r\n      }\r\n      {(windowWidth <= 520 && valueForInputValue) ? null :\r\n        <div onClick={getCurrentPosition} className={styles.desktop_main_location_detect_location}>\r\n          {(language === 'english' || language === undefined) &&\r\n            <>\r\n              Or...<u>Detect Location</u>\r\n            </>}\r\n          {language === 'spanish' && <>{'<Spanish>'}\r\n          Or...<u>Detect Location</u>\r\n          </>}\r\n        </div>\r\n      }\r\n      {console.log('getLocation', getLocation)}\r\n      {((Object.keys(getLocation).length !== 0 && getLocation.constructor === Object) || location) && <button className={`next-button ${styles.desktop_button_location}`} onClick={() => router.push\r\n        (\r\n          {\r\n            pathname: '/src/components/Home',\r\n            query: {\r\n              component: 'choose-your-coupon',\r\n              prescriptions: prescriptionFromRoute,\r\n              location: valueForInputValue.trim(),\r\n              language: language\r\n            },\r\n          })\r\n      }>\r\n        {(language === 'english' || language === undefined) && 'Next: Step3'}\r\n        {language === 'spanish' && '<Spanish>Next: Step3'}\r\n        {'>>'}</button>}\r\n      <div className={styles.desktop_location_back_button} onClick={() => router.push\r\n        (\r\n          {\r\n            pathname: '/src/components/Home',\r\n            query: {\r\n              component: 'prescription',\r\n              prescriptions: prescriptionFromRoute,\r\n              location: valueForInputValue.trim(),\r\n              language: language\r\n\r\n            }\r\n          })\r\n      }><u>{'<<'}\r\n          {(language === 'english' || language === 'undefined') && ` ${(windowWidth > 520 ? \"Step 1: Your Prescription\" : \"Step 1\")}`}\r\n          {(language === 'spanish') && `${(windowWidth > 520 ? \"<Spanish>Step 1: Your Prescription\" : \"<Spanish>Step 1\")}`}\r\n        </u>\r\n      </div> */}\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default Location;"]},"metadata":{},"sourceType":"module"}