{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\src\\\\systemstats\\\\SystemStats.js\";\nimport React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Line } from 'react-chartjs-2';\nimport SystemSearch from '../systemsearch';\nimport ReactTable from \"../PaginatedTable/ReactTable\";\nimport AppToast from \"../toast\";\nimport config from \"../config\";\nimport moment from \"moment\";\nimport { ExportToCsv } from 'export-to-csv';\nimport './SystemStats.css';\n\nclass SystemStats extends React.Component {\n  constructor(props) {\n    super(props);\n    this.data = {\n      labels: [],\n      datasets: [{\n        label: 'Alerts',\n        fill: false,\n        lineTension: 0,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: []\n      }]\n    };\n    this.options = {\n      scales: {\n        xAxes: [{\n          type: 'time',\n          time: {\n            unit: 'day'\n          },\n          ticks: {\n            fontColor: \"white\",\n            fontSize: 14\n          },\n          gridLines: {\n            color: 'rgb(255, 255, 255, 0.2)'\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            fontColor: \"white\",\n            fontSize: 14\n          },\n          gridLines: {\n            color: 'rgb(255, 255, 255, 0.2)'\n          }\n        }]\n      },\n      legend: {\n        labels: {\n          fontColor: \"white\",\n          fontSize: 12\n        }\n      },\n      maintainAspectRatio: false\n    };\n    this.CSVoptions = {\n      showLabels: true,\n      useTextFile: false,\n      useBom: true,\n      //useKeysAsHeaders: true,\n      headers: ['Time UTC', 'Time', 'Description', 'Context', 'Type', 'Details', 'Priority', 'Category', 'ID', '-']\n    };\n    this.csvExporter = new ExportToCsv(this.CSVoptions);\n\n    this.onSearchClick = (categorySelected = '', queryDateRangeStart = '', queryDateRangeEnd = '', querySearchText = '') => {\n      var startDate = new Date(queryDateRangeStart);\n      const momentStartDate = moment(startDate).utc().format();\n      var endDate = new Date(queryDateRangeEnd);\n      endDate.setHours(23, 59, 59);\n      const momentEndDate = moment(endDate).utc().format();\n      var query = `?startDate=${momentStartDate}&endDate=${momentEndDate}&category=${categorySelected}&searchText=${querySearchText}`;\n      this.fetchSystemDetails(query);\n    };\n\n    this.handleSelectClick = (event, id) => {\n      event.preventDefault();\n      this.navigateTo('/system/details', id);\n    };\n\n    this.navigateTo = (path, id) => {\n      if (id != '') {\n        this.props.history.push({\n          pathname: path,\n          state: {\n            detail: id\n          }\n        });\n      } else {\n        this.props.history.push(path);\n      }\n    };\n\n    this.setSystemDetails = res => {\n      var data = res.hits.hits;\n      data.forEach(hit => {\n        this.incDataSetValues(hit._source.eventDateTimeUTC);\n      });\n      this.setState({\n        'graphData': this.data\n      });\n      const rows = Object.values(data).map(d => {\n        var temp = d._id;\n        d = d._source;\n        d._id = temp;\n        d.details = /*#__PURE__*/React.createElement(\"a\", {\n          onClick: e => this.handleSelectClick(e, d._id),\n          href: \"\",\n          className: \"select-link\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }\n        }, \"Details\");\n        return d;\n      });\n      rows.forEach(element => element.eventDateTime = moment(element.eventDateTime).format());\n      this.setState({\n        'statsList': rows\n      });\n    };\n\n    this.state = {\n      graphData: this.data,\n      statsList: [],\n      tableHeader: [{\n        key: 'category',\n        label: 'Category'\n      }, {\n        key: 'priority',\n        label: 'Priority'\n      }, {\n        key: 'eventDateTime',\n        label: 'Date'\n      }, {\n        key: 'eventType',\n        label: 'Type'\n      }, {\n        key: 'eventDescription',\n        label: 'Description'\n      }, {\n        key: 'details',\n        label: 'Details'\n      }],\n      showToast: false\n    };\n  }\n\n  incDataSetValues(datetime) {\n    var date = new Date(datetime);\n\n    for (var i = 0; i < this.data.datasets[0].data.length; i++) {\n      //var storedDate = this.playerData.datasets[0].data[i].y;\n      if (date.getTime() > this.data.datasets[0].data[i].x.getTime()) {\n        if (i == this.data.datasets[0].data.length - 1) {\n          this.data.datasets[0].data[i].y++;\n        } else {\n          if (date.getTime() < this.data.datasets[0].data[i + 1].x.getTime()) {\n            this.data.datasets[0].data[i].y++;\n          }\n        }\n      }\n    }\n  }\n\n  populateDataSet(queryStr, segments = 12) {\n    var startStr = queryStr.substring(11, 31);\n    var endStr = queryStr.substring(40, 60);\n    var startMoment = moment(startStr);\n    var endMoment = moment(endStr);\n    var diffMS = endMoment.diff(startMoment);\n    var diffSegment = Math.ceil(diffMS / segments);\n    var ts = endMoment.valueOf();\n    this.data.datasets[0].data = [];\n    this.data.labels = [];\n\n    for (var i = 0; i < segments; i++) {\n      var date = new Date(ts);\n      var dateData = {\n        x: date,\n        y: 0\n      };\n      this.data.datasets[0].data.unshift(dateData);\n      this.data.labels.unshift(date);\n      ts = ts - diffSegment;\n    }\n  }\n\n  fetchSystemDetails(queryStr = '') {\n    if (queryStr == '') {\n      console.log('no query string passed');\n    } else {\n      this.populateDataSet(queryStr, 12);\n      let url = `${config.LOG_SERVER_BASE_URL}/v1/log/stats${queryStr}`;\n      fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(res => {\n        if (res.error) {\n          console.log(res.error);\n        } else {\n          this.setSystemDetails(res);\n        }\n      }).catch(error => {\n        this.setState({\n          showError: true,\n          errorMessage: error.toString()\n        });\n      });\n    }\n  }\n\n  componentDidMount() {\n    var data = null;\n\n    if (this.props.location.state == undefined) {\n      this.props.history.push('/system/dashboard');\n    } else {\n      var query = this.props.location.state.detail;\n      this.fetchSystemDetails(query);\n    }\n  }\n\n  downloadClicked(data) {\n    //debugger;\n    //const {details, eventDateTime, tempData} = data;\n    this.csvExporter.generateCsv(data);\n  }\n\n  render() {\n    const {\n      tableHeader,\n      statsList,\n      graphData,\n      showToast\n    } = this.state;\n    const msg = 'No Results found.';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"system-stats\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"graph-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: graphData,\n      options: this.options,\n      redraw: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SystemSearch, {\n      handleSearchClick: this.onSearchClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }\n    }, tableHeader && statsList ? /*#__PURE__*/React.createElement(ReactTable, {\n      tableHeader: tableHeader,\n      rowData: statsList,\n      className: \"update-stats-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 27\n      }\n    }) : null), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"system-search-btn\",\n      onClick: () => this.downloadClicked(statsList),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }\n    }, \"Export\")), showToast ? /*#__PURE__*/React.createElement(AppToast, {\n      showToast: showToast,\n      message: msg,\n      isSuccessMessage: true,\n      handleClose: this.onToastClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 33\n      }\n    }) : null);\n  }\n\n}\n\nexport default SystemStats;","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/Capstone/lottery/mslc-backoffice-client/v1/Code/src/systemstats/SystemStats.js"],"names":["React","Button","Line","SystemSearch","ReactTable","AppToast","config","moment","ExportToCsv","SystemStats","Component","constructor","props","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","scales","xAxes","type","time","unit","ticks","fontColor","fontSize","gridLines","color","yAxes","legend","maintainAspectRatio","CSVoptions","showLabels","useTextFile","useBom","headers","csvExporter","onSearchClick","categorySelected","queryDateRangeStart","queryDateRangeEnd","querySearchText","startDate","Date","momentStartDate","utc","format","endDate","setHours","momentEndDate","query","fetchSystemDetails","handleSelectClick","event","id","preventDefault","navigateTo","path","history","push","pathname","state","detail","setSystemDetails","res","hits","forEach","hit","incDataSetValues","_source","eventDateTimeUTC","setState","rows","Object","values","map","d","temp","_id","details","e","element","eventDateTime","graphData","statsList","tableHeader","key","showToast","datetime","date","i","length","getTime","x","y","populateDataSet","queryStr","segments","startStr","substring","endStr","startMoment","endMoment","diffMS","diff","diffSegment","Math","ceil","ts","valueOf","dateData","unshift","console","log","url","LOG_SERVER_BASE_URL","fetch","method","localStorage","getItem","then","response","json","error","catch","showError","errorMessage","toString","componentDidMount","location","undefined","downloadClicked","generateCsv","render","msg","onToastClose"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {Line} from 'react-chartjs-2';\r\nimport SystemSearch from '../systemsearch';\r\nimport ReactTable from \"../PaginatedTable/ReactTable\";\r\nimport AppToast from \"../toast\";\r\nimport config from \"../config\";\r\nimport moment from \"moment\";\r\nimport {ExportToCsv} from 'export-to-csv';\r\n\r\nimport './SystemStats.css';\r\n\r\nclass SystemStats extends React.Component {  \r\n\r\n    data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: 'Alerts',\r\n            fill: false,\r\n            lineTension: 0,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: []\r\n          }\r\n        ],        \r\n    }\r\n\r\n    \r\n    options = {\r\n        scales: {\r\n            xAxes: [{\r\n                type: 'time',\r\n                time: {\r\n                    unit: 'day'\r\n                },\r\n                ticks: {\r\n                    fontColor: \"white\",\r\n                    fontSize: 14,\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(255, 255, 255, 0.2)'\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: \"white\",\r\n                    fontSize: 14,\r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(255, 255, 255, 0.2)'\r\n                }\r\n            }]\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: \"white\",\r\n                fontSize: 12\r\n            }\r\n        },\r\n        maintainAspectRatio: false\r\n    }\r\n\r\n    CSVoptions = {\r\n        showLabels: true,\r\n        useTextFile: false,\r\n        useBom: true,\r\n        //useKeysAsHeaders: true,\r\n        headers: ['Time UTC', 'Time', 'Description', 'Context', 'Type', 'Details', 'Priority', 'Category', 'ID', '-']\r\n    };\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            graphData: this.data,\r\n            statsList: [],\r\n            tableHeader: [{key: 'category', label: 'Category'},\r\n                        {key: 'priority', label: 'Priority'},\r\n                        {key: 'eventDateTime', label: 'Date'},\r\n                        {key: 'eventType', label: 'Type'},\r\n                        {key: 'eventDescription', label: 'Description'},\r\n                        {key: 'details', label: 'Details'}],\r\n            showToast: false\r\n        }\r\n    }\r\n\r\n    csvExporter = new ExportToCsv(this.CSVoptions);\r\n\r\n    incDataSetValues(datetime){\r\n        var date = new Date(datetime);\r\n            for (var i = 0; i < this.data.datasets[0].data.length; i++){\r\n                //var storedDate = this.playerData.datasets[0].data[i].y;\r\n                if (date.getTime() > this.data.datasets[0].data[i].x.getTime()){\r\n                    if (i == this.data.datasets[0].data.length - 1){\r\n                        this.data.datasets[0].data[i].y++;                    \r\n                    } else{\r\n                        if(date.getTime() < this.data.datasets[0].data[i + 1].x.getTime()){\r\n                            this.data.datasets[0].data[i].y++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    populateDataSet(queryStr, segments = 12){\r\n\r\n        var startStr = queryStr.substring(11, 31);\r\n        var endStr = queryStr.substring(40, 60);\r\n        var startMoment = moment(startStr);\r\n        var endMoment = moment(endStr);\r\n        var diffMS = endMoment.diff(startMoment);\r\n\r\n        var diffSegment = Math.ceil(diffMS/segments);\r\n        var ts = endMoment.valueOf();\r\n\r\n        this.data.datasets[0].data = [];\r\n        this.data.labels = [];\r\n\r\n        for(var i = 0; i < segments; i++){\r\n            var date = new Date(ts);\r\n\r\n            var dateData = {\r\n                x: date,\r\n                y: 0\r\n            }\r\n            \r\n            this.data.datasets[0].data.unshift(dateData);\r\n            this.data.labels.unshift(date);\r\n\r\n            ts = ts - (diffSegment);\r\n        }\r\n       }\r\n\r\n    onSearchClick = (categorySelected = '', queryDateRangeStart = '', queryDateRangeEnd = '', querySearchText = '') => {\r\n        var startDate = new Date(queryDateRangeStart);\r\n        const momentStartDate = moment(startDate).utc().format();\r\n        var endDate = new Date (queryDateRangeEnd);\r\n        endDate.setHours(23, 59, 59);        \r\n        const momentEndDate = moment(endDate).utc().format();\r\n\r\n        var query = `?startDate=${momentStartDate}&endDate=${momentEndDate}&category=${categorySelected}&searchText=${querySearchText}`;\r\n\r\n        this.fetchSystemDetails(query);\r\n    }\r\n\r\n    fetchSystemDetails(queryStr = ''){\r\n        if(queryStr == ''){\r\n            console.log('no query string passed');\r\n        } else {\r\n            \r\n            this.populateDataSet(queryStr, 12);\r\n            \r\n            let url = `${config.LOG_SERVER_BASE_URL}/v1/log/stats${queryStr}`;\r\n            fetch(url, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                    'Content-Type': 'application/json',\r\n                }\r\n                })\r\n                .then(response => response.json())\r\n                .then(res => {\r\n                    if (res.error) {\r\n                        console.log(res.error);\r\n                    } else {\r\n                        this.setSystemDetails(res);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({showError: true, errorMessage: error.toString()})\r\n                });\r\n        }\r\n    }\r\n\r\n    handleSelectClick = (event, id) => {\r\n        event.preventDefault();\r\n        this.navigateTo('/system/details', id);\r\n    }\r\n\r\n    navigateTo = (path, id) => {\r\n        if(id != ''){\r\n            this.props.history.push({pathname: path, state: { detail: id }});\r\n        }\r\n        else{\r\n            this.props.history.push(path);\r\n        }\r\n    }\r\n\r\n    setSystemDetails = (res) => {\r\n        var data = res.hits.hits;\r\n        data.forEach((hit) => {\r\n            this.incDataSetValues(hit._source.eventDateTimeUTC);\r\n        });\r\n\r\n        this.setState({'graphData': this.data});\r\n\r\n        const rows = Object.values(data).map(d => {\r\n            var temp = d._id;\r\n            d = d._source;\r\n            d._id = temp;\r\n            d.details = <a onClick={(e) => this.handleSelectClick(e, d._id)} href='' className='select-link'>Details</a>;\r\n\r\n            return d;\r\n        });\r\n        rows.forEach(element => element.eventDateTime = moment(element.eventDateTime).format());\r\n\r\n        this.setState({'statsList': rows});\r\n    }\r\n\r\n    componentDidMount() {\r\n        var data = null;\r\n\r\n        if (this.props.location.state == undefined){\r\n            this.props.history.push('/system/dashboard');\r\n        }\r\n        else\r\n        {\r\n            var query = this.props.location.state.detail;\r\n            this.fetchSystemDetails(query);\r\n        }\r\n    }\r\n\r\n    downloadClicked(data) {\r\n        //debugger;\r\n        //const {details, eventDateTime, tempData} = data;\r\n        this.csvExporter.generateCsv(data);\r\n    }\r\n\r\n    render() {\r\n        const {tableHeader, statsList, graphData, showToast} = this.state;        \r\n        const msg = 'No Results found.';\r\n        return(\r\n            <div className='system-stats'>\r\n                <div className='graph-container'>\r\n                    <Line data={graphData}\r\n                    options={this.options} redraw />\r\n                </div>\r\n                <div className='search-container'>\r\n                    <SystemSearch handleSearchClick={this.onSearchClick}/>\r\n                </div>\r\n                <div className='table-container'>\r\n                {\r\n                    tableHeader && statsList\r\n                        ? <ReactTable tableHeader={tableHeader} rowData={statsList} className='update-stats-table'/>\r\n                        : null\r\n                }\r\n                </div>\r\n                <div>\r\n                    <Button className='system-search-btn'\r\n                            onClick={() => this.downloadClicked(statsList)}>Export</Button>\r\n                </div>\r\n                {\r\n                    showToast ? <AppToast showToast={showToast} message={msg} isSuccessMessage={true}\r\n                                          handleClose={this.onToastClose}/> : null\r\n                }\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default SystemStats;"]},"metadata":{},"sourceType":"module"}