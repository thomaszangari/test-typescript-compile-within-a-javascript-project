{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\ReactExampleCode\\\\test-typescript-compile-within-a-javascript-project\\\\Code\\\\src\\\\roles\\\\rolemanagement.js\";\n\nimport React from \"react\";\nimport { Button, Col, Form, Modal } from \"react-bootstrap\";\nimport './rolemanagement.css';\nimport EditIcon from \"../components/Icons/editIcon\";\nimport AppTextbox from \"../AppTextbox/index\";\nimport dotenv from 'dotenv';\nimport config from \"../config\";\nimport PaginatedTable from \"../PaginatedTable\";\nimport { UserAction, UserActionCategory } from \"../UserActionCategory\";\nimport MyToast from \"../MyToast\";\nimport { inject } from \"mobx-react\";\nimport { checkRenderPermissions } from \"../helpers\";\nimport { permissions } from \"../constants\";\nimport ReactTable from \"../PaginatedTable/ReactTable\";\ndotenv.config();\nlet AddRole = (_dec = inject('playerStore', 'authStore'), _dec(_class = (_temp = class AddRole extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = (event, stateName) => {\n      this.props.onInputChange(stateName, event.target.value);\n    };\n  }\n\n  render() {\n    const {\n      roleId,\n      roleName,\n      policies,\n      isEditRole,\n      onCheckboxClick\n    } = this.props;\n    const tableHeader = [{\n      key: 'category',\n      label: 'Module',\n      width: '25%'\n    }, {\n      key: 'description',\n      label: 'Policy',\n      width: '30%'\n    }, {\n      key: 'allowed',\n      label: 'Allowed',\n      width: '25%'\n    }];\n    const rowData = policies.map(p => {\n      p.allowed = /*#__PURE__*/React.createElement(Form.Check, {\n        checked: p.isAllowed,\n        onClick: () => onCheckboxClick(p.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }\n      });\n      return p;\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(AppTextbox, {\n      controlId: \"formGroupRoleName\",\n      placeholder: \"Role Name\",\n      value: roleName,\n      onChange: e => this.handleInputChange(e, 'roleName'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(ReactTable, {\n      tableHeader: tableHeader,\n      rowData: rowData,\n      className: \"edit-role-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}, _temp)) || _class);\n\nclass RoleManagement extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchAllRoles = () => {\n      fetch(`${config.SERVER_BASE_URL}/v1/users/allroles`, {\n        method: 'get',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(res => {\n        this.setRoles(res);\n      }).catch(error => {\n        alert('Error:', error);\n      });\n    };\n\n    this.showAddUserModal = () => {\n      this.setState({\n        showModal: true,\n        isEditRole: false,\n        roleId: 0,\n        roleName: '',\n        policies: ''\n      });\n    };\n\n    this.onAddRoleClick = e => {\n      e.preventDefault();\n      const {\n        roleId,\n        roleName,\n        policies,\n        roleList,\n        isEditRole\n      } = this.state;\n      const policyIds = policies.filter(policy => policy.isAllowed).map(p => p.id);\n\n      if (isEditRole) {\n        const xhrData = {\n          roleid: roleId,\n          policyids: policyIds,\n          rolename: roleName\n        };\n        const data = localStorage.getItem('userName');\n        const url = `${config.SERVER_BASE_URL}/v1/roles/update`;\n        fetch(url, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(xhrData)\n        }).then(response => response.json()).then(res => {\n          this.setState({\n            isEditRole: false,\n            showModal: false,\n            roleName: '',\n            successMessage: res.message,\n            showSuccess: true\n          });\n        }).catch(error => {\n          this.setState({\n            errorMessage: error,\n            showError: true\n          });\n        });\n        fetch(`${config.SERVER_BASE_URL}/v1/users/querypolicies`, {\n          method: 'POST',\n          // or 'PUT'\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username: data\n          })\n        }).then(response => response.json()).then(res => {\n          if (res && res.error) {\n            this.setState({\n              errorMessage: res.error\n            });\n          } else {\n            localStorage.setItem('userpolicies', JSON.stringify(res));\n          }\n        }).catch(error => {\n          console.log(error);\n          this.setState({\n            errorMessage: error.toString()\n          });\n        });\n      } else {\n        const xhrData = {\n          policyids: policyIds,\n          rolename: roleName\n        };\n        const url = `${config.SERVER_BASE_URL}/v1/roles/create`;\n        fetch(url, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(xhrData)\n        }).then(res => {\n          this.setState({\n            policies: [],\n            isEditRole: false,\n            showModal: false,\n            roleName: ''\n          }, () => this.fetchAllRoles());\n        }).catch(error => {\n          alert('Error:', error);\n        });\n      }\n    };\n\n    this.onCancel = e => {\n      e.preventDefault();\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.onDelete = e => {\n      e.preventDefault();\n      this.setState({\n        showConfirmPopup: true\n      });\n    };\n\n    this.handleInputChange = (stateName, value) => {\n      this.setState({\n        [stateName]: value\n      });\n    };\n\n    this.handleRoleChange = role => {\n      this.setState({\n        roleId: role.roleId\n      });\n    };\n\n    this.handleEditRole = (roleId, roleName) => {\n      const url = `${config.SERVER_BASE_URL}/v1/users/getpoliciesbyroleid?roleid=${roleId}`;\n      fetch(url, {\n        method: 'get',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(res => {\n        this.setState({\n          policies: res,\n          isEditRole: true,\n          showModal: true,\n          roleName: roleName,\n          roleId: roleId\n        });\n      }).catch(error => {\n        this.setState({\n          errorMessage: error,\n          showError: true\n        });\n      });\n      this.props.playerStore.logAction(UserActionCategory.PAGE_VIEW, UserAction.EDIT_ROLE, roleName);\n    };\n\n    this.cancelDeleteRole = () => {\n      this.setState({\n        showConfirmPopup: false\n      });\n    };\n\n    this.deleteRole = () => {\n      const {\n        roleId\n      } = this.state; //Delete API call\n\n      const xhrData = {\n        roleid: roleId\n      };\n      const url = `${config.SERVER_BASE_URL}/v1/roles/delete`;\n      fetch(url, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(xhrData)\n      }).then(response => response.json()).then(res => {\n        if (res.error) {\n          this.setState({\n            isEditRole: false,\n            showModal: false,\n            roleName: '',\n            roleId: '',\n            showConfirmPopup: false,\n            errorMessage: res.error,\n            showError: true\n          });\n        } else {\n          this.setState({\n            successMessage: res.message,\n            showSuccess: true,\n            isEditRole: false,\n            showModal: false,\n            roleName: '',\n            roleId: '',\n            showConfirmPopup: false\n          }, () => this.fetchAllRoles());\n        }\n      }).catch(error => {\n        this.setState({\n          errorMessage: error,\n          showError: true\n        });\n      });\n    };\n\n    this.onCheckboxClick = policyId => {\n      let _policies = this.state.policies;\n\n      _policies.forEach(p => delete p.allowed);\n\n      _policies = JSON.parse(JSON.stringify(_policies)); // const roleId = this.state.roleId;\n      // const selectedRole = _rolesList.find(role => role.roleid === roleId);\n\n      const selectedPolicy = _policies.find(policy => policy.id === policyId);\n\n      selectedPolicy.isAllowed = !selectedPolicy.isAllowed;\n      this.setState({\n        policies: _policies\n      });\n    };\n\n    this.addRole = () => {\n      const url = `${config.SERVER_BASE_URL}/v1/users/allpolicies`;\n      fetch(url, {\n        method: 'get',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(res => {\n        res.forEach(p => p.isAllowed = false);\n        this.setState({\n          policies: res,\n          isEditRole: false,\n          showModal: true,\n          roleName: '',\n          roleId: ''\n        });\n      }).catch(error => {\n        this.setState({\n          errorMessage: error,\n          showError: true\n        });\n      });\n    };\n\n    this.getTableHeader = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"role-table-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 17\n        }\n      }, \"Role Management\"), checkRenderPermissions(permissions.CAN_ADD_ROLE, JSON.parse(localStorage.getItem('userpolicies'))) ? /*#__PURE__*/React.createElement(Button, {\n        variant: \"primary\",\n        onClick: this.addRole,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }\n      }, \"Add Role\") : null);\n    };\n\n    this.handleToastClose = stateName => {\n      this.setState({\n        [stateName]: false\n      });\n    };\n\n    this.state = {\n      roleList: [],\n      showModal: false,\n      selectedId: 0,\n      roleId: '',\n      roleName: '',\n      policies: [],\n      isEditRole: false,\n      showConfirmPopup: false,\n      tableHeader: [{\n        key: 'roleid',\n        label: 'Role ID'\n      }, {\n        key: 'rolename',\n        label: 'Role Name'\n      }],\n      showSuccess: false,\n      successMessage: '',\n      errorMessage: '',\n      showError: false\n    };\n  }\n\n  componentDidMount() {\n    // Call API to fetch roles\n    this.fetchAllRoles();\n  }\n\n  setRoles(response) {\n    const roles = response;\n\n    let _tableHeader = JSON.parse(JSON.stringify(this.state.tableHeader));\n\n    if (checkRenderPermissions(permissions.CAN_EDIT_ROLE, JSON.parse(localStorage.getItem('userpolicies')))) {\n      if (_tableHeader.findIndex(row => row.key === 'edit') === -1) {\n        _tableHeader.push({\n          key: 'edit',\n          label: 'Edit'\n        });\n      }\n\n      roles.forEach(role => role.edit = /*#__PURE__*/React.createElement(EditIcon, {\n        color: \"#FFFFFF\",\n        onclick: () => this.handleEditRole(role.roleid, role.rolename),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }));\n    }\n\n    this.setState({\n      roleList: roles,\n      tableHeader: _tableHeader\n    });\n  }\n\n  renderRoleManagement() {\n    const {\n      showModal,\n      roleId,\n      roleName,\n      policies,\n      roleList,\n      isEditRole,\n      showConfirmPopup,\n      tableHeader,\n      showSuccess,\n      successMessage,\n      errorMessage,\n      showError\n    } = this.state;\n    let isDisabled = true;\n    const isOneSelected = policies.findIndex(p => p.isAllowed);\n\n    if (!isEditRole && roleName.trim() && isOneSelected !== -1) {\n      isDisabled = false;\n    } else if (isEditRole && roleName.trim() && isOneSelected !== -1) {\n      isDisabled = false;\n    }\n\n    const customHeight = `${window.innerHeight - 162}px`;\n    const customStyle = {\n      height: customHeight\n    };\n\n    const _header = this.getTableHeader();\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"role-management app-center-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }\n    }, showSuccess ? /*#__PURE__*/React.createElement(MyToast, {\n      showToast: showSuccess,\n      message: successMessage,\n      isSuccessMessage: true,\n      handleClose: () => this.handleToastClose('showSuccess'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 27\n      }\n    }) : null, errorMessage && showError ? /*#__PURE__*/React.createElement(MyToast, {\n      showToast: showError,\n      message: errorMessage,\n      isSuccessMessage: false,\n      handleClose: () => this.handleToastClose('showError'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 27\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"role-management-child\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ReactTable, {\n      header: _header,\n      tableHeader: tableHeader,\n      rowData: roleList,\n      handleColumnCLick: this.handleEditRole,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Modal, {\n      size: \"lg\",\n      show: showModal,\n      className: `${showConfirmPopup ? 'hide-user-popup' : ''} role-modal`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 29\n      }\n    }, isEditRole ? 'Edit Role' : 'Add Role')), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(AddRole, {\n      roleName: roleName,\n      roleId: roleId,\n      policies: policies,\n      onInputChange: this.handleInputChange,\n      onRoleChange: this.handleRoleChange,\n      isEditRole: isEditRole,\n      onCheckboxClick: this.onCheckboxClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 25\n      }\n    }, checkRenderPermissions(permissions.CAN_DELETE_ROLE, JSON.parse(localStorage.getItem('userpolicies'))) && isEditRole ? /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      onClick: e => this.onDelete(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 33\n      }\n    }, \"Delete Role\") : null, /*#__PURE__*/React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: e => this.onCancel(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 29\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n      disabled: isDisabled,\n      variant: \"primary\",\n      onClick: e => this.onAddRoleClick(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 29\n      }\n    }, isEditRole ? 'Update' : 'Add Role'))), /*#__PURE__*/React.createElement(Modal, {\n      show: showConfirmPopup,\n      className: \"delete-popup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 29\n      }\n    }, \"Do you really want to delete\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 65\n      }\n    }), roleName, \" ?\")), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: e => this.cancelDeleteRole(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 29\n      }\n    }, \"No\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      onClick: e => this.deleteRole(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 29\n      }\n    }, \"Yes\")))));\n  }\n\n  render() {\n    let renderObj;\n\n    if (checkRenderPermissions(permissions.CAN_ACCESS_ROLE_MANAGEMENT, JSON.parse(localStorage.getItem('userpolicies')))) {\n      renderObj = this.renderRoleManagement();\n    } else {\n      renderObj = /*#__PURE__*/React.createElement(\"h1\", {\n        class: \"unauthorized-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 17\n        }\n      }, \"You do not have permission to view this page! Please contact your System Administrator!\");\n    }\n\n    return renderObj;\n  }\n\n}\n\nexport default RoleManagement;","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/ReactExampleCode/test-typescript-compile-within-a-javascript-project/Code/src/roles/rolemanagement.js"],"names":["React","Button","Col","Form","Modal","EditIcon","AppTextbox","dotenv","config","PaginatedTable","UserAction","UserActionCategory","MyToast","inject","checkRenderPermissions","permissions","ReactTable","AddRole","Component","constructor","props","handleInputChange","event","stateName","onInputChange","target","value","render","roleId","roleName","policies","isEditRole","onCheckboxClick","tableHeader","key","label","width","rowData","map","p","allowed","isAllowed","id","e","RoleManagement","fetchAllRoles","fetch","SERVER_BASE_URL","method","headers","localStorage","getItem","then","response","json","res","setRoles","catch","error","alert","showAddUserModal","setState","showModal","onAddRoleClick","preventDefault","roleList","state","policyIds","filter","policy","xhrData","roleid","policyids","rolename","data","url","body","JSON","stringify","successMessage","message","showSuccess","errorMessage","showError","username","setItem","console","log","toString","onCancel","onDelete","showConfirmPopup","handleRoleChange","role","handleEditRole","playerStore","logAction","PAGE_VIEW","EDIT_ROLE","cancelDeleteRole","deleteRole","policyId","_policies","forEach","parse","selectedPolicy","find","addRole","getTableHeader","CAN_ADD_ROLE","handleToastClose","selectedId","componentDidMount","roles","_tableHeader","CAN_EDIT_ROLE","findIndex","row","push","edit","renderRoleManagement","isDisabled","isOneSelected","trim","customHeight","window","innerHeight","customStyle","height","_header","CAN_DELETE_ROLE","renderObj","CAN_ACCESS_ROLE_MANAGEMENT"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {Button, Col, Form, Modal} from \"react-bootstrap\";\r\nimport './rolemanagement.css';\r\nimport EditIcon from \"../components/Icons/editIcon\";\r\nimport AppTextbox from \"../AppTextbox/index\"\r\nimport dotenv from 'dotenv'\r\nimport config from \"../config\";\r\nimport PaginatedTable from \"../PaginatedTable\";\r\nimport {UserAction, UserActionCategory} from \"../UserActionCategory\";\r\nimport MyToast from \"../MyToast\";\r\nimport {inject} from \"mobx-react\";\r\nimport {checkRenderPermissions} from \"../helpers\";\r\nimport {permissions} from \"../constants\";\r\nimport ReactTable from \"../PaginatedTable/ReactTable\";\r\n\r\ndotenv.config()\r\n\r\n@inject('playerStore', 'authStore')\r\nclass AddRole extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleInputChange = (event, stateName) => {\r\n        this.props.onInputChange(stateName, event.target.value)\r\n    }\r\n\r\n\r\n    render() {\r\n        const {roleId, roleName, policies, isEditRole, onCheckboxClick} = this.props;\r\n\r\n        const tableHeader = [\r\n            {key: 'category', label: 'Module', width: '25%'},\r\n            {key: 'description', label: 'Policy', width: '30%'},\r\n            {key: 'allowed', label: 'Allowed', width: '25%'}\r\n        ];\r\n        const rowData = policies.map(p => {\r\n            p.allowed = <Form.Check checked={p.isAllowed} onClick={() => onCheckboxClick(p.id)}/>\r\n            return p;\r\n        });\r\n\r\n        return (\r\n            <div className='container'>\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col>\r\n                            <AppTextbox controlId='formGroupRoleName'\r\n                                        placeholder='Role Name'\r\n                                        value={roleName}\r\n                                        onChange={(e) => this.handleInputChange(e, 'roleName')}\r\n                            />\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <ReactTable tableHeader={tableHeader} rowData={rowData} className='edit-role-table'/>\r\n                </Form>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nclass RoleManagement extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roleList: [],\r\n            showModal: false,\r\n            selectedId: 0,\r\n            roleId: '',\r\n            roleName: '',\r\n            policies: [],\r\n            isEditRole: false,\r\n            showConfirmPopup: false,\r\n            tableHeader: [\r\n                {key: 'roleid', label: 'Role ID'},\r\n                {key: 'rolename', label: 'Role Name'}\r\n            ],\r\n            showSuccess: false,\r\n            successMessage: '',\r\n            errorMessage: '',\r\n            showError: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // Call API to fetch roles\r\n        this.fetchAllRoles();\r\n    }\r\n\r\n    fetchAllRoles = () => {\r\n        fetch(`${config.SERVER_BASE_URL}/v1/users/allroles`, {\r\n            method: 'get',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                this.setRoles(res);\r\n            })\r\n            .catch((error) => {\r\n                alert('Error:', error);\r\n            });\r\n    }\r\n\r\n    setRoles(response) {\r\n        const roles = response;\r\n\r\n        let _tableHeader = JSON.parse(JSON.stringify(this.state.tableHeader));\r\n\r\n        if (checkRenderPermissions(permissions.CAN_EDIT_ROLE, JSON.parse(localStorage.getItem('userpolicies')))) {\r\n            if (_tableHeader.findIndex(row => row.key === 'edit') === -1) {\r\n                _tableHeader.push({key: 'edit', label: 'Edit'});\r\n            }\r\n            roles.forEach(role => role.edit =\r\n                <EditIcon color='#FFFFFF' onclick={() => this.handleEditRole(role.roleid, role.rolename)}/>)\r\n        }\r\n\r\n        this.setState({roleList: roles, tableHeader: _tableHeader});\r\n    }\r\n\r\n\r\n    showAddUserModal = () => {\r\n        this.setState({\r\n            showModal: true,\r\n            isEditRole: false,\r\n            roleId: 0,\r\n            roleName: '',\r\n            policies: '',\r\n        });\r\n    }\r\n\r\n    onAddRoleClick = (e) => {\r\n        e.preventDefault();\r\n        const {roleId, roleName, policies, roleList, isEditRole} = this.state;\r\n        const policyIds = policies.filter(policy => policy.isAllowed).map(p => p.id);\r\n        if (isEditRole) {\r\n            const xhrData = {roleid: roleId, policyids: policyIds, rolename: roleName};\r\n            const data = localStorage.getItem('userName');\r\n\r\n            const url = `${config.SERVER_BASE_URL}/v1/roles/update`;\r\n            fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(xhrData),\r\n            })\r\n                .then(response => response.json())\r\n                .then(res => {\r\n                    this.setState({\r\n                        isEditRole: false,\r\n                        showModal: false,\r\n                        roleName: '',\r\n                        successMessage: res.message,\r\n                        showSuccess: true\r\n                    })\r\n                })\r\n                .catch((error) => {\r\n                    this.setState({errorMessage: error, showError: true})\r\n                });\r\n\r\n            fetch(`${config.SERVER_BASE_URL}/v1/users/querypolicies`, {\r\n                method: 'POST', // or 'PUT'\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({username: data}),\r\n            })\r\n                .then(response => response.json())\r\n                .then(res => {\r\n                    if (res && res.error) {\r\n                        this.setState({errorMessage: res.error});\r\n                    } else {\r\n                        localStorage.setItem('userpolicies', JSON.stringify(res));\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                    this.setState({errorMessage: error.toString()});\r\n                });\r\n        } else {\r\n            const xhrData = {policyids: policyIds, rolename: roleName};\r\n            const url = `${config.SERVER_BASE_URL}/v1/roles/create`;\r\n            fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(xhrData),\r\n            })\r\n                .then(res => {\r\n                    this.setState({\r\n                        policies: [],\r\n                        isEditRole: false,\r\n                        showModal: false,\r\n                        roleName: ''\r\n                    }, () => this.fetchAllRoles())\r\n                })\r\n                .catch((error) => {\r\n                    alert('Error:', error);\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    onCancel = (e) => {\r\n        e.preventDefault();\r\n        this.setState({showModal: false});\r\n    }\r\n\r\n    onDelete = (e) => {\r\n        e.preventDefault();\r\n        this.setState({showConfirmPopup: true});\r\n    }\r\n\r\n    handleInputChange = (stateName, value) => {\r\n        this.setState({[stateName]: value});\r\n    }\r\n    handleRoleChange = (role) => {\r\n        this.setState({roleId: role.roleId})\r\n    }\r\n    handleEditRole = (roleId, roleName) => {\r\n        const url = `${config.SERVER_BASE_URL}/v1/users/getpoliciesbyroleid?roleid=${roleId}`;\r\n        fetch(url, {\r\n            method: 'get',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                this.setState({policies: res, isEditRole: true, showModal: true, roleName: roleName, roleId: roleId})\r\n            })\r\n            .catch((error) => {\r\n                this.setState({errorMessage: error, showError: true})\r\n            });\r\n        this.props.playerStore.logAction(UserActionCategory.PAGE_VIEW, UserAction.EDIT_ROLE, roleName);\r\n    }\r\n    cancelDeleteRole = () => {\r\n        this.setState({showConfirmPopup: false});\r\n    }\r\n    deleteRole = () => {\r\n        const {roleId} = this.state;\r\n        //Delete API call\r\n\r\n        const xhrData = {roleid: roleId};\r\n\r\n        const url = `${config.SERVER_BASE_URL}/v1/roles/delete`;\r\n        fetch(url, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(xhrData),\r\n        })\r\n            .then(response => response.json())\r\n            .then((res) => {\r\n                if (res.error) {\r\n                    this.setState({\r\n                        isEditRole: false, showModal: false, roleName: '', roleId: '', showConfirmPopup: false,\r\n                        errorMessage: res.error, showError: true\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        successMessage: res.message, showSuccess: true,\r\n                        isEditRole: false, showModal: false, roleName: '', roleId: '', showConfirmPopup: false\r\n                    }, () => this.fetchAllRoles());\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                this.setState({errorMessage: error, showError: true})\r\n            });\r\n\r\n    }\r\n\r\n    onCheckboxClick = policyId => {\r\n        let _policies = this.state.policies;\r\n        _policies.forEach(p => delete p.allowed);\r\n        _policies = JSON.parse(JSON.stringify(_policies));\r\n        // const roleId = this.state.roleId;\r\n        // const selectedRole = _rolesList.find(role => role.roleid === roleId);\r\n        const selectedPolicy = _policies.find(policy => policy.id === policyId);\r\n        selectedPolicy.isAllowed = !selectedPolicy.isAllowed;\r\n        this.setState({policies: _policies});\r\n    }\r\n    addRole = () => {\r\n        const url = `${config.SERVER_BASE_URL}/v1/users/allpolicies`;\r\n        fetch(url, {\r\n            method: 'get',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                res.forEach(p => p.isAllowed = false);\r\n                this.setState({policies: res, isEditRole: false, showModal: true, roleName: '', roleId: ''})\r\n            })\r\n            .catch((error) => {\r\n                this.setState({errorMessage: error, showError: true})\r\n            });\r\n    }\r\n    getTableHeader = () => {\r\n        return (\r\n            <div className='role-table-header'>\r\n                <div>Role Management</div>\r\n                {checkRenderPermissions(permissions.CAN_ADD_ROLE, JSON.parse(localStorage.getItem('userpolicies'))) ?\r\n                    <Button variant='primary' onClick={this.addRole}>Add Role</Button> : null}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleToastClose = (stateName) => {\r\n        this.setState({[stateName]: false})\r\n    }\r\n\r\n    renderRoleManagement() {\r\n\r\n        const {showModal, roleId, roleName, policies, roleList, isEditRole, showConfirmPopup, tableHeader, showSuccess, successMessage, errorMessage, showError} = this.state;\r\n        let isDisabled = true;\r\n        const isOneSelected = policies.findIndex(p => p.isAllowed);\r\n        if (!isEditRole && roleName.trim() && isOneSelected !== -1) {\r\n            isDisabled = false;\r\n        } else if (isEditRole && roleName.trim() && isOneSelected !== -1) {\r\n            isDisabled = false;\r\n        }\r\n\r\n        const customHeight = `${window.innerHeight - 162}px`;\r\n        const customStyle = {height: customHeight}\r\n\r\n        const _header = this.getTableHeader();\r\n        return (\r\n\r\n            <div className='role-management app-center-body'>\r\n                {\r\n                    showSuccess\r\n                        ? <MyToast showToast={showSuccess} message={successMessage} isSuccessMessage={true}\r\n                                   handleClose={() => this.handleToastClose('showSuccess')}/>\r\n                        : null\r\n                }\r\n                {\r\n                    errorMessage && showError\r\n                        ? <MyToast showToast={showError} message={errorMessage} isSuccessMessage={false}\r\n                                   handleClose={() => this.handleToastClose('showError')}/>\r\n                        : null\r\n                }\r\n                <div className='role-management-child'>\r\n                    <ReactTable header={_header} tableHeader={tableHeader} rowData={roleList}\r\n                                handleColumnCLick={this.handleEditRole}/>\r\n                    <Modal size='lg' show={showModal} className={`${showConfirmPopup ? 'hide-user-popup' : ''} role-modal`}>\r\n                        <Modal.Header>\r\n                            <h5>{isEditRole ? 'Edit Role' : 'Add Role'}</h5>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <AddRole\r\n                                roleName={roleName}\r\n                                roleId={roleId}\r\n                                policies={policies}\r\n                                onInputChange={this.handleInputChange}\r\n                                onRoleChange={this.handleRoleChange}\r\n                                isEditRole={isEditRole}\r\n                                onCheckboxClick={this.onCheckboxClick}\r\n                            />\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            {checkRenderPermissions(permissions.CAN_DELETE_ROLE, JSON.parse(localStorage.getItem('userpolicies'))) && isEditRole ?\r\n                                <Button variant='danger' onClick={(e) => this.onDelete(e)}>Delete Role</Button> : null}\r\n                            <Button variant='secondary' onClick={(e) => this.onCancel(e)}>Cancel</Button>\r\n                            <Button disabled={isDisabled} variant='primary' onClick={(e) => this.onAddRoleClick(e)}>\r\n                                {isEditRole ? 'Update' : 'Add Role'}\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n\r\n                    <Modal show={showConfirmPopup} className='delete-popup'>\r\n                        <Modal.Header>\r\n                            <strong>Do you really want to delete<br/>{roleName} ?</strong>\r\n                        </Modal.Header>\r\n                        <Modal.Footer>\r\n                            <Button variant='secondary' onClick={(e) => this.cancelDeleteRole(e)}>No</Button>\r\n                            <Button variant='danger' onClick={(e) => this.deleteRole(e)}>Yes</Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let renderObj;\r\n\r\n        if (checkRenderPermissions(permissions.CAN_ACCESS_ROLE_MANAGEMENT, JSON.parse(localStorage.getItem('userpolicies')))) {\r\n            renderObj = this.renderRoleManagement();\r\n        } else {\r\n            renderObj =\r\n                <h1 class='unauthorized-header'>You do not have permission to view this page! Please contact your System\r\n                    Administrator!</h1>\r\n        }\r\n\r\n        return (\r\n            renderObj\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default RoleManagement;"]},"metadata":{},"sourceType":"module"}