{"ast":null,"code":"const axios = require('axios');\n\nimport data from './__test__/test_data.json';\n\nconst makeHttpCall = async options => {\n  if (process.env.NODE_ENV === 'development') return data;\n\n  try {\n    let source = {\n      headers: {\n        'X-API-Key': process.env.REACT_APP_BACK_END_GET_DOCUMENT_IMAGE_X_API_KEY\n      }\n    };\n    options = Object.assign(options, source);\n    let response = await axios(options);\n    return response.data;\n  } catch (e) {\n    throw new Error(e);\n  }\n};\n\nexport const getData = async (playerId, setDocumentData) => {\n  const options = {\n    method: 'get',\n    url: process.env.REACT_APP_BACK_END_GET_DOCUMENT_IMAGE + '/document/' + playerId\n  };\n\n  try {\n    const data = await makeHttpCall(options);\n\n    if (data.url === undefined) {\n      alert(`Player ${playerId} not fount`);\n      return;\n    }\n\n    setDocumentData(data);\n  } catch (e) {\n    alert(e);\n  }\n};\nexport const getImageType = (e, setIndex) => {\n  setIndex(e.target.value.split(\" \")[1]);\n};\nexport const getDocumentType = async (event, setDocumentType, uploadId, documentData, setDocumentData) => {\n  const options = {\n    method: 'put',\n    url: process.env.REACT_APP_BACK_END_GET_DOCUMENT_IMAGE + '/document/' + uploadId,\n    data: {\n      type: event.target.value\n    }\n  };\n\n  try {\n    const data = await makeHttpCall(options);\n    setDocumentData(documentData.map(element => {\n      if (element.uploadId === uploadId) element.documentType = event.target.value;\n      return element;\n    }));\n    setDocumentType(event.target.value);\n  } catch (e) {\n    alert(e);\n  }\n};\nexport const toggleHideShow = async (setToggle, toggle) => {\n  setToggle(!toggle);\n};\nexport const deleteImage = uploadId => {\n  if (uploadId === \"\") {\n    alert('Upload id is empty');\n    return;\n  }\n\n  const options = {\n    method: 'delete',\n    url: process.env.REACT_APP_BACK_END_GET_DOCUMENT_IMAGE + '/document/' + uploadId\n  };\n\n  try {\n    alert(makeHttpCall(options).message);\n  } catch (e) {\n    alert(e);\n  }\n};","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/Capstone/lottery/mslc-backoffice-client/v1/Code/src/components/DisplayDocument/functions.js"],"names":["axios","require","data","makeHttpCall","options","process","env","NODE_ENV","source","headers","REACT_APP_BACK_END_GET_DOCUMENT_IMAGE_X_API_KEY","Object","assign","response","e","Error","getData","playerId","setDocumentData","method","url","REACT_APP_BACK_END_GET_DOCUMENT_IMAGE","undefined","alert","getImageType","setIndex","target","value","split","getDocumentType","event","setDocumentType","uploadId","documentData","type","map","element","documentType","toggleHideShow","setToggle","toggle","deleteImage","message"],"mappings":"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","sourcesContent":["const axios = require('axios');\r\nimport data from './__test__/test_data.json';\r\n\r\nconst makeHttpCall = async (options) => {\r\n\r\n\r\n    if(process.env.NODE_ENV === 'development')\r\n         return data;\r\n    try {\r\n        let source ={\r\n            headers: {'X-API-Key': process.env.REACT_APP_BACK_END_GET_DOCUMENT_IMAGE_X_API_KEY}\r\n        }\r\n        options = Object.assign(options, source)\r\n        let response = await axios(options);\r\n        return  response.data;\r\n    }\r\n    catch (e) {\r\n        throw new Error(e);\r\n    }\r\n}\r\n\r\nexport const getData = async ( playerId , setDocumentData ) => {\r\n    \r\n    const options =\r\n    {\r\n        method: 'get',\r\n        url: process.env.REACT_APP_BACK_END_GET_DOCUMENT_IMAGE+'/document/'+ playerId\r\n    }\r\n\r\n    try\r\n    {\r\n        const data = await makeHttpCall(options);\r\n        \r\n        if(data.url === undefined)\r\n        {\r\n            alert(`Player ${playerId} not fount`);\r\n            return;\r\n        }        \r\n        setDocumentData(data);              \r\n    } \r\n    catch(e){\r\n        alert(e);\r\n    }\r\n\r\n}\r\nexport  const getImageType = ( e , setIndex ) =>{\r\n\r\n    setIndex(e.target.value.split(\" \")[1]);\r\n\r\n}\r\nexport const getDocumentType = async (event, setDocumentType,uploadId,documentData, setDocumentData) => {\r\n    \r\n    const options =\r\n    {\r\n        method: 'put',\r\n        url: process.env.REACT_APP_BACK_END_GET_DOCUMENT_IMAGE+'/document/'+ uploadId,\r\n        data: {\r\n             type: event.target.value\r\n          }\r\n    }\r\n\r\n    try\r\n    {\r\n        const data = await makeHttpCall(options);\r\n        \r\n        setDocumentData(documentData.map(element => {\r\n            if(element.uploadId === uploadId)\r\n                element.documentType = event.target.value;   \r\n            return element;\r\n        }));\r\n\r\n        setDocumentType(event.target.value);       \r\n                     \r\n    } \r\n    catch(e){\r\n        alert(e);\r\n    }\r\n\r\n}\r\n\r\nexport const toggleHideShow = async ( setToggle, toggle) => {\r\n   \r\n    setToggle(!toggle);\r\n    \r\n}\r\n\r\nexport const deleteImage = (uploadId) => {\r\n\r\n    if(uploadId === \"\")\r\n    {\r\n        alert('Upload id is empty');\r\n        return;\r\n    }\r\n    const options =\r\n    {\r\n        method: 'delete',\r\n        url: process.env.REACT_APP_BACK_END_GET_DOCUMENT_IMAGE+'/document/'+ uploadId\r\n    }\r\n\r\n    try\r\n    { \r\n       alert(makeHttpCall(options).message);\r\n    }catch(e){\r\n        alert(e);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}