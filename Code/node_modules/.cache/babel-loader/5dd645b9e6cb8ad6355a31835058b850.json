{"ast":null,"code":"var _dec,\n    _class,\n    _temp,\n    _jsxFileName = \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\src\\\\components\\\\login\\\\MFA\\\\MFA.js\";\n\nimport React from 'react';\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\nimport dotenv from 'dotenv';\nimport \"./MFA.css\";\nimport { inject, observer } from \"mobx-react\";\nimport { Link } from \"react-router-dom\";\ndotenv.config();\nlet MFA = (_dec = inject('authStore'), _dec(_class = observer(_class = (_temp = class MFA extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateForm = () => {\n      return this.state.TOTP.length == 6;\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        TOTP\n      } = this.state;\n      this.props.authStore.loginWithTOTP(TOTP, this.props);\n    };\n\n    this.ResendOTP = () => {\n      this.props.authStore.requestOTP();\n    };\n\n    this.handleInputChange = (value, stateName) => {\n      const re = /^[0-9\\b]+$/; // if value is not blank, then test the regex\n\n      if (value === '' || re.test(value)) {\n        this.setState({\n          [stateName]: value\n        });\n      }\n    };\n\n    this.state = {\n      TOTP: \"\"\n    };\n  }\n\n  render() {\n    const {\n      TOTP\n    } = this.state;\n    const {\n      otpAuthErrorMessage\n    } = this.props.authStore;\n    const isValidate = this.validateForm();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: \"/images/lottery_numbers_blue.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formBasicEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      placeholder: \"One-Time Passcode\",\n      maxLength: \"6\",\n      autoFocus: true,\n      value: TOTP,\n      onChange: e => this.handleInputChange(e.target.value, 'TOTP'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }\n    }), otpAuthErrorMessage ? /*#__PURE__*/React.createElement(Form.Text, {\n      className: \"app-error-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 52\n      }\n    }, otpAuthErrorMessage) : null), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      block: true,\n      bsSize: \"large\",\n      onClick: () => this.ResendOTP(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 33\n      }\n    }, \"Resend OTP\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      block: true,\n      bsSize: \"large\",\n      type: \"submit\",\n      disabled: !isValidate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }\n    }, \"Verify\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"back-to-login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      className: \"link-color\",\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, \"Back to Login Page\")))));\n  }\n\n}, _temp)) || _class) || _class);\nexport default MFA;","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/Capstone/lottery/mslc-backoffice-client/v1/Code/src/components/login/MFA/MFA.js"],"names":["React","Button","Col","Form","Row","dotenv","inject","observer","Link","config","MFA","Component","constructor","props","validateForm","state","TOTP","length","handleSubmit","event","preventDefault","authStore","loginWithTOTP","ResendOTP","requestOTP","handleInputChange","value","stateName","re","test","setState","render","otpAuthErrorMessage","isValidate","e","target"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\r\nimport dotenv from 'dotenv'\r\nimport \"./MFA.css\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ndotenv.config()\r\n\r\n@inject('authStore')\r\n@observer\r\nclass MFA extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {TOTP: \"\"};\r\n    }\r\n\r\n    validateForm = () => {\r\n        return this.state.TOTP.length == 6;\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const {TOTP} = this.state;\r\n        this.props.authStore.loginWithTOTP(TOTP, this.props)\r\n    }\r\n\r\n    ResendOTP = () => {\r\n        this.props.authStore.requestOTP();\r\n    }\r\n\r\n    handleInputChange = (value, stateName) => {\r\n\r\n        const re = /^[0-9\\b]+$/;\r\n\r\n        // if value is not blank, then test the regex\r\n        if (value === '' || re.test(value)) {\r\n            this.setState({[stateName]: value});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {TOTP} = this.state;\r\n        const {otpAuthErrorMessage} = this.props.authStore;\r\n        const isValidate = this.validateForm();\r\n        return (\r\n            <div className=\"login App-header\">\r\n                <div className='login-panel'>\r\n                    <img src='/images/lottery_numbers_blue.png'/>\r\n\r\n                    <Form onSubmit={this.handleSubmit} className='login-form'>\r\n\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Control\r\n                                placeholder=\"One-Time Passcode\"\r\n                                maxLength='6'\r\n                                autoFocus\r\n                                value={TOTP}\r\n                                onChange={e => this.handleInputChange(e.target.value, 'TOTP')}\r\n                            />\r\n                            {otpAuthErrorMessage ? <Form.Text className=\"app-error-message\">{otpAuthErrorMessage}</Form.Text> : null}\r\n                        </Form.Group>\r\n                        <Row>\r\n                            <Col>\r\n                                <Button block bsSize=\"large\" onClick={() => this.ResendOTP()}>\r\n                                    Resend OTP\r\n                                </Button>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button block bsSize=\"large\" type=\"submit\" disabled={!isValidate}>\r\n                                    Verify\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Form>\r\n                    <div className=\"back-to-login\">\r\n                        <div>\r\n                            <Link className=\"link-color\" to=\"/login\">Back to Login Page</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MFA;\r\n"]},"metadata":{},"sourceType":"module"}