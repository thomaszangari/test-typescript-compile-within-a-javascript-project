{"ast":null,"code":"import _initializerDefineProperty from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\Capstone\\\\lottery\\\\mslc-backoffice-client\\\\v1\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _descriptor53, _descriptor54, _descriptor55, _descriptor56, _descriptor57, _descriptor58, _descriptor59, _temp;\n\nimport React from \"react\";\nimport { action, observable } from 'mobx';\nimport config from \"../config\";\nimport { UserAction, UserActionCategory } from \"../UserActionCategory\";\nimport moment from \"moment\";\nimport { toJS } from \"mobx\";\nimport { timeOfDayFormat } from \"../constants.js\";\nexport let PlayerStore = (_class = (_temp = class PlayerStore {\n  // Back-office user audit\n  //\n  // Auth Layout\n  // Player Hub\n  // Claims\n  //  Spinner State\n  setToastErrorSuccessMessage(toggle) {\n    this.toggle = toggle;\n  }\n\n  setToastErrorSuccessMessage(showToast, errorMessage, successMessage) {\n    this.showMainToast = showToast;\n    this.mainErrorMessage = errorMessage;\n    this.mainSuccessMessage = successMessage;\n  }\n\n  constructor(rootStore) {\n    this.rootStore = null;\n    this.authStore = null;\n\n    _initializerDefineProperty(this, \"isLoading\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"showToast\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"selectedPlayerDetails\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"selectedPlayerID\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"tableHeader\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"tableRows\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"ticketHistoryTableHeader\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"ticketHistoryTableRows\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"eventHistoryTableHeader\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"eventHistoryTableRows\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"errorMessage\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"successMessage\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"titleText\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"showUpdateModal\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"showConfirmEmailModal\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"showPlayerVerifyModal\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"showPlayerLockUnlockModal\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"showPlayerEnableDisableModal\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"showFrequentCasherConfirmModal\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"selectedBackofficeUserID\", _descriptor20, this);\n\n    _initializerDefineProperty(this, \"selectedBackofficeUserFullName\", _descriptor21, this);\n\n    _initializerDefineProperty(this, \"selectedBackofficeUserName\", _descriptor22, this);\n\n    _initializerDefineProperty(this, \"AuditActionsTableHeader\", _descriptor23, this);\n\n    _initializerDefineProperty(this, \"AuditActionsTableRows\", _descriptor24, this);\n\n    _initializerDefineProperty(this, \"UserNameTitleText\", _descriptor25, this);\n\n    _initializerDefineProperty(this, \"loggedInUserID\", _descriptor26, this);\n\n    _initializerDefineProperty(this, \"showTicketHistoryToast\", _descriptor27, this);\n\n    _initializerDefineProperty(this, \"TicketHistoryAPIResult\", _descriptor28, this);\n\n    _initializerDefineProperty(this, \"TicketHistoryFilteredResult\", _descriptor29, this);\n\n    _initializerDefineProperty(this, \"selectedGameType\", _descriptor30, this);\n\n    _initializerDefineProperty(this, \"allGameTypes\", _descriptor31, this);\n\n    _initializerDefineProperty(this, \"selectedWinStatus\", _descriptor32, this);\n\n    _initializerDefineProperty(this, \"allWinStatuses\", _descriptor33, this);\n\n    _initializerDefineProperty(this, \"selectedStatus\", _descriptor34, this);\n\n    _initializerDefineProperty(this, \"allStatuses\", _descriptor35, this);\n\n    _initializerDefineProperty(this, \"isTicketHistoryInSearchMode\", _descriptor36, this);\n\n    _initializerDefineProperty(this, \"showEventHistoryToast\", _descriptor37, this);\n\n    _initializerDefineProperty(this, \"isEventHistoryInSearchMode\", _descriptor38, this);\n\n    _initializerDefineProperty(this, \"EventHistoryAPIResult\", _descriptor39, this);\n\n    _initializerDefineProperty(this, \"EventHistoryFilteredResult\", _descriptor40, this);\n\n    _initializerDefineProperty(this, \"selectedDeviceType\", _descriptor41, this);\n\n    _initializerDefineProperty(this, \"allDeviceTypes\", _descriptor42, this);\n\n    _initializerDefineProperty(this, \"selectedEvent\", _descriptor43, this);\n\n    _initializerDefineProperty(this, \"allEvents\", _descriptor44, this);\n\n    _initializerDefineProperty(this, \"showMainToast\", _descriptor45, this);\n\n    _initializerDefineProperty(this, \"mainErrorMessage\", _descriptor46, this);\n\n    _initializerDefineProperty(this, \"mainSuccessMessage\", _descriptor47, this);\n\n    _initializerDefineProperty(this, \"playerHubNavigateToFirstTab\", _descriptor48, this);\n\n    _initializerDefineProperty(this, \"claimHistoryTableHeader\", _descriptor49, this);\n\n    _initializerDefineProperty(this, \"claimHistoryTableRows\", _descriptor50, this);\n\n    _initializerDefineProperty(this, \"selectedClaimId\", _descriptor51, this);\n\n    _initializerDefineProperty(this, \"selectedClaimStatus\", _descriptor52, this);\n\n    _initializerDefineProperty(this, \"claimDetails\", _descriptor53, this);\n\n    _initializerDefineProperty(this, \"paymentHistoryData\", _descriptor54, this);\n\n    _initializerDefineProperty(this, \"paymentDetails\", _descriptor55, this);\n\n    _initializerDefineProperty(this, \"eSignatureURL\", _descriptor56, this);\n\n    _initializerDefineProperty(this, \"selectedTabKey\", _descriptor57, this);\n\n    _initializerDefineProperty(this, \"isSpinnerLoading\", _descriptor58, this);\n\n    _initializerDefineProperty(this, \"toggle\", _descriptor59, this);\n\n    this.rootStore = rootStore;\n    this.authStore = this.rootStore.authStore;\n  }\n\n  clear() {\n    this.isLoading = false;\n  }\n\n  clearPlayerSearchResults() {\n    this.tableHeader = null;\n    this.tableRows = null;\n  }\n\n  clearTicketHistorySearchResults() {\n    this.selectedGameType = 'All';\n    this.selectedWinStatus = 'All';\n    this.selectedStatus = 'All';\n    this.ticketHistoryTableHeader = null;\n    this.ticketHistoryTableRows = null;\n  }\n\n  clearEventHistorySearchResults() {\n    this.selectedDeviceType = 'All';\n    this.selectedEvent = 'All';\n    this.eventHistoryTableHeader = null;\n    this.eventHistoryTableRows = null;\n  }\n\n  clearUserAuditActionSearchResults() {\n    this.AuditActionsTableHeader = null;\n    this.AuditActionsTableRows = null;\n  }\n\n  updateUserDetails(value, param) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity,\n      account\n    } = _selectedPlayerDetails;\n    identity[param] = value;\n    this.selectedPlayerDetails = _selectedPlayerDetails;\n  }\n\n  updateUserEmail(value, param) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      account\n    } = _selectedPlayerDetails;\n    account[param] = value;\n    this.selectedPlayerDetails = _selectedPlayerDetails;\n  }\n\n  updatePlayerDateOfBirth(newDateOfBirth) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    identity['dateOfBirth'] = newDateOfBirth;\n    this.selectedPlayerDetails = _selectedPlayerDetails;\n  } // API call to fetch player details\n\n\n  getPlayerDetails(playerId = '') {\n    const id = playerId || this.selectedPlayerID;\n    this.isSpinnerLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/player/${id}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      this.isSpinnerLoading = false;\n\n      if (playerId) {\n        if (res && res.message) {\n          this.setToastErrorSuccessMessage(true, res.message, null);\n        } else {\n          const row = res.identity || {};\n\n          if (!res.identity) {\n            row.firstName = '';\n            row.lastName = '';\n            row.address = '';\n          }\n\n          row.playerId = res.account && res.account.id ? res.account.id : '';\n          row.email = res.account && res.account.email ? res.account.email : '';\n          this.tableHeader = [{\n            key: 'email',\n            label: 'Email'\n          }, {\n            key: 'firstName',\n            label: 'First Name'\n          }, {\n            key: 'lastName',\n            label: 'Last Name'\n          }, {\n            key: 'address',\n            label: 'Address',\n            width: '30%'\n          }, {\n            key: 'select',\n            label: 'Select'\n          }];\n          this.tableRows = [row];\n        }\n      } else {\n        if (res && res.error) {\n          this.errorMessage = res.error;\n        } else {\n          if (!res.hasOwnProperty('identity') || !res.identity) {\n            res.identity = {\n              \"id\": '',\n              \"playerId\": res.account && res.account.id ? res.account.id : '',\n              \"identityFingerprint\": \"\",\n              \"firstName\": \"\",\n              \"lastName\": \"\",\n              \"gender\": \"\",\n              \"ssn\": \"\",\n              \"dateOfBirth\": \"\",\n              \"address1\": \"\",\n              \"address2\": \"\",\n              \"city\": \"\",\n              \"state\": \"\",\n              \"zip5\": \"\",\n              \"phone\": \"\",\n              \"acceptedEmailCommunication\": false,\n              \"acceptedSmsCommunication\": false,\n              \"termsAcceptedDate\": \"\",\n              \"activeFrom\": \"\",\n              \"activeTo\": null,\n              \"identityCheckResult\": \"\",\n              \"identityCheckSource\": \"\",\n              \"identityCheckNotes\": \"\",\n              \"identitySource\": \"\",\n              \"identityCheckRequestId\": \"\",\n              \"identityServiceTermsAcceptedDate\": \"\",\n              \"status\": \"\"\n            };\n          }\n\n          res.identity.phone = res.identity.phone.substring(2);\n          res.identity.dateOfBirth = res.identity.dateOfBirth ? moment(res.identity.dateOfBirth).format('MM/DD/YYYY') : '';\n          this.selectedPlayerDetails = res;\n        }\n      }\n    }).catch(error => {\n      this.isSpinnerLoading = false;\n      this.errorMessage = error.toString();\n    });\n  }\n\n  searchPlayers(queryParams) {\n    this.isLoading = true;\n    this.isSpinnerLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/player/search${queryParams}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res && res.data) {\n        this.setPlayerData(res.data);\n        const errorMessage = res.data.length <= 0 ? 'No Results Matching Criteria Have Been Found' : null;\n        const showToast = res.data.length <= 0 ? true : false;\n        this.setToastErrorSuccessMessage(showToast, null, errorMessage);\n      } else if (res && res.error) {\n        this.setPlayerData(res.data);\n        const errorMessage = res.error;\n        const showToast = true;\n        this.setToastErrorSuccessMessage(showToast, errorMessage, null);\n      }\n\n      this.isSpinnerLoading = false;\n    }).catch(error => {\n      this.errorMessage = error.toString();\n      this.isSpinnerLoading = false; // this.setState({errorMessage: error.toString()});\n    });\n  }\n\n  setTicketHistorySearchMode(flag) {\n    this.isTicketHistoryInSearchMode = flag;\n  } // API call to fetch tickets associated with a player\n\n\n  searchTickets(queryParams) {\n    const id = this.selectedPlayerID;\n    this.isLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/player/${id}/ticket-scanner-events${queryParams}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error; //this.showResetPasswordModal = false;\n        //this.showTicketHistoryToast = true;\n\n        this.showToast = true;\n      } else if (res && res.data) {\n        if (res.data.length > 0) {\n          this.setTicketHistoryData(res.data);\n          this.setTicketHistorySearchMode(false);\n          let allGameTypes = this.getAllGameTypesFromTicketHistoryResult();\n          let allWinStatuses = this.getAllWinStatusesFromTicketHistoryResult();\n          let allStatuses = this.getAllStatusesFromTicketHistoryResult();\n          this.setTicketHistoryFilters(allGameTypes, allWinStatuses, allStatuses);\n        } else {\n          this.setTicketHistorySearchMode(true);\n          this.successMessage = 'No Results Matching the Criteria have been Found.';\n          this.errorMessage = null; //this.showResetPasswordModal = false;\n          //this.showTicketHistoryToast = true;\n\n          this.showToast = true;\n        }\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  setEventHistorySearchMode(flag) {\n    this.isEventHistoryInSearchMode = flag;\n  }\n\n  searchEvents(queryParams) {\n    const id = this.selectedPlayerID;\n    this.isLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/player/${id}/player-events${queryParams}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error; //this.showResetPasswordModal = false;\n        //this.showEventHistoryToast = true;\n\n        this.showToast = true;\n      } else if (res && res.data) {\n        if (res.data.length > 0) {\n          this.setEventHistoryData(res.data);\n          this.setEventHistorySearchMode(false);\n          let allDeviceTypes = this.getAllDeviceTypesFromEventHistoryResult();\n          let allEvents = this.getAllEventTypesFromEventHistoryResult();\n          this.setEventHistoryFilters(allDeviceTypes, allEvents);\n        } else {\n          this.setEventHistorySearchMode(true);\n          this.successMessage = 'No Results Matching the Criteria have been Found.';\n          this.errorMessage = null; //this.showResetPasswordModal = false;\n          //this.showEventHistoryToast = true;\n\n          this.showToast = true;\n        }\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  searchUserAuditActions(queryParams) {\n    const id = this.selectedBackofficeUserID;\n    this.isLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/user/${id}/auditactions${queryParams}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error; //this.showResetPasswordModal = false;\n\n        this.showToast = true;\n      } else if (res) {\n        if (res.length > 0) {\n          this.setUserAuditActionsData(res);\n        } else {\n          this.successMessage = 'No Results Matching the Criteria have been Found.';\n          this.errorMessage = null; //this.showResetPasswordModal = false;\n\n          this.showToast = true;\n        }\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  updatePlayer(isFlag = false) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity,\n      account\n    } = _selectedPlayerDetails;\n    const id = this.selectedPlayerID;\n    this.isLoading = true;\n    const playerData = {\n      firstName: identity.hasOwnProperty('firstName') && identity['firstName'] ? identity['firstName'].trim() : '',\n      lastName: identity.hasOwnProperty('lastName') && identity['lastName'] ? identity['lastName'].trim() : '',\n      email: account.hasOwnProperty('email') && account['email'] ? account['email'].trim() : '',\n      address1: identity.hasOwnProperty('address1') && identity['address1'] ? identity['address1'].trim() : '',\n      address2: identity.hasOwnProperty('address2') && identity['address2'] ? identity['address2'].trim() : '',\n      city: identity.hasOwnProperty('city') && identity['city'] ? identity['city'].trim() : '',\n      state: identity.hasOwnProperty('state') && identity['state'] ? identity['state'] : '',\n      zip5: identity.hasOwnProperty('zip5') && identity['zip5'] ? identity['zip5'].trim() : '',\n      phone: identity.hasOwnProperty('phone') && identity['phone'] ? identity['phone'].trim() : '',\n      gender: identity.hasOwnProperty('gender') && identity['gender'] ? identity['gender'] : '',\n      dateOfBirth: identity.hasOwnProperty('dateOfBirth') && identity['dateOfBirth'] ? identity['dateOfBirth'] : '',\n      ssn: identity.hasOwnProperty('ssn') && identity['ssn'] ? identity['ssn'].trim() : ''\n    }; // Do not update SSN if its just last 4 digits that originally came from API response\n\n    if (identity.hasOwnProperty('ssn') && identity['ssn'] && identity['ssn'].trim().startsWith(\"***-**\")) {\n      delete playerData.ssn;\n    }\n\n    fetch(`${config.SERVER_BASE_URL}/v1/player/${id}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(playerData)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.successMessage = res.message;\n        this.errorMessage = null;\n        this.showUpdateModal = false;\n        this.showToast = true;\n        this.playerHubNavigateToFirstTab = true;\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showUpdateModal = false;\n        this.showToast = true;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  updateSSNAndVerifyPlayer(identification1, identification2, comment1, comment2) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity,\n      account\n    } = _selectedPlayerDetails;\n    const id = this.selectedPlayerID;\n    this.isLoading = true;\n    const playerData = {\n      ssn: identity['ssn'].trim()\n    }; // Do not update SSN if its just last 4 digits that originally came from API response\n\n    if (identity['ssn'].trim().startsWith(\"***-**\")) {\n      delete playerData.ssn;\n    }\n\n    fetch(`${config.SERVER_BASE_URL}/v1/player/${id}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(playerData)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        //this.successMessage = res.message;\n        //this.errorMessage = null;\n        //this.showUpdateModal = false;\n        //this.showToast = true;\n        //this.playerHubNavigateToFirstTab = true;\n        this.verifyPlayer(identification1, identification2, comment1, comment2);\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showUpdateModal = false;\n        this.showToast = true;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  setPlayerData(data) {\n    if (data) {\n      const rows = Object.values(data).map(d => d);\n      this.tableHeader = [{\n        key: 'email',\n        label: 'Email'\n      }, {\n        key: 'firstName',\n        label: 'First Name'\n      }, {\n        key: 'lastName',\n        label: 'Last Name'\n      }, {\n        key: 'address',\n        label: 'Address',\n        width: '30%'\n      }, {\n        key: 'select',\n        label: 'Select'\n      }];\n      this.tableRows = rows;\n    } else {\n      this.tableHeader = [];\n      this.tableRows = [];\n      this.showToast = true;\n    }\n  }\n\n  setTicketHistoryData(data) {\n    if (data) {\n      this.TicketHistoryAPIResult = data;\n      const rows = Object.values(data).map(d => d);\n      this.ticketHistoryTableHeader = [{\n        key: 'date',\n        label: 'Date'\n      }, {\n        key: 'time',\n        label: 'Time'\n      }, {\n        key: 'gameType',\n        label: 'Game'\n      }, {\n        key: 'winStatus',\n        label: 'Win Status'\n      }, {\n        key: 'amount',\n        label: 'Amount'\n      }, {\n        key: 'status',\n        label: 'Approval Status'\n      }, {\n        key: 'computedStatus',\n        label: 'Ticket Status'\n      }, {\n        key: 'rejectReason',\n        label: 'Reason',\n        width: '12%'\n      }, {\n        key: 'barcode',\n        label: 'Barcode'\n      }];\n      rows.forEach(element => element.requestTimestamp = moment(element.requestTimestamp).format());\n      this.ticketHistoryTableRows = rows;\n    } else {\n      this.ticketHistoryTableHeader = [];\n      this.ticketHistoryTableRows = [];\n      this.showToast = true;\n    }\n  }\n\n  setTicketHistoryFilteredData(data) {\n    if (data) {\n      this.TicketHistoryFilteredResult = data;\n      const rows = Object.values(data).map(d => d);\n      this.ticketHistoryTableHeader = [{\n        key: 'date',\n        label: 'Date'\n      }, {\n        key: 'time',\n        label: 'Time'\n      }, {\n        key: 'gameType',\n        label: 'Game'\n      }, {\n        key: 'winStatus',\n        label: 'Win Status'\n      }, {\n        key: 'amount',\n        label: 'Amount'\n      }, {\n        key: 'status',\n        label: 'Approval Status'\n      }, {\n        key: 'computedStatus',\n        label: 'Ticket Status'\n      }, {\n        key: 'rejectReason',\n        label: 'Reason'\n      }, {\n        key: 'barcode',\n        label: 'Barcode'\n      }];\n      this.ticketHistoryTableRows = rows;\n    } else {\n      this.ticketHistoryTableHeader = [];\n      this.ticketHistoryTableRows = [];\n      this.showToast = true;\n    }\n  }\n\n  setTicketHistoryFilters(allGameTypes, allWinStatuses, allStatuses) {\n    this.allGameTypes = allGameTypes;\n    this.allWinStatuses = allWinStatuses;\n    this.allStatuses = allStatuses;\n  }\n\n  setEventHistoryData(data) {\n    if (data) {\n      this.EventHistoryAPIResult = data;\n      const rows = Object.values(data).map(d => d);\n      this.eventHistoryTableHeader = [{\n        key: 'date',\n        label: 'Date'\n      }, {\n        key: 'time',\n        label: 'Time'\n      }, {\n        key: 'clientOs',\n        label: 'Device Type'\n      }, {\n        key: 'authEvent',\n        label: 'Event'\n      }];\n      rows.forEach(element => element.eventTimestamp = moment(element.eventTimestamp).format());\n      this.eventHistoryTableRows = rows;\n    } else {\n      this.eventHistoryTableHeader = [];\n      this.eventHistoryTableRows = [];\n      this.showToast = true;\n    }\n  }\n\n  setEventHistoryFilteredData(data) {\n    if (data) {\n      this.EventHistoryFilteredResult = data;\n      const rows = Object.values(data).map(d => d);\n      this.eventHistoryTableHeader = [{\n        key: 'date',\n        label: 'Date'\n      }, {\n        key: 'time',\n        label: 'Time'\n      }, {\n        key: 'clientOs',\n        label: 'Device Type'\n      }, {\n        key: 'authEvent',\n        label: 'Event'\n      }];\n      this.eventHistoryTableRows = rows;\n    } else {\n      this.eventHistoryTableHeader = [];\n      this.eventHistoryTableRows = [];\n      this.showToast = true;\n    }\n  }\n\n  setEventHistoryFilters(allDeviceTypes, allEvents) {\n    this.allDeviceTypes = allDeviceTypes;\n    this.allEvents = allEvents;\n  }\n\n  setUserAuditActionsData(data) {\n    if (data) {\n      const rows = Object.values(data).map(d => d);\n      this.AuditActionsTableHeader = [{\n        key: 'date',\n        label: 'Date'\n      }, {\n        key: 'time',\n        label: 'Time'\n      }, {\n        key: 'target',\n        label: 'Target'\n      }, {\n        key: 'actions',\n        label: 'Action'\n      }, {\n        key: 'data',\n        label: 'Data'\n      }];\n      this.AuditActionsTableRows = rows;\n    } else {\n      this.AuditActionsTableHeader = [];\n      this.AuditActionsTableRows = [];\n      this.showToast = true;\n    }\n  }\n\n  setSelectedPlayerDetails(selectedId) {\n    if (this.tableRows && this.tableRows.length) {\n      const data = this.tableRows.find(row => row.playerId === selectedId);\n      this.selectedPlayerDetails = data;\n      this.titleText = `Player: ${data.firstName} ${data.lastName}`;\n      this.selectedPlayerID = selectedId;\n    }\n\n    this.selectedTabKey = 'Player Details';\n  }\n\n  setSelectedBackOfficeUserID(selectedId) {\n    this.selectedBackofficeUserID = selectedId;\n  }\n\n  setSelectedBackOfficeUserName(selectedUserName) {\n    this.selectedBackofficeUserName = selectedUserName;\n  }\n\n  setToast(flag) {\n    this.showToast = flag;\n    this.successMessage = null;\n    this.errorMessage = null;\n  }\n\n  setEventHistoryToast(flag) {\n    this.showEventHistoryToast = flag;\n    this.successMessage = null;\n    this.errorMessage = null;\n  }\n\n  setTicketHistoryToast(flag) {\n    this.showTicketHistoryToast = flag;\n    this.successMessage = null;\n    this.errorMessage = null;\n  } // API call to reset player password\n\n\n  confirmPlayerEmail() {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    const id = this.selectedPlayerID;\n    const obj = {\n      firstName: identity['firstName'],\n      lastName: identity['lastName']\n    };\n    this.isLoading = true;\n    let url = `${config.SERVER_BASE_URL}/v1/player/${id}/verify-email`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.successMessage = res.message;\n        this.errorMessage = null;\n        this.showConfirmEmailModal = false;\n        this.showToast = true;\n        this.playerHubNavigateToFirstTab = true;\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showConfirmEmailModal = false;\n        this.showToast = true;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  } // API calls to enable player account\n\n\n  enablePlayer(reason, comment) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    const id = this.selectedPlayerID;\n    const obj = {\n      firstName: identity['firstName'],\n      lastName: identity['lastName'],\n      reason: reason,\n      comment: comment\n    };\n    let url = `${config.SERVER_BASE_URL}/v1/player/${id}/enable`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.successMessage = res.message;\n        this.errorMessage = null;\n        this.showPlayerLockUnlockModal = false;\n        this.showToast = true;\n        this.playerHubNavigateToFirstTab = true;\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showPlayerLockUnlockModal = false;\n        this.showToast = true;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  } // API calls to disable player account\n\n\n  disablePlayer(reason, comment) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    const id = this.selectedPlayerID;\n    const obj = {\n      firstName: identity['firstName'],\n      lastName: identity['lastName'],\n      reason: reason,\n      comment: comment\n    };\n    let url = `${config.SERVER_BASE_URL}/v1/player/${id}/disable`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.successMessage = res.message;\n        this.errorMessage = null;\n        this.showPlayerLockUnlockModal = false;\n        this.showToast = true;\n        this.playerHubNavigateToFirstTab = true;\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showPlayerLockUnlockModal = false;\n        this.showToast = true;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  } // API calls to enable player account\n\n\n  enablePlayerScan(reason, comment) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    const id = this.selectedPlayerID;\n    const obj = {\n      firstName: identity['firstName'],\n      lastName: identity['lastName'],\n      reason: reason,\n      comment: comment\n    };\n    let url = `${config.SERVER_BASE_URL}/v1/player/${id}/enable-scans`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.successMessage = res.message;\n        this.errorMessage = null;\n        this.showPlayerEnableDisableModal = false;\n        this.showToast = true;\n        this.playerHubNavigateToFirstTab = true;\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showPlayerEnableDisableModal = false;\n        this.showToast = true;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  } // API calls to disable player account\n\n\n  disablePlayerScan(reason, comment) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    const id = this.selectedPlayerID;\n    const obj = {\n      firstName: identity['firstName'],\n      lastName: identity['lastName'],\n      reason: reason,\n      comment: comment\n    };\n    let url = `${config.SERVER_BASE_URL}/v1/player/${id}/disable-scans`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.successMessage = res.message;\n        this.errorMessage = null;\n        this.showPlayerEnableDisableModal = false;\n        this.showToast = true;\n        this.playerHubNavigateToFirstTab = true;\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showPlayerEnableDisableModal = false;\n        this.showToast = true;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  } // API call to add a person to the Frequent Casher list\n\n\n  AddFrequentCasher(firstName, lastName, ssn) {\n    const player = {\n      firstName: firstName,\n      lastName: lastName,\n      ssn: ssn\n    };\n    let url = `${config.SERVER_BASE_URL}/v1/player/add-frequent-casher`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(player)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.showFrequentCasherConfirmModal = false;\n        this.setToastErrorSuccessMessage(true, null, res.message);\n      } else if (res && res.error) {\n        this.showFrequentCasherConfirmModal = false;\n        this.setToastErrorSuccessMessage(true, res.error, null);\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  } // API call to remove a person from the Frequent Casher list\n\n\n  RemoveFrequentCasher(firstName, lastName, ssn) {\n    const player = {\n      firstName: firstName,\n      lastName: lastName,\n      ssn: ssn\n    };\n    let url = `${config.SERVER_BASE_URL}/v1/player/remove-frequent-casher`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(player)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.showFrequentCasherConfirmModal = false;\n        this.setToastErrorSuccessMessage(true, null, res.message);\n      } else if (res && res.error) {\n        this.showFrequentCasherConfirmModal = false;\n        this.setToastErrorSuccessMessage(true, res.error, null);\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  setShowUpdateModal(flag) {\n    this.showUpdateModal = flag;\n  }\n\n  setShowConfirmEmailModal(flag) {\n    this.showConfirmEmailModal = flag;\n  }\n\n  setShowPlayerVerifyModal(flag) {\n    this.showPlayerVerifyModal = flag;\n  }\n\n  setshowPlayerLockUnlockModal(flag) {\n    this.showPlayerLockUnlockModal = flag;\n  }\n\n  setShowPlayerEnableDisableModal(flag) {\n    this.showPlayerEnableDisableModal = flag;\n  }\n\n  setShowFrequentCasherConfirmModal(flag) {\n    this.showFrequentCasherConfirmModal = flag;\n  } // API call to verify player\n\n\n  verifyPlayer(identification1, identification2, comment1, comment2) {\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    const id = this.selectedPlayerID;\n    const verifyData = {\n      firstName: identity['firstName'],\n      lastName: identity['lastName'],\n      identification1: identification1,\n      identification2: identification2,\n      comment1: comment1,\n      comment2: comment2\n    };\n    let url = `${config.SERVER_BASE_URL}/v1/player/${id}/verify`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(verifyData)\n    }).then(response => response.json()).then(res => {\n      if (res && res.message) {\n        this.successMessage = res.message;\n        this.errorMessage = null;\n        this.showPlayerVerifyModal = false;\n        this.showToast = true;\n        this.playerHubNavigateToFirstTab = true;\n      } else if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showPlayerVerifyModal = false;\n        this.showToast = true;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  logAction(actionCategory, action, target = '', comments = '') {\n    const logline = {\n      category: actionCategory,\n      action: action,\n      target: target,\n      comments: comments\n    };\n    this.isLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/log/action`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(logline)\n    }).then(response => response.json()).then(res => {\n      if (res) {}\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  getUserInfo(id) {\n    this.selectedBackofficeUserID = id;\n    this.isLoading = true;\n    fetch(`${config.SERVER_BASE_URL}/v1/user/${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(res => {\n      if (res) {\n        const {\n          firstname,\n          lastname\n        } = res;\n        this.UserNameTitleText = `${firstname} ${lastname}`;\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  } // filterJSONObjectArrayOnCriteria(input.data, {  \"gameType\": \"INSTANT\",  \"winStatus\":\"CASHING_LIMIT_EXCEEDED\",  \"status\":\"REJECTED\"});\n  // filterJSONObjectArrayOnCriteria([]);\n  // filterJSONObjectArrayOnCriteria(input);\n\n\n  filterJSONObjectArrayOnCriteria(list, criteria = '') {\n    if (list == null || list.length === 0) return [];\n    if (criteria === '') return list;\n    return list.filter(candidate => Object.keys(criteria).every(key => candidate[key] == criteria[key]));\n  } // getAllValuesForKeyFromJSONObjectArray(input.data)\n\n\n  getAllValuesForKeyFromJSONObjectArray(list, key) {\n    let result = new Set();\n    result.add('All');\n    let obj = '';\n    let option = '';\n\n    for (let i = 0; i < list.length; i++) {\n      obj = list[i];\n      option = obj[key];\n      if (option != null && option !== '') result.add(option);\n    }\n\n    return Array.from(result);\n  }\n\n  filterTicketHistoryResult() {\n    let criteria = {};\n\n    if (this.selectedGameType && this.selectedGameType !== 'All' && this.selectedGameType !== '') {\n      criteria['gameType'] = this.selectedGameType;\n    }\n\n    if (this.selectedWinStatus && this.selectedWinStatus !== 'All' && this.selectedWinStatus !== '') {\n      criteria['winStatus'] = this.selectedWinStatus;\n    }\n\n    if (this.selectedStatus && this.selectedStatus !== 'All' && this.selectedStatus !== '') {\n      criteria['status'] = this.selectedStatus;\n    } //alert(JSON.stringify(criteria))\n\n\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    const PlayerName = `Player Name: ${identity['firstName']} ${identity['lastName']}`;\n    this.logAction(UserActionCategory.FILTER_RESULTS, UserAction.TICKET_HISTORY, PlayerName, criteria);\n    let data = this.filterJSONObjectArrayOnCriteria(this.TicketHistoryAPIResult, criteria);\n    this.setTicketHistoryFilteredData(data);\n  }\n\n  filterEventHistoryResult() {\n    let criteria = {};\n\n    if (this.selectedDeviceType && this.selectedDeviceType !== 'All' && this.selectedDeviceType !== '') {\n      criteria['clientOs'] = this.selectedDeviceType;\n    }\n\n    if (this.selectedEvent && this.selectedEvent !== 'All' && this.selectedEvent !== '') {\n      criteria['authEvent'] = this.selectedEvent;\n    } //alert(JSON.stringify(criteria))\n\n\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    const PlayerName = `Player Name: ${identity['firstName']} ${identity['lastName']}`;\n    this.logAction(UserActionCategory.FILTER_RESULTS, UserAction.EVENT_HISTORY, PlayerName, criteria);\n    let data = this.filterJSONObjectArrayOnCriteria(this.EventHistoryAPIResult, criteria);\n    this.setEventHistoryFilteredData(data);\n  } // Returns all the values for the key - clientOs, from the Event History Results\n\n\n  getAllDeviceTypesFromEventHistoryResult() {\n    return this.getAllValuesForKeyFromJSONObjectArray(this.EventHistoryAPIResult, 'clientOs');\n  } // Returns all the values for the key - AuthEvent, from the Event History Results\n\n\n  getAllEventTypesFromEventHistoryResult() {\n    return this.getAllValuesForKeyFromJSONObjectArray(this.EventHistoryAPIResult, 'authEvent');\n  } // Returns all the values for the key - gameType, from the Ticket History Results\n\n\n  getAllGameTypesFromTicketHistoryResult() {\n    return this.getAllValuesForKeyFromJSONObjectArray(this.TicketHistoryAPIResult, 'gameType');\n  } // Returns all the values for the key - winStatus, from the Ticket History Results\n\n\n  getAllWinStatusesFromTicketHistoryResult() {\n    return this.getAllValuesForKeyFromJSONObjectArray(this.TicketHistoryAPIResult, 'winStatus');\n  } // Returns all the values for the key - status, from the Ticket History Results\n\n\n  getAllStatusesFromTicketHistoryResult() {\n    return this.getAllValuesForKeyFromJSONObjectArray(this.TicketHistoryAPIResult, 'status');\n  }\n\n  ClearTicketHistoryFilters() {\n    this.selectedGameType = 'All';\n    this.selectedWinStatus = 'All';\n    this.selectedStatus = 'All';\n    this.filterTicketHistoryResult();\n  }\n\n  ClearEventHistoryFilters() {\n    this.selectedDeviceType = 'All';\n    this.selectedEvent = 'All';\n    this.filterEventHistoryResult();\n  }\n\n  setSelectedGameType(val) {\n    this.selectedGameType = val;\n  }\n\n  setSelectedWinStatus(val) {\n    this.selectedWinStatus = val;\n  }\n\n  setSelectedStatus(val) {\n    this.selectedStatus = val;\n  }\n\n  setSelectedDeviceType(val) {\n    this.selectedDeviceType = val;\n  }\n\n  setSelectedEvent(val) {\n    this.selectedEvent = val;\n  }\n\n  showFileNewTab(data, isSkip = false) {\n    if (data === undefined || isSkip) return;\n    let file = new Blob([data], {\n      type: 'application/pdf'\n    });\n    let fileURL = URL.createObjectURL(file);\n    window.open(fileURL);\n  }\n\n  downloadPDF(filename) {\n    let url = `${config.SERVER_BASE_URL}/v1/download/${filename}`;\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json application/pdf'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        this.setToastErrorSuccessMessage(true, 'No Document Found.', null);\n        return;\n      }\n\n      return response.blob();\n    }).then(this.showFileNewTab).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  setClaimHistoryData(data) {\n    if (data) {\n      const rows = Object.values(data).map(d => d.claim);\n      this.claimHistoryTableHeader = [{\n        key: 'date',\n        label: 'Date'\n      }, {\n        key: 'time',\n        label: 'Time'\n      }, {\n        key: 'referenceNumber',\n        label: 'Claim ID'\n      }, {\n        key: 'status',\n        label: 'Status'\n      }];\n      rows.forEach(element => {\n        const date = moment(element.activeFrom).format('MM-DD-YYYY');\n        const time = moment(element.activeFrom).format(timeOfDayFormat);\n        element.date = date;\n        element.time = time; // element.requestTimestamp = moment(element.requestTimestamp).format()\n      });\n      this.claimHistoryTableRows = rows;\n    } else {\n      this.claimHistoryTableHeader = [];\n      this.claimHistoryTableRows = [];\n      this.showToast = true;\n      this.successMessage = 'Player has no Claims';\n      this.errorMessage = null;\n    }\n  } // API call to fetch tickets associated with a player\n\n\n  fetchAllClaims() {\n    const id = this.selectedPlayerID;\n    this.isLoading = true;\n\n    const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n    const {\n      identity\n    } = _selectedPlayerDetails;\n    const obj = {\n      firstName: identity['firstName'],\n      lastName: identity['lastName'],\n      playerId: identity['id'],\n      reason: 'reason',\n      comment: 'comment'\n    };\n    const url = `${config.SERVER_BASE_URL}/v1/player/${id}/claims`;\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => response.json()).then(res => {\n      if (res && res.error) {\n        this.successMessage = null;\n        this.errorMessage = res.error;\n        this.showToast = true;\n      } else if (res && res.claims) {\n        if (res.claims.length > 0) {\n          this.setClaimHistoryData(res.claims);\n        } else {\n          this.claimHistoryTableHeader = [];\n          this.claimHistoryTableRows = [];\n          this.showToast = true;\n          this.successMessage = 'Player has no Claims';\n          this.errorMessage = null;\n        }\n      }\n    }).catch(error => {\n      this.errorMessage = error.toString();\n      this.showToast = true;\n      this.successMessage = null;\n    });\n  }\n\n  setSelectedClaim(claim, cb, flag = false) {\n    if (flag) {\n      this.selectedPlayerDetails = {\n        identity: {\n          firstName: claim.playerFirstName,\n          lastName: claim.playerLastName\n        }\n      };\n    }\n\n    this.selectedClaimId = claim.referenceNumber;\n    this.selectedClaimStatus = claim.status;\n    cb();\n  }\n\n  setClaimDetails(data, count) {\n    if (data && data.currState) {\n      const rowData = data.prevStates || [];\n      const claimHistoryTableHeader = [{\n        key: 'date',\n        label: 'Date'\n      }, {\n        key: 'time',\n        label: 'Time'\n      }, {\n        key: 'status',\n        label: 'Status'\n      }, {\n        key: 'prizeAmountInCents',\n        label: 'Amount',\n        type: 'currency',\n        classes: 'currency-column'\n      }];\n      rowData.forEach(element => {\n        const date = moment(element.activeFrom).format('MM-DD-YYYY');\n        const time = moment(element.activeFrom).format(timeOfDayFormat);\n        element.date = date;\n        element.time = time;\n        element.prizeAmountInCents = element.prizeAmountInCents ? (element.prizeAmountInCents / 100).toFixed(2) : 0;\n      });\n      const selectedClaimDetails = data.currState || null;\n      this.eSignatureURL = data.eSignatureUrl || null;\n      selectedClaimDetails.rejectedCount = count;\n      const stateTax = data.lineItems ? data.lineItems.find(item => item.type === 'TAX_STATE') : null;\n      selectedClaimDetails.taxWithholding = stateTax && stateTax.amountInCents ? (stateTax.amountInCents / 100).toFixed(2) : 0;\n\n      if (selectedClaimDetails.taxWithholding < 0) {\n        selectedClaimDetails.taxWithholding *= -1;\n      }\n\n      const offsetTax = data.lineItems ? data.lineItems.find(item => item.type === 'OFFSET') : null;\n      selectedClaimDetails.offsetWithholding = offsetTax && offsetTax.amountInCents ? (offsetTax.amountInCents / 100).toFixed(2) : 0;\n\n      if (selectedClaimDetails.offsetWithholding < 0) {\n        selectedClaimDetails.offsetWithholding *= -1;\n      }\n\n      selectedClaimDetails.netPaymentAmountInCents = data.netPaymentAmountInCents.toFixed(2) || 0;\n      this.claimDetails = {\n        claimHistoryTableHeader,\n        claimHistoryTableRows: rowData,\n        selectedClaimDetails: selectedClaimDetails\n      };\n    } else {\n      this.claimDetails = {\n        claimHistoryTableHeader: [],\n        claimHistoryTableRows: []\n      };\n      this.showToast = true;\n    }\n  } // API call to fetch claim details\n\n\n  fetchClaimDetails() {\n    const claimReferenceNumber = this.selectedClaimId;\n\n    if (this.selectedClaimId) {\n      this.isLoading = true;\n\n      const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n      const {\n        identity\n      } = _selectedPlayerDetails;\n      const obj = {\n        firstName: identity['firstName'],\n        lastName: identity['lastName'],\n        reason: 'reason',\n        comment: 'comment'\n      };\n      const url = `${config.SERVER_BASE_URL}/v1/claim/${claimReferenceNumber}/details`;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(obj)\n      }).then(response => response.json()).then(res => {\n        if (res && res.error) {\n          this.successMessage = null;\n          this.errorMessage = res.error;\n          this.showToast = true;\n        } else if (res && res.claim) {\n          if (res.claim.prevStates) {\n            let count = 0;\n\n            if (res.hasOwnProperty('rejectCount')) {\n              count = res.rejectCount;\n            }\n\n            this.setClaimDetails(res.claim, count);\n          } else {\n            this.successMessage = 'No Results.';\n            this.errorMessage = null;\n            this.showToast = true;\n          }\n        }\n      }).catch(error => {\n        this.errorMessage = error.toString();\n      });\n    }\n  }\n\n  setPaymentHistoryData(data) {\n    const rows = data.map(item => {\n      if (item.details) {\n        const {\n          createdAt,\n          amountInCents\n        } = item.details;\n        const date = moment(createdAt).format('MM-DD-YYYY');\n        const time = moment(createdAt).format(timeOfDayFormat);\n        item.date = date;\n        item.time = time;\n        item.amount = amountInCents ? amountInCents / 100 : 0;\n        item.amount = item.amount.toFixed(2);\n      }\n\n      return item;\n    });\n    this.paymentHistoryData = rows || [];\n  } // API call to fetch claim payment history data\n\n\n  fetchPaymentHistoryDetails() {\n    const claimReferenceNumber = this.selectedClaimId;\n\n    if (this.selectedClaimId) {\n      this.isLoading = true;\n\n      const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\n\n      const {\n        identity\n      } = _selectedPlayerDetails;\n      const obj = {\n        firstName: identity['firstName'],\n        lastName: identity['lastName'],\n        reason: 'reason',\n        comment: 'comment'\n      };\n      const url = `${config.SERVER_BASE_URL}/v1/claim/${claimReferenceNumber}/transactions/history`;\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(obj)\n      }).then(response => response.json()).then(res => {\n        if (res && res.error) {\n          this.successMessage = null;\n          this.errorMessage = res.error;\n          this.showToast = true;\n        } else if (res && res.transactions) {\n          this.setPaymentHistoryData(res.transactions);\n        } else {\n          this.successMessage = 'No Results.';\n          this.errorMessage = null;\n          this.showToast = true;\n          this.paymentHistoryData = [];\n        }\n      }).catch(error => {\n        this.errorMessage = error.toString();\n      });\n    }\n  }\n\n  clearESig() {\n    this.eSignatureURL = null;\n  }\n  /*\r\n  @action fetchESigFormForClaim() {\r\n      const id = this.selectedClaimId;\r\n      let isFailed = false;\r\n      fetch(`${config.SERVER_BASE_URL}/v1/claim/${id}/ESig`, {\r\n          method: 'GET',\r\n          headers: {\r\n              'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json application/pdf',\r\n          },\r\n      })\r\n          .then(response => {\r\n              if (!response.ok) {\r\n                  this.setToastErrorSuccessMessage(true, 'No E-Signature is associated to this Claim.', null)\r\n                  return\r\n              }\r\n              if(response.status === 404) {\r\n                  this.successMessage = null;\r\n                  this.errorMessage = 'No E-Signature is associated to this Claim';\r\n                  this.showToast = true;\r\n                  isFailed = true;\r\n                  return 0;\r\n              }\r\n              return response.blob(); //Will need to examine the data coming back here\r\n          })\r\n          .then(data => this.eSignatureData = data)\r\n          .catch((error) => {\r\n              this.errorMessage = error.toString();\r\n          });\r\n  }\r\n  */\n\n\n  fetchW2GFormForClaim() {\n    const id = this.selectedClaimId;\n    let isFailed = false;\n    fetch(`${config.SERVER_BASE_URL}/v1/claim/${id}/W2G`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json application/pdf'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        this.setToastErrorSuccessMessage(true, 'No W2G is attached to this Claim.', null);\n        return;\n      }\n\n      if (response.status === 404) {\n        this.successMessage = null;\n        this.errorMessage = 'No W2G is attached to this Claim';\n        this.showToast = true;\n        isFailed = true;\n        return 0;\n      }\n\n      return response.blob();\n    }).then(data => this.showFileNewTab(data, isFailed)).catch(error => {\n      this.errorMessage = error.toString();\n    });\n  }\n\n  setSelectedTabKey(key) {\n    this.selectedTabKey = key;\n  }\n\n  setPaymentDetails(data, cb) {\n    this.paymentDetails = data;\n    cb();\n  }\n\n  setSpinnerState(flag) {\n    this.isSpinnerLoading = flag;\n  }\n\n  unlockUser(userData, cb) {\n    if (userData && userData.id) {\n      this.loading = true;\n      const obj = {\n        id: userData.id,\n        username: userData.username\n      };\n      fetch(`${config.SERVER_BASE_URL}/v1/user/unlock`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json application/pdf'\n        },\n        body: JSON.stringify(obj)\n      }).then(response => response.json()).then(res => {\n        if (res && res.error) {\n          this.mainSuccessMessage = null;\n          this.mainErrorMessage = res.error.toString();\n          this.showMainToast = true;\n          this.isSpinnerLoading = false;\n        } else if (res && res.success) {\n          this.mainErrorMessage = null;\n          this.mainSuccessMessage = 'User unlocked';\n          this.showMainToast = true;\n          this.isSpinnerLoading = false;\n          cb();\n        }\n      }).catch(error => {\n        this.mainErrorMessage = error.toString();\n        this.mainSuccessMessage = null;\n        this.showMainToast = true;\n        this.isSpinnerLoading = false;\n      });\n    }\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"isLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"showToast\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"selectedPlayerDetails\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"selectedPlayerID\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"tableHeader\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"tableRows\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"ticketHistoryTableHeader\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"ticketHistoryTableRows\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"eventHistoryTableHeader\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"eventHistoryTableRows\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"errorMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"successMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"titleText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"showUpdateModal\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"showConfirmEmailModal\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"showPlayerVerifyModal\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"showPlayerLockUnlockModal\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"showPlayerEnableDisableModal\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"showFrequentCasherConfirmModal\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"selectedBackofficeUserID\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, \"selectedBackofficeUserFullName\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, \"selectedBackofficeUserName\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, \"AuditActionsTableHeader\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor24 = _applyDecoratedDescriptor(_class.prototype, \"AuditActionsTableRows\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor25 = _applyDecoratedDescriptor(_class.prototype, \"UserNameTitleText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor26 = _applyDecoratedDescriptor(_class.prototype, \"loggedInUserID\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor27 = _applyDecoratedDescriptor(_class.prototype, \"showTicketHistoryToast\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor28 = _applyDecoratedDescriptor(_class.prototype, \"TicketHistoryAPIResult\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor29 = _applyDecoratedDescriptor(_class.prototype, \"TicketHistoryFilteredResult\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor30 = _applyDecoratedDescriptor(_class.prototype, \"selectedGameType\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor31 = _applyDecoratedDescriptor(_class.prototype, \"allGameTypes\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor32 = _applyDecoratedDescriptor(_class.prototype, \"selectedWinStatus\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor33 = _applyDecoratedDescriptor(_class.prototype, \"allWinStatuses\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor34 = _applyDecoratedDescriptor(_class.prototype, \"selectedStatus\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor35 = _applyDecoratedDescriptor(_class.prototype, \"allStatuses\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor36 = _applyDecoratedDescriptor(_class.prototype, \"isTicketHistoryInSearchMode\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor37 = _applyDecoratedDescriptor(_class.prototype, \"showEventHistoryToast\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor38 = _applyDecoratedDescriptor(_class.prototype, \"isEventHistoryInSearchMode\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor39 = _applyDecoratedDescriptor(_class.prototype, \"EventHistoryAPIResult\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor40 = _applyDecoratedDescriptor(_class.prototype, \"EventHistoryFilteredResult\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor41 = _applyDecoratedDescriptor(_class.prototype, \"selectedDeviceType\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor42 = _applyDecoratedDescriptor(_class.prototype, \"allDeviceTypes\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor43 = _applyDecoratedDescriptor(_class.prototype, \"selectedEvent\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor44 = _applyDecoratedDescriptor(_class.prototype, \"allEvents\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor45 = _applyDecoratedDescriptor(_class.prototype, \"showMainToast\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor46 = _applyDecoratedDescriptor(_class.prototype, \"mainErrorMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor47 = _applyDecoratedDescriptor(_class.prototype, \"mainSuccessMessage\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor48 = _applyDecoratedDescriptor(_class.prototype, \"playerHubNavigateToFirstTab\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor49 = _applyDecoratedDescriptor(_class.prototype, \"claimHistoryTableHeader\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor50 = _applyDecoratedDescriptor(_class.prototype, \"claimHistoryTableRows\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor51 = _applyDecoratedDescriptor(_class.prototype, \"selectedClaimId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor52 = _applyDecoratedDescriptor(_class.prototype, \"selectedClaimStatus\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor53 = _applyDecoratedDescriptor(_class.prototype, \"claimDetails\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor54 = _applyDecoratedDescriptor(_class.prototype, \"paymentHistoryData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor55 = _applyDecoratedDescriptor(_class.prototype, \"paymentDetails\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor56 = _applyDecoratedDescriptor(_class.prototype, \"eSignatureURL\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor57 = _applyDecoratedDescriptor(_class.prototype, \"selectedTabKey\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 'Player Details';\n  }\n}), _descriptor58 = _applyDecoratedDescriptor(_class.prototype, \"isSpinnerLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor59 = _applyDecoratedDescriptor(_class.prototype, \"toggle\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setToastErrorSuccessMessage\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setToastErrorSuccessMessage\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setToastErrorSuccessMessage\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setToastErrorSuccessMessage\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clear\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"clear\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getPlayerDetails\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getPlayerDetails\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"searchPlayers\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"searchPlayers\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"searchTickets\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"searchTickets\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"searchEvents\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"searchEvents\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"searchUserAuditActions\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"searchUserAuditActions\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updatePlayer\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updatePlayer\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateSSNAndVerifyPlayer\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateSSNAndVerifyPlayer\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"confirmPlayerEmail\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"confirmPlayerEmail\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"enablePlayer\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"enablePlayer\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"disablePlayer\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"disablePlayer\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"enablePlayerScan\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"enablePlayerScan\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"disablePlayerScan\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"disablePlayerScan\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"AddFrequentCasher\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"AddFrequentCasher\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"RemoveFrequentCasher\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"RemoveFrequentCasher\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"verifyPlayer\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"verifyPlayer\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"logAction\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"logAction\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getUserInfo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getUserInfo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"filterJSONObjectArrayOnCriteria\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"filterJSONObjectArrayOnCriteria\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getAllValuesForKeyFromJSONObjectArray\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getAllValuesForKeyFromJSONObjectArray\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"filterTicketHistoryResult\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"filterTicketHistoryResult\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"filterEventHistoryResult\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"filterEventHistoryResult\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getAllDeviceTypesFromEventHistoryResult\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getAllDeviceTypesFromEventHistoryResult\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getAllEventTypesFromEventHistoryResult\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getAllEventTypesFromEventHistoryResult\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getAllGameTypesFromTicketHistoryResult\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getAllGameTypesFromTicketHistoryResult\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getAllWinStatusesFromTicketHistoryResult\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getAllWinStatusesFromTicketHistoryResult\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"getAllStatusesFromTicketHistoryResult\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getAllStatusesFromTicketHistoryResult\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"ClearTicketHistoryFilters\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"ClearTicketHistoryFilters\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"ClearEventHistoryFilters\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"ClearEventHistoryFilters\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setSelectedGameType\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setSelectedGameType\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setSelectedWinStatus\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setSelectedWinStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setSelectedStatus\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setSelectedStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setSelectedDeviceType\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setSelectedDeviceType\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setSelectedEvent\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setSelectedEvent\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"downloadPDF\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"downloadPDF\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"fetchAllClaims\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"fetchAllClaims\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"fetchClaimDetails\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"fetchClaimDetails\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"fetchPaymentHistoryDetails\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"fetchPaymentHistoryDetails\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clearESig\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"clearESig\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"fetchW2GFormForClaim\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"fetchW2GFormForClaim\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"unlockUser\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"unlockUser\"), _class.prototype)), _class);","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/Capstone/lottery/mslc-backoffice-client/v1/Code/src/store/PlayerStore.js"],"names":["React","action","observable","config","UserAction","UserActionCategory","moment","toJS","timeOfDayFormat","PlayerStore","setToastErrorSuccessMessage","toggle","showToast","errorMessage","successMessage","showMainToast","mainErrorMessage","mainSuccessMessage","constructor","rootStore","authStore","clear","isLoading","clearPlayerSearchResults","tableHeader","tableRows","clearTicketHistorySearchResults","selectedGameType","selectedWinStatus","selectedStatus","ticketHistoryTableHeader","ticketHistoryTableRows","clearEventHistorySearchResults","selectedDeviceType","selectedEvent","eventHistoryTableHeader","eventHistoryTableRows","clearUserAuditActionSearchResults","AuditActionsTableHeader","AuditActionsTableRows","updateUserDetails","value","param","_selectedPlayerDetails","JSON","parse","stringify","selectedPlayerDetails","identity","account","updateUserEmail","updatePlayerDateOfBirth","newDateOfBirth","getPlayerDetails","playerId","id","selectedPlayerID","isSpinnerLoading","fetch","SERVER_BASE_URL","method","headers","localStorage","getItem","then","response","json","res","message","row","firstName","lastName","address","email","key","label","width","error","hasOwnProperty","phone","substring","dateOfBirth","format","catch","toString","searchPlayers","queryParams","data","setPlayerData","length","setTicketHistorySearchMode","flag","isTicketHistoryInSearchMode","searchTickets","setTicketHistoryData","allGameTypes","getAllGameTypesFromTicketHistoryResult","allWinStatuses","getAllWinStatusesFromTicketHistoryResult","allStatuses","getAllStatusesFromTicketHistoryResult","setTicketHistoryFilters","setEventHistorySearchMode","isEventHistoryInSearchMode","searchEvents","setEventHistoryData","allDeviceTypes","getAllDeviceTypesFromEventHistoryResult","allEvents","getAllEventTypesFromEventHistoryResult","setEventHistoryFilters","searchUserAuditActions","selectedBackofficeUserID","setUserAuditActionsData","updatePlayer","isFlag","playerData","trim","address1","address2","city","state","zip5","gender","ssn","startsWith","body","showUpdateModal","playerHubNavigateToFirstTab","updateSSNAndVerifyPlayer","identification1","identification2","comment1","comment2","verifyPlayer","rows","Object","values","map","d","TicketHistoryAPIResult","forEach","element","requestTimestamp","setTicketHistoryFilteredData","TicketHistoryFilteredResult","EventHistoryAPIResult","eventTimestamp","setEventHistoryFilteredData","EventHistoryFilteredResult","setSelectedPlayerDetails","selectedId","find","titleText","selectedTabKey","setSelectedBackOfficeUserID","setSelectedBackOfficeUserName","selectedUserName","selectedBackofficeUserName","setToast","setEventHistoryToast","showEventHistoryToast","setTicketHistoryToast","showTicketHistoryToast","confirmPlayerEmail","obj","url","showConfirmEmailModal","enablePlayer","reason","comment","showPlayerLockUnlockModal","disablePlayer","enablePlayerScan","showPlayerEnableDisableModal","disablePlayerScan","AddFrequentCasher","player","showFrequentCasherConfirmModal","RemoveFrequentCasher","setShowUpdateModal","setShowConfirmEmailModal","setShowPlayerVerifyModal","showPlayerVerifyModal","setshowPlayerLockUnlockModal","setShowPlayerEnableDisableModal","setShowFrequentCasherConfirmModal","verifyData","logAction","actionCategory","target","comments","logline","category","getUserInfo","firstname","lastname","UserNameTitleText","filterJSONObjectArrayOnCriteria","list","criteria","filter","candidate","keys","every","getAllValuesForKeyFromJSONObjectArray","result","Set","add","option","i","Array","from","filterTicketHistoryResult","PlayerName","FILTER_RESULTS","TICKET_HISTORY","filterEventHistoryResult","EVENT_HISTORY","ClearTicketHistoryFilters","ClearEventHistoryFilters","setSelectedGameType","val","setSelectedWinStatus","setSelectedStatus","setSelectedDeviceType","setSelectedEvent","showFileNewTab","isSkip","undefined","file","Blob","type","fileURL","URL","createObjectURL","window","open","downloadPDF","filename","ok","blob","setClaimHistoryData","claim","claimHistoryTableHeader","date","activeFrom","time","claimHistoryTableRows","fetchAllClaims","claims","setSelectedClaim","cb","playerFirstName","playerLastName","selectedClaimId","referenceNumber","selectedClaimStatus","status","setClaimDetails","count","currState","rowData","prevStates","classes","prizeAmountInCents","toFixed","selectedClaimDetails","eSignatureURL","eSignatureUrl","rejectedCount","stateTax","lineItems","item","taxWithholding","amountInCents","offsetTax","offsetWithholding","netPaymentAmountInCents","claimDetails","fetchClaimDetails","claimReferenceNumber","rejectCount","setPaymentHistoryData","details","createdAt","amount","paymentHistoryData","fetchPaymentHistoryDetails","transactions","clearESig","fetchW2GFormForClaim","isFailed","setSelectedTabKey","setPaymentDetails","paymentDetails","setSpinnerState","unlockUser","userData","loading","username","success"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {action, observable} from 'mobx';\r\nimport config from \"../config\";\r\nimport {UserAction, UserActionCategory} from \"../UserActionCategory\";\r\nimport moment from \"moment\";\r\nimport {toJS} from \"mobx\";\r\nimport {timeOfDayFormat} from \"../constants.js\";\r\n\r\n\r\nexport class PlayerStore {\r\n\r\n    rootStore = null;\r\n    authStore = null;\r\n\r\n    @observable isLoading = false;\r\n    @observable showToast = false;\r\n    @observable selectedPlayerDetails = null;\r\n    @observable selectedPlayerID = null;\r\n    @observable tableHeader = null;\r\n    @observable tableRows = null;\r\n    @observable ticketHistoryTableHeader = null;\r\n    @observable ticketHistoryTableRows = null;\r\n    @observable eventHistoryTableHeader = null;\r\n    @observable eventHistoryTableRows = null;\r\n    @observable errorMessage = null;\r\n    @observable successMessage = null;\r\n    @observable titleText = null;\r\n    @observable showUpdateModal = false;\r\n    @observable showConfirmEmailModal = false;\r\n    @observable showPlayerVerifyModal = false;\r\n    @observable showPlayerLockUnlockModal = false;\r\n    @observable showPlayerEnableDisableModal = false;\r\n    @observable showFrequentCasherConfirmModal = false;\r\n\r\n    // Back-office user audit\r\n    @observable selectedBackofficeUserID = null;\r\n    @observable selectedBackofficeUserFullName = null;\r\n    @observable selectedBackofficeUserName = null;\r\n    @observable AuditActionsTableHeader = null;\r\n    @observable AuditActionsTableRows = null;\r\n    @observable UserNameTitleText = null;\r\n\r\n    //\r\n    @observable loggedInUserID = null;\r\n\r\n    @observable showTicketHistoryToast = false;\r\n    @observable TicketHistoryAPIResult = null;\r\n    @observable TicketHistoryFilteredResult = null;\r\n    @observable selectedGameType = null;\r\n    @observable allGameTypes = [];\r\n    @observable selectedWinStatus = null;\r\n    @observable allWinStatuses = [];\r\n    @observable selectedStatus = null;\r\n    @observable allStatuses = [];\r\n    @observable isTicketHistoryInSearchMode = false;\r\n    @observable showEventHistoryToast = false;\r\n    @observable isEventHistoryInSearchMode = false;\r\n\r\n    @observable EventHistoryAPIResult = null;\r\n    @observable EventHistoryFilteredResult = null;\r\n    @observable selectedDeviceType = null;\r\n    @observable allDeviceTypes = [];\r\n    @observable selectedEvent = null;\r\n    @observable allEvents = [];\r\n\r\n    // Auth Layout\r\n    @observable showMainToast = false;\r\n    @observable mainErrorMessage = '';\r\n    @observable mainSuccessMessage = '';\r\n\r\n    // Player Hub\r\n    @observable playerHubNavigateToFirstTab = false;\r\n\r\n    // Claims\r\n    @observable claimHistoryTableHeader = null;\r\n    @observable claimHistoryTableRows = null;\r\n    @observable selectedClaimId = null;\r\n    @observable selectedClaimStatus = null;\r\n    @observable claimDetails = null;\r\n    @observable paymentHistoryData = null;\r\n    @observable paymentDetails = null;\r\n    @observable eSignatureURL = null;\r\n\r\n    @observable selectedTabKey = 'Player Details';\r\n\r\n    //  Spinner State\r\n    @observable isSpinnerLoading = false;\r\n\r\n    @observable toggle = false;\r\n\r\n    @action setToastErrorSuccessMessage(toggle) {\r\n        this.toggle = toggle;        \r\n    }\r\n    \r\n    @action setToastErrorSuccessMessage(showToast, errorMessage, successMessage) {\r\n        this.showMainToast = showToast;\r\n        this.mainErrorMessage = errorMessage;\r\n        this.mainSuccessMessage = successMessage;\r\n    }\r\n\r\n    constructor(rootStore) {\r\n        this.rootStore = rootStore;\r\n        this.authStore = this.rootStore.authStore;\r\n    }\r\n\r\n    @action clear() {\r\n        this.isLoading = false;\r\n    }\r\n\r\n    clearPlayerSearchResults() {\r\n        this.tableHeader = null;\r\n        this.tableRows = null;\r\n    }\r\n\r\n    clearTicketHistorySearchResults() {\r\n        this.selectedGameType = 'All';\r\n        this.selectedWinStatus = 'All';\r\n        this.selectedStatus = 'All';\r\n        this.ticketHistoryTableHeader = null;\r\n        this.ticketHistoryTableRows = null;\r\n    }\r\n\r\n    clearEventHistorySearchResults() {\r\n        this.selectedDeviceType = 'All';\r\n        this.selectedEvent = 'All';\r\n        this.eventHistoryTableHeader = null;\r\n        this.eventHistoryTableRows = null;\r\n    }\r\n\r\n    clearUserAuditActionSearchResults() {\r\n        this.AuditActionsTableHeader = null;\r\n        this.AuditActionsTableRows = null;\r\n    }\r\n\r\n    updateUserDetails(value, param) {\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity, account} = _selectedPlayerDetails;\r\n        identity[param] = value;\r\n        this.selectedPlayerDetails = _selectedPlayerDetails;\r\n    }\r\n\r\n    updateUserEmail(value, param) {\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {account} = _selectedPlayerDetails;\r\n        account[param] = value;\r\n        this.selectedPlayerDetails = _selectedPlayerDetails;\r\n    }\r\n\r\n    updatePlayerDateOfBirth(newDateOfBirth) {\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        identity['dateOfBirth'] = newDateOfBirth;\r\n        this.selectedPlayerDetails = _selectedPlayerDetails;\r\n    }\r\n\r\n    // API call to fetch player details\r\n    @action getPlayerDetails(playerId='') {\r\n        const id = playerId || this.selectedPlayerID;\r\n        this.isSpinnerLoading = true;\r\n        fetch(`${config.SERVER_BASE_URL}/v1/player/${id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                this.isSpinnerLoading = false;\r\n                if(playerId) {\r\n                    if (res && res.message) {\r\n                        this.setToastErrorSuccessMessage(true, res.message, null);\r\n                    } else {\r\n                        const row = res.identity || {};\r\n                        if(!res.identity) {\r\n                            row.firstName = '';\r\n                            row.lastName = '';\r\n                            row.address = '';\r\n                        }\r\n                        row.playerId = res.account && res.account.id ? res.account.id: '';\r\n                        row.email = res.account && res.account.email ? res.account.email : '';\r\n                        this.tableHeader = [\r\n                            {key: 'email', label: 'Email'},\r\n                            {key: 'firstName', label: 'First Name'},\r\n                            {key: 'lastName', label: 'Last Name'},\r\n                            {key: 'address', label: 'Address', width: '30%'},\r\n                            {key: 'select', label: 'Select'}\r\n                        ];\r\n                        this.tableRows = [row];\r\n                    }\r\n                } else {\r\n                    if (res && res.error) {\r\n                        this.errorMessage = res.error;\r\n                    } else {\r\n                        if(!res.hasOwnProperty('identity') || !res.identity) {\r\n                           res.identity = {\r\n                               \"id\": '',\r\n                               \"playerId\": res.account && res.account.id ? res.account.id: '',\r\n                               \"identityFingerprint\": \"\",\r\n                               \"firstName\": \"\",\r\n                               \"lastName\": \"\",\r\n                               \"gender\": \"\",\r\n                               \"ssn\": \"\",\r\n                               \"dateOfBirth\": \"\",\r\n                               \"address1\": \"\",\r\n                               \"address2\": \"\",\r\n                               \"city\": \"\",\r\n                               \"state\": \"\",\r\n                               \"zip5\": \"\",\r\n                               \"phone\": \"\",\r\n                               \"acceptedEmailCommunication\": false,\r\n                               \"acceptedSmsCommunication\": false,\r\n                               \"termsAcceptedDate\": \"\",\r\n                               \"activeFrom\": \"\",\r\n                               \"activeTo\": null,\r\n                               \"identityCheckResult\": \"\",\r\n                               \"identityCheckSource\": \"\",\r\n                               \"identityCheckNotes\": \"\",\r\n                               \"identitySource\": \"\",\r\n                               \"identityCheckRequestId\": \"\",\r\n                               \"identityServiceTermsAcceptedDate\": \"\",\r\n                               \"status\": \"\"\r\n                           }\r\n                        }\r\n                        res.identity.phone = res.identity.phone.substring(2);\r\n                        res.identity.dateOfBirth = res.identity.dateOfBirth ? moment(res.identity.dateOfBirth).format('MM/DD/YYYY') : '';\r\n                        this.selectedPlayerDetails = res;\r\n                    }\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                this.isSpinnerLoading = false;\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    @action searchPlayers(queryParams) {\r\n        this.isLoading = true;\r\n        this.isSpinnerLoading = true;\r\n        fetch(`${config.SERVER_BASE_URL}/v1/player/search${queryParams}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.data) {\r\n                    this.setPlayerData(res.data);\r\n                    const errorMessage = res.data.length <= 0 ? 'No Results Matching Criteria Have Been Found' : null;\r\n                    const showToast = res.data.length <= 0 ? true : false;\r\n                    this.setToastErrorSuccessMessage(showToast, null, errorMessage)\r\n                } else if (res && res.error) {\r\n                    this.setPlayerData(res.data);\r\n                    const errorMessage = res.error;\r\n                    const showToast = true;\r\n                    this.setToastErrorSuccessMessage(showToast, errorMessage, null)\r\n                }\r\n                this.isSpinnerLoading = false;\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n                this.isSpinnerLoading = false;\r\n                // this.setState({errorMessage: error.toString()});\r\n            });\r\n    }\r\n\r\n    setTicketHistorySearchMode(flag) {\r\n        this.isTicketHistoryInSearchMode = flag;\r\n    }\r\n\r\n    // API call to fetch tickets associated with a player\r\n    @action searchTickets(queryParams) {\r\n        const id = this.selectedPlayerID;\r\n        this.isLoading = true;\r\n        fetch(`${config.SERVER_BASE_URL}/v1/player/${id}/ticket-scanner-events${queryParams}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    //this.showResetPasswordModal = false;\r\n                    //this.showTicketHistoryToast = true;\r\n                    this.showToast = true;\r\n                } else if (res && res.data) {\r\n                    if (res.data.length > 0) {\r\n                        this.setTicketHistoryData(res.data);\r\n                        this.setTicketHistorySearchMode(false)\r\n                        let allGameTypes = this.getAllGameTypesFromTicketHistoryResult();\r\n                        let allWinStatuses = this.getAllWinStatusesFromTicketHistoryResult();\r\n                        let allStatuses = this.getAllStatusesFromTicketHistoryResult();\r\n                        this.setTicketHistoryFilters(allGameTypes, allWinStatuses, allStatuses)\r\n                    } else {\r\n                        this.setTicketHistorySearchMode(true)\r\n                        this.successMessage = 'No Results Matching the Criteria have been Found.';\r\n                        this.errorMessage = null;\r\n                        //this.showResetPasswordModal = false;\r\n                        //this.showTicketHistoryToast = true;\r\n                        this.showToast = true;\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    setEventHistorySearchMode(flag) {\r\n        this.isEventHistoryInSearchMode = flag;\r\n    }\r\n\r\n    @action searchEvents(queryParams) {\r\n        const id = this.selectedPlayerID;\r\n        this.isLoading = true;\r\n        fetch(`${config.SERVER_BASE_URL}/v1/player/${id}/player-events${queryParams}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    //this.showResetPasswordModal = false;\r\n                    //this.showEventHistoryToast = true;\r\n                    this.showToast = true;\r\n                } else if (res && res.data) {\r\n                    if (res.data.length > 0) {\r\n                        this.setEventHistoryData(res.data);\r\n                        this.setEventHistorySearchMode(false)\r\n                        let allDeviceTypes = this.getAllDeviceTypesFromEventHistoryResult();\r\n                        let allEvents = this.getAllEventTypesFromEventHistoryResult();\r\n                        this.setEventHistoryFilters(allDeviceTypes, allEvents)\r\n                    } else {\r\n                        this.setEventHistorySearchMode(true)\r\n                        this.successMessage = 'No Results Matching the Criteria have been Found.';\r\n                        this.errorMessage = null;\r\n                        //this.showResetPasswordModal = false;\r\n                        //this.showEventHistoryToast = true;\r\n                        this.showToast = true;\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    @action searchUserAuditActions(queryParams) {\r\n        const id = this.selectedBackofficeUserID;\r\n        this.isLoading = true;\r\n        fetch(`${config.SERVER_BASE_URL}/v1/user/${id}/auditactions${queryParams}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n\r\n                if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    //this.showResetPasswordModal = false;\r\n                    this.showToast = true;\r\n                } else if (res) {\r\n                    if (res.length > 0) {\r\n                        this.setUserAuditActionsData(res);\r\n                    } else {\r\n                        this.successMessage = 'No Results Matching the Criteria have been Found.';\r\n                        this.errorMessage = null;\r\n                        //this.showResetPasswordModal = false;\r\n                        this.showToast = true;\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    @action updatePlayer(isFlag = false) {\r\n\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity, account} = _selectedPlayerDetails;\r\n        const id = this.selectedPlayerID;\r\n        this.isLoading = true;\r\n        const playerData = {\r\n            firstName: identity.hasOwnProperty('firstName') && identity['firstName'] ? identity['firstName'].trim() : '',\r\n            lastName: identity.hasOwnProperty('lastName') && identity['lastName'] ? identity['lastName'].trim() : '',\r\n            email: account.hasOwnProperty('email') && account['email'] ? account['email'].trim() : '',\r\n            address1: identity.hasOwnProperty('address1') && identity['address1'] ? identity['address1'].trim() : '',\r\n            address2: identity.hasOwnProperty('address2') && identity['address2'] ? identity['address2'].trim() : '',\r\n            city: identity.hasOwnProperty('city') && identity['city'] ? identity['city'].trim() : '',\r\n            state: identity.hasOwnProperty('state') && identity['state'] ? identity['state'] : '',\r\n            zip5: identity.hasOwnProperty('zip5') && identity['zip5'] ? identity['zip5'].trim() : '',\r\n            phone: identity.hasOwnProperty('phone') && identity['phone'] ? identity['phone'].trim() : '',\r\n            gender: identity.hasOwnProperty('gender') && identity['gender'] ? identity['gender'] : '',\r\n            dateOfBirth: identity.hasOwnProperty('dateOfBirth') && identity['dateOfBirth'] ? identity['dateOfBirth'] : '',\r\n            ssn: identity.hasOwnProperty('ssn') && identity['ssn'] ? identity['ssn'].trim() : ''\r\n        }\r\n\r\n        // Do not update SSN if its just last 4 digits that originally came from API response\r\n        if (identity.hasOwnProperty('ssn') && identity['ssn'] && identity['ssn'].trim().startsWith(\"***-**\")) {\r\n            delete playerData.ssn;\r\n        }\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/player/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(playerData),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n\r\n                if (res && res.message) {\r\n                    this.successMessage = res.message;\r\n                    this.errorMessage = null;\r\n                    this.showUpdateModal = false;\r\n                    this.showToast = true;\r\n                    this.playerHubNavigateToFirstTab = true;\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showUpdateModal = false;\r\n                    this.showToast = true;\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    @action updateSSNAndVerifyPlayer(identification1, identification2, comment1, comment2) {\r\n\r\n\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity, account} = _selectedPlayerDetails;\r\n        const id = this.selectedPlayerID;\r\n        this.isLoading = true;\r\n        const playerData = {\r\n            ssn: identity['ssn'].trim()\r\n        }\r\n\r\n        // Do not update SSN if its just last 4 digits that originally came from API response\r\n        if (identity['ssn'].trim().startsWith(\"***-**\")) {\r\n            delete playerData.ssn;\r\n        }\r\n\r\n        fetch(`${config.SERVER_BASE_URL}/v1/player/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(playerData),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n\r\n                if (res && res.message) {\r\n                    //this.successMessage = res.message;\r\n                    //this.errorMessage = null;\r\n                    //this.showUpdateModal = false;\r\n                    //this.showToast = true;\r\n                    //this.playerHubNavigateToFirstTab = true;\r\n                    this.verifyPlayer(identification1, identification2, comment1, comment2);\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showUpdateModal = false;\r\n                    this.showToast = true;\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    setPlayerData(data) {\r\n        if (data) {\r\n            const rows = Object.values(data).map(d => d);\r\n            this.tableHeader = [\r\n                {key: 'email', label: 'Email'},\r\n                {key: 'firstName', label: 'First Name'},\r\n                {key: 'lastName', label: 'Last Name'},\r\n                {key: 'address', label: 'Address', width: '30%'},\r\n                {key: 'select', label: 'Select'}\r\n            ];\r\n            this.tableRows = rows;\r\n        } else {\r\n            this.tableHeader = [];\r\n            this.tableRows = [];\r\n            this.showToast = true;\r\n        }\r\n    }\r\n\r\n    setTicketHistoryData(data) {\r\n        if (data) {\r\n            this.TicketHistoryAPIResult = data;\r\n            const rows = Object.values(data).map(d => d);\r\n            this.ticketHistoryTableHeader = [\r\n                {key: 'date', label: 'Date'},\r\n                {key: 'time', label: 'Time'},\r\n                {key: 'gameType', label: 'Game'},\r\n                {key: 'winStatus', label: 'Win Status'},\r\n                {key: 'amount', label: 'Amount'},\r\n                {key: 'status', label: 'Approval Status'},\r\n                {key: 'computedStatus', label: 'Ticket Status'},\r\n                {key: 'rejectReason', label: 'Reason', width: '12%'},\r\n                {key: 'barcode', label: 'Barcode'}\r\n            ];\r\n            rows.forEach(element => element.requestTimestamp = moment(element.requestTimestamp).format());\r\n            this.ticketHistoryTableRows = rows;\r\n        } else {\r\n            this.ticketHistoryTableHeader = [];\r\n            this.ticketHistoryTableRows = [];\r\n            this.showToast = true;\r\n        }\r\n    }\r\n\r\n    setTicketHistoryFilteredData(data) {\r\n        if (data) {\r\n            this.TicketHistoryFilteredResult = data;\r\n            const rows = Object.values(data).map(d => d);\r\n            this.ticketHistoryTableHeader = [\r\n                {key: 'date', label: 'Date'},\r\n                {key: 'time', label: 'Time'},\r\n                {key: 'gameType', label: 'Game'},\r\n                {key: 'winStatus', label: 'Win Status'},\r\n                {key: 'amount', label: 'Amount'},\r\n                {key: 'status', label: 'Approval Status'},\r\n                {key: 'computedStatus', label: 'Ticket Status'},\r\n                {key: 'rejectReason', label: 'Reason'},\r\n                {key: 'barcode', label: 'Barcode'}\r\n            ];\r\n            this.ticketHistoryTableRows = rows;\r\n        } else {\r\n            this.ticketHistoryTableHeader = [];\r\n            this.ticketHistoryTableRows = [];\r\n            this.showToast = true;\r\n        }\r\n    }\r\n\r\n    setTicketHistoryFilters(allGameTypes, allWinStatuses, allStatuses) {\r\n        this.allGameTypes = allGameTypes;\r\n        this.allWinStatuses = allWinStatuses;\r\n        this.allStatuses = allStatuses;\r\n    }\r\n\r\n    setEventHistoryData(data) {\r\n        if (data) {\r\n            this.EventHistoryAPIResult = data;\r\n            const rows = Object.values(data).map(d => d);\r\n            this.eventHistoryTableHeader = [\r\n                {key: 'date', label: 'Date'},\r\n                {key: 'time', label: 'Time'},\r\n                {key: 'clientOs', label: 'Device Type'},\r\n                {key: 'authEvent', label: 'Event'}\r\n            ];\r\n            rows.forEach(element => element.eventTimestamp = moment(element.eventTimestamp).format());\r\n            this.eventHistoryTableRows = rows;\r\n        } else {\r\n            this.eventHistoryTableHeader = [];\r\n            this.eventHistoryTableRows = [];\r\n            this.showToast = true;\r\n        }\r\n    }\r\n\r\n    setEventHistoryFilteredData(data) {\r\n        if (data) {\r\n            this.EventHistoryFilteredResult = data;\r\n            const rows = Object.values(data).map(d => d);\r\n            this.eventHistoryTableHeader = [\r\n                {key: 'date', label: 'Date'},\r\n                {key: 'time', label: 'Time'},\r\n                {key: 'clientOs', label: 'Device Type'},\r\n                {key: 'authEvent', label: 'Event'}\r\n            ];\r\n            this.eventHistoryTableRows = rows;\r\n        } else {\r\n            this.eventHistoryTableHeader = [];\r\n            this.eventHistoryTableRows = [];\r\n            this.showToast = true;\r\n        }\r\n    }\r\n\r\n    setEventHistoryFilters(allDeviceTypes, allEvents) {\r\n        this.allDeviceTypes = allDeviceTypes;\r\n        this.allEvents = allEvents;\r\n    }\r\n\r\n    setUserAuditActionsData(data) {\r\n        if (data) {\r\n            const rows = Object.values(data).map(d => d);\r\n            this.AuditActionsTableHeader = [\r\n                {key: 'date', label: 'Date'},\r\n                {key: 'time', label: 'Time'},\r\n                {key: 'target', label: 'Target'},\r\n                {key: 'actions', label: 'Action'},\r\n                {key: 'data', label: 'Data'}\r\n            ];\r\n            this.AuditActionsTableRows = rows;\r\n        } else {\r\n            this.AuditActionsTableHeader = [];\r\n            this.AuditActionsTableRows = [];\r\n            this.showToast = true;\r\n        }\r\n    }\r\n\r\n    setSelectedPlayerDetails(selectedId) {\r\n        if (this.tableRows && this.tableRows.length) {\r\n            const data = this.tableRows.find(row => row.playerId === selectedId);\r\n            this.selectedPlayerDetails = data;\r\n            this.titleText = `Player: ${data.firstName} ${data.lastName}`;\r\n            this.selectedPlayerID = selectedId;\r\n        }\r\n        this.selectedTabKey = 'Player Details';\r\n    }\r\n\r\n    setSelectedBackOfficeUserID(selectedId) {\r\n        this.selectedBackofficeUserID = selectedId;\r\n    }\r\n\r\n    setSelectedBackOfficeUserName(selectedUserName) {\r\n        this.selectedBackofficeUserName = selectedUserName;\r\n    }\r\n\r\n    setToast(flag) {\r\n        this.showToast = flag;\r\n        this.successMessage = null;\r\n        this.errorMessage = null;\r\n    }\r\n\r\n    setEventHistoryToast(flag) {\r\n        this.showEventHistoryToast = flag;\r\n        this.successMessage = null;\r\n        this.errorMessage = null;\r\n    }\r\n\r\n    setTicketHistoryToast(flag) {\r\n        this.showTicketHistoryToast = flag;\r\n        this.successMessage = null;\r\n        this.errorMessage = null;\r\n    }\r\n\r\n    // API call to reset player password\r\n    @action confirmPlayerEmail() {\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        const id = this.selectedPlayerID;\r\n        const obj = {\r\n            firstName: identity['firstName'], lastName: identity['lastName']\r\n        };\r\n        this.isLoading = true;\r\n        let url = `${config.SERVER_BASE_URL}/v1/player/${id}/verify-email`;\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(obj),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n\r\n                if (res && res.message) {\r\n                    this.successMessage = res.message;\r\n                    this.errorMessage = null;\r\n                    this.showConfirmEmailModal = false;\r\n                    this.showToast = true;\r\n                    this.playerHubNavigateToFirstTab = true;\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showConfirmEmailModal = false;\r\n                    this.showToast = true;\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    // API calls to enable player account\r\n    @action enablePlayer(reason, comment) {\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        const id = this.selectedPlayerID;\r\n        const obj = {\r\n            firstName: identity['firstName'], lastName: identity['lastName'],\r\n            reason: reason, comment: comment\r\n        }\r\n        let url = `${config.SERVER_BASE_URL}/v1/player/${id}/enable`;\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(obj),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.message) {\r\n                    this.successMessage = res.message;\r\n                    this.errorMessage = null;\r\n                    this.showPlayerLockUnlockModal = false;\r\n                    this.showToast = true;\r\n                    this.playerHubNavigateToFirstTab = true;\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showPlayerLockUnlockModal = false;\r\n                    this.showToast = true;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    // API calls to disable player account\r\n    @action disablePlayer(reason, comment) {\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        const id = this.selectedPlayerID;\r\n        const obj = {\r\n            firstName: identity['firstName'], lastName: identity['lastName'],\r\n            reason: reason, comment: comment\r\n        }\r\n        let url = `${config.SERVER_BASE_URL}/v1/player/${id}/disable`;\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(obj),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.message) {\r\n                    this.successMessage = res.message;\r\n                    this.errorMessage = null;\r\n                    this.showPlayerLockUnlockModal = false;\r\n                    this.showToast = true;\r\n                    this.playerHubNavigateToFirstTab = true;\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showPlayerLockUnlockModal = false;\r\n                    this.showToast = true;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    // API calls to enable player account\r\n    @action enablePlayerScan(reason, comment) {\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        const id = this.selectedPlayerID;\r\n        const obj = {\r\n            firstName: identity['firstName'], lastName: identity['lastName'],\r\n            reason: reason, comment: comment\r\n        }\r\n        let url = `${config.SERVER_BASE_URL}/v1/player/${id}/enable-scans`;\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(obj),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.message) {\r\n                    this.successMessage = res.message;\r\n                    this.errorMessage = null;\r\n                    this.showPlayerEnableDisableModal = false;\r\n                    this.showToast = true;\r\n                    this.playerHubNavigateToFirstTab = true;\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showPlayerEnableDisableModal = false;\r\n                    this.showToast = true;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    // API calls to disable player account\r\n    @action disablePlayerScan(reason, comment) {\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        const id = this.selectedPlayerID;\r\n        const obj = {\r\n            firstName: identity['firstName'], lastName: identity['lastName'],\r\n            reason: reason, comment: comment\r\n        }\r\n        let url = `${config.SERVER_BASE_URL}/v1/player/${id}/disable-scans`;\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(obj),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.message) {\r\n                    this.successMessage = res.message;\r\n                    this.errorMessage = null;\r\n                    this.showPlayerEnableDisableModal = false;\r\n                    this.showToast = true;\r\n                    this.playerHubNavigateToFirstTab = true;\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showPlayerEnableDisableModal = false;\r\n                    this.showToast = true;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    // API call to add a person to the Frequent Casher list\r\n    @action AddFrequentCasher(firstName, lastName, ssn) {\r\n\r\n        const player = {\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            ssn: ssn\r\n        }\r\n\r\n        let url = `${config.SERVER_BASE_URL}/v1/player/add-frequent-casher`;\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(player),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.message) {\r\n                    this.showFrequentCasherConfirmModal = false;\r\n                    this.setToastErrorSuccessMessage(true, null, res.message)\r\n                } else if (res && res.error) {\r\n                    this.showFrequentCasherConfirmModal = false;\r\n                    this.setToastErrorSuccessMessage(true, res.error, null)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n\r\n    }\r\n\r\n    // API call to remove a person from the Frequent Casher list\r\n    @action RemoveFrequentCasher(firstName, lastName, ssn) {\r\n\r\n        const player = {\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            ssn: ssn\r\n        }\r\n\r\n        let url = `${config.SERVER_BASE_URL}/v1/player/remove-frequent-casher`;\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(player),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.message) {\r\n                    this.showFrequentCasherConfirmModal = false;\r\n                    this.setToastErrorSuccessMessage(true, null, res.message)\r\n                } else if (res && res.error) {\r\n                    this.showFrequentCasherConfirmModal = false;\r\n                    this.setToastErrorSuccessMessage(true, res.error, null)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    setShowUpdateModal(flag) {\r\n        this.showUpdateModal = flag\r\n    }\r\n\r\n    setShowConfirmEmailModal(flag) {\r\n        this.showConfirmEmailModal = flag\r\n    }\r\n\r\n    setShowPlayerVerifyModal(flag) {\r\n        this.showPlayerVerifyModal = flag\r\n    }\r\n\r\n    setshowPlayerLockUnlockModal(flag) {\r\n        this.showPlayerLockUnlockModal = flag\r\n    }\r\n    \r\n    setShowPlayerEnableDisableModal(flag) {\r\n        this.showPlayerEnableDisableModal = flag;\r\n    }\r\n\r\n    setShowFrequentCasherConfirmModal(flag) {\r\n        this.showFrequentCasherConfirmModal = flag\r\n    }\r\n\r\n    // API call to verify player\r\n    @action verifyPlayer(identification1, identification2, comment1, comment2) {\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        const id = this.selectedPlayerID;\r\n        const verifyData = {\r\n            firstName: identity['firstName'],\r\n            lastName: identity['lastName'],\r\n            identification1: identification1,\r\n            identification2: identification2,\r\n            comment1: comment1,\r\n            comment2: comment2\r\n        }\r\n        let url = `${config.SERVER_BASE_URL}/v1/player/${id}/verify`;\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(verifyData),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.message) {\r\n                    this.successMessage = res.message;\r\n                    this.errorMessage = null;\r\n                    this.showPlayerVerifyModal = false;\r\n                    this.showToast = true;\r\n                    this.playerHubNavigateToFirstTab = true;\r\n                } else if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showPlayerVerifyModal = false;\r\n                    this.showToast = true;\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    @action logAction(actionCategory, action, target = '', comments = '') {\r\n\r\n        const logline = {\r\n            category: actionCategory,\r\n            action: action,\r\n            target: target,\r\n            comments: comments\r\n        }\r\n\r\n        this.isLoading = true;\r\n        fetch(`${config.SERVER_BASE_URL}/v1/log/action`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(logline),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res) {\r\n\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    @action getUserInfo(id) {\r\n        this.selectedBackofficeUserID = id;\r\n        this.isLoading = true;\r\n        fetch(`${config.SERVER_BASE_URL}/v1/user/${id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res) {\r\n                    const {firstname, lastname} = res;\r\n                    this.UserNameTitleText = `${firstname} ${lastname}`\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    // filterJSONObjectArrayOnCriteria(input.data, {  \"gameType\": \"INSTANT\",  \"winStatus\":\"CASHING_LIMIT_EXCEEDED\",  \"status\":\"REJECTED\"});\r\n    // filterJSONObjectArrayOnCriteria([]);\r\n    // filterJSONObjectArrayOnCriteria(input);\r\n    @action filterJSONObjectArrayOnCriteria(list, criteria = '') {\r\n\r\n        if (list == null || list.length === 0)\r\n            return [];\r\n\r\n        if (criteria === '')\r\n            return list;\r\n\r\n        return list.filter(candidate =>\r\n            Object.keys(criteria).every(key => candidate[key] == criteria[key]\r\n            )\r\n        );\r\n    }\r\n\r\n    // getAllValuesForKeyFromJSONObjectArray(input.data)\r\n    @action getAllValuesForKeyFromJSONObjectArray(list, key) {\r\n\r\n        let result = new Set();\r\n\r\n        result.add('All')\r\n\r\n        let obj = ''\r\n        let option = ''\r\n        for (let i = 0; i < list.length; i++) {\r\n            obj = list[i];\r\n            option = obj[key];\r\n            if (option != null && option !== '')\r\n                result.add(option);\r\n        }\r\n\r\n        return Array.from(result);\r\n    }\r\n\r\n    @action filterTicketHistoryResult() {\r\n\r\n        let criteria = {};\r\n\r\n        if (this.selectedGameType && this.selectedGameType !== 'All' && this.selectedGameType !== '') {\r\n            criteria['gameType'] = this.selectedGameType;\r\n        }\r\n\r\n        if (this.selectedWinStatus && this.selectedWinStatus !== 'All' && this.selectedWinStatus !== '') {\r\n            criteria['winStatus'] = this.selectedWinStatus;\r\n        }\r\n\r\n        if (this.selectedStatus && this.selectedStatus !== 'All' && this.selectedStatus !== '') {\r\n            criteria['status'] = this.selectedStatus;\r\n        }\r\n\r\n        //alert(JSON.stringify(criteria))\r\n\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        const PlayerName = `Player Name: ${identity['firstName']} ${identity['lastName']}`\r\n\r\n        this.logAction(UserActionCategory.FILTER_RESULTS, UserAction.TICKET_HISTORY, PlayerName, criteria)\r\n\r\n        let data = this.filterJSONObjectArrayOnCriteria(this.TicketHistoryAPIResult, criteria);\r\n        this.setTicketHistoryFilteredData(data)\r\n    }\r\n\r\n    @action filterEventHistoryResult() {\r\n\r\n        let criteria = {};\r\n\r\n        if (this.selectedDeviceType && this.selectedDeviceType !== 'All' && this.selectedDeviceType !== '') {\r\n            criteria['clientOs'] = this.selectedDeviceType;\r\n        }\r\n\r\n        if (this.selectedEvent && this.selectedEvent !== 'All' && this.selectedEvent !== '') {\r\n            criteria['authEvent'] = this.selectedEvent;\r\n        }\r\n        //alert(JSON.stringify(criteria))\r\n\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        const PlayerName = `Player Name: ${identity['firstName']} ${identity['lastName']}`\r\n\r\n        this.logAction(UserActionCategory.FILTER_RESULTS, UserAction.EVENT_HISTORY, PlayerName, criteria)\r\n\r\n\r\n        let data = this.filterJSONObjectArrayOnCriteria(this.EventHistoryAPIResult, criteria);\r\n        this.setEventHistoryFilteredData(data)\r\n    }\r\n\r\n    // Returns all the values for the key - clientOs, from the Event History Results\r\n    @action getAllDeviceTypesFromEventHistoryResult() {\r\n        return this.getAllValuesForKeyFromJSONObjectArray(this.EventHistoryAPIResult, 'clientOs');\r\n    }\r\n\r\n    // Returns all the values for the key - AuthEvent, from the Event History Results\r\n    @action getAllEventTypesFromEventHistoryResult() {\r\n        return this.getAllValuesForKeyFromJSONObjectArray(this.EventHistoryAPIResult, 'authEvent');\r\n    }\r\n\r\n    // Returns all the values for the key - gameType, from the Ticket History Results\r\n    @action getAllGameTypesFromTicketHistoryResult() {\r\n        return this.getAllValuesForKeyFromJSONObjectArray(this.TicketHistoryAPIResult, 'gameType');\r\n    }\r\n\r\n    // Returns all the values for the key - winStatus, from the Ticket History Results\r\n    @action getAllWinStatusesFromTicketHistoryResult() {\r\n        return this.getAllValuesForKeyFromJSONObjectArray(this.TicketHistoryAPIResult, 'winStatus');\r\n    }\r\n\r\n    // Returns all the values for the key - status, from the Ticket History Results\r\n    @action getAllStatusesFromTicketHistoryResult() {\r\n        return this.getAllValuesForKeyFromJSONObjectArray(this.TicketHistoryAPIResult, 'status');\r\n    }\r\n\r\n    @action ClearTicketHistoryFilters() {\r\n        this.selectedGameType = 'All';\r\n        this.selectedWinStatus = 'All';\r\n        this.selectedStatus = 'All';\r\n        this.filterTicketHistoryResult();\r\n    }\r\n\r\n    @action ClearEventHistoryFilters() {\r\n        this.selectedDeviceType = 'All';\r\n        this.selectedEvent = 'All';\r\n        this.filterEventHistoryResult();\r\n    }\r\n\r\n    @action setSelectedGameType(val) {\r\n        this.selectedGameType = val;\r\n    }\r\n\r\n    @action setSelectedWinStatus(val) {\r\n        this.selectedWinStatus = val;\r\n    }\r\n\r\n    @action setSelectedStatus(val) {\r\n        this.selectedStatus = val;\r\n    }\r\n\r\n    @action setSelectedDeviceType(val) {\r\n        this.selectedDeviceType = val;\r\n    }\r\n\r\n    @action setSelectedEvent(val) {\r\n        this.selectedEvent = val;\r\n    }\r\n\r\n    showFileNewTab(data, isSkip = false) {\r\n        if (data === undefined || isSkip) return\r\n        let file = new Blob([data], {type: 'application/pdf'});\r\n        let fileURL = URL.createObjectURL(file);\r\n        window.open(fileURL);\r\n    }\r\n\r\n    @action downloadPDF(filename) {\r\n        let url = `${config.SERVER_BASE_URL}/v1/download/${filename}`;\r\n        fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json application/pdf',\r\n            },\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    this.setToastErrorSuccessMessage(true, 'No Document Found.', null)\r\n                    return\r\n                }\r\n                return response.blob();\r\n            })\r\n            .then(this.showFileNewTab)\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    setClaimHistoryData(data) {\r\n        if (data) {\r\n            const rows = Object.values(data).map(d => d.claim);\r\n\r\n            this.claimHistoryTableHeader = [\r\n                {key: 'date', label: 'Date'},\r\n                {key: 'time', label: 'Time'},\r\n                {key: 'referenceNumber', label: 'Claim ID'},\r\n                {key: 'status', label: 'Status'},\r\n            ];\r\n\r\n            rows.forEach(element => {\r\n                const date = moment(element.activeFrom).format('MM-DD-YYYY');\r\n                const time = moment(element.activeFrom).format(timeOfDayFormat);\r\n                element.date = date;\r\n                element.time = time;\r\n                // element.requestTimestamp = moment(element.requestTimestamp).format()\r\n            });\r\n            this.claimHistoryTableRows = rows;\r\n        } else {\r\n            this.claimHistoryTableHeader = [];\r\n            this.claimHistoryTableRows = [];\r\n            this.showToast = true;\r\n            this.successMessage = 'Player has no Claims';\r\n            this.errorMessage = null;\r\n        }\r\n    }\r\n\r\n    // API call to fetch tickets associated with a player\r\n    @action fetchAllClaims() {\r\n        const id = this.selectedPlayerID;\r\n        this.isLoading = true;\r\n        const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n        const {identity} = _selectedPlayerDetails;\r\n        const obj = {\r\n            firstName: identity['firstName'],\r\n            lastName: identity['lastName'],\r\n            playerId: identity['id'],\r\n            reason: 'reason',\r\n            comment: 'comment'\r\n        }\r\n        const url = `${config.SERVER_BASE_URL}/v1/player/${id}/claims`;\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(obj),\r\n        })\r\n            .then(response => response.json())\r\n            .then(res => {\r\n                if (res && res.error) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = res.error\r\n                    this.showToast = true;\r\n                } else if (res && res.claims) {\r\n                    if (res.claims.length > 0) {\r\n                        this.setClaimHistoryData(res.claims);\r\n                    } else {\r\n                        this.claimHistoryTableHeader = [];\r\n                        this.claimHistoryTableRows = [];\r\n                        this.showToast = true;\r\n                        this.successMessage = 'Player has no Claims';\r\n                        this.errorMessage = null;\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n                this.showToast = true;\r\n                this.successMessage = null;\r\n            });\r\n    }\r\n\r\n    setSelectedClaim(claim, cb, flag=false) {\r\n        if(flag) {\r\n            this.selectedPlayerDetails = {\r\n                identity: {\r\n                    firstName: claim.playerFirstName,\r\n                    lastName: claim.playerLastName\r\n                }\r\n            }\r\n        }\r\n        this.selectedClaimId = claim.referenceNumber;\r\n        this.selectedClaimStatus = claim.status;\r\n        cb();\r\n    }\r\n\r\n    setClaimDetails(data, count) {\r\n        if (data && data.currState) {\r\n            const rowData = data.prevStates || [];\r\n\r\n            const claimHistoryTableHeader = [\r\n                {key: 'date', label: 'Date'},\r\n                {key: 'time', label: 'Time'},\r\n                {key: 'status', label: 'Status'},\r\n                {key: 'prizeAmountInCents', label: 'Amount', type: 'currency', classes: 'currency-column'},\r\n            ];\r\n\r\n            rowData.forEach(element => {\r\n                const date = moment(element.activeFrom).format('MM-DD-YYYY');\r\n                const time = moment(element.activeFrom).format(timeOfDayFormat);\r\n\r\n                element.date = date;\r\n                element.time = time;\r\n\r\n                element.prizeAmountInCents = element.prizeAmountInCents ? (element.prizeAmountInCents / 100).toFixed(2) : 0;\r\n            });\r\n\r\n\r\n            const selectedClaimDetails = data.currState || null;\r\n\r\n            this.eSignatureURL = data.eSignatureUrl || null;\r\n\r\n            selectedClaimDetails.rejectedCount = count;\r\n\r\n            const stateTax = data.lineItems ? data.lineItems.find(item => item.type === 'TAX_STATE') : null;\r\n            selectedClaimDetails.taxWithholding = stateTax && stateTax.amountInCents ? (stateTax.amountInCents / 100).toFixed(2) : 0;\r\n\r\n            if (selectedClaimDetails.taxWithholding < 0) {\r\n                selectedClaimDetails.taxWithholding *= -1;\r\n            }\r\n            const offsetTax = data.lineItems ? data.lineItems.find(item => item.type === 'OFFSET') : null;\r\n            selectedClaimDetails.offsetWithholding = offsetTax && offsetTax.amountInCents ? (offsetTax.amountInCents / 100).toFixed(2) : 0;\r\n\r\n            if (selectedClaimDetails.offsetWithholding < 0) {\r\n                selectedClaimDetails.offsetWithholding *= -1;\r\n            }\r\n\r\n            selectedClaimDetails.netPaymentAmountInCents = (data.netPaymentAmountInCents).toFixed(2) || 0;\r\n            this.claimDetails = {\r\n                claimHistoryTableHeader,\r\n                claimHistoryTableRows: rowData,\r\n                selectedClaimDetails: selectedClaimDetails\r\n            };\r\n\r\n        } else {\r\n            this.claimDetails = {\r\n                claimHistoryTableHeader: [],\r\n                claimHistoryTableRows: []\r\n            };\r\n            this.showToast = true;\r\n        }\r\n    }\r\n\r\n    // API call to fetch claim details\r\n    @action fetchClaimDetails() {\r\n        const claimReferenceNumber = this.selectedClaimId;\r\n        if (this.selectedClaimId) {\r\n            this.isLoading = true;\r\n            const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n            const {identity} = _selectedPlayerDetails;\r\n            const obj = {\r\n                firstName: identity['firstName'],\r\n                lastName: identity['lastName'],\r\n                reason: 'reason',\r\n                comment: 'comment'\r\n            }\r\n            const url = `${config.SERVER_BASE_URL}/v1/claim/${claimReferenceNumber}/details`;\r\n            fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(obj),\r\n            })\r\n                .then(response => response.json())\r\n                .then(res => {\r\n                    if (res && res.error) {\r\n                        this.successMessage = null;\r\n                        this.errorMessage = res.error\r\n                        this.showToast = true;\r\n                    } else if (res && res.claim) {\r\n                        if (res.claim.prevStates) {\r\n                            let count = 0;\r\n                            if (res.hasOwnProperty('rejectCount')) {\r\n                                count = res.rejectCount;\r\n                            }\r\n                            this.setClaimDetails(res.claim, count);\r\n                        } else {\r\n                            this.successMessage = 'No Results.';\r\n                            this.errorMessage = null;\r\n                            this.showToast = true;\r\n                        }\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.errorMessage = error.toString();\r\n                });\r\n        }\r\n    }\r\n\r\n    setPaymentHistoryData(data) {\r\n        const rows = data.map(item => {\r\n            if (item.details) {\r\n                const {createdAt, amountInCents} = item.details;\r\n                const date = moment(createdAt).format('MM-DD-YYYY');\r\n                const time = moment(createdAt).format(timeOfDayFormat);\r\n                item.date = date;\r\n                item.time = time;\r\n                item.amount = amountInCents ? (amountInCents / 100) : 0;\r\n                item.amount = item.amount.toFixed(2);\r\n            }\r\n            return item;\r\n        })\r\n        this.paymentHistoryData = rows || [];\r\n    }\r\n\r\n    // API call to fetch claim payment history data\r\n    @action fetchPaymentHistoryDetails() {\r\n        const claimReferenceNumber = this.selectedClaimId;\r\n        if (this.selectedClaimId) {\r\n            this.isLoading = true;\r\n            const _selectedPlayerDetails = JSON.parse(JSON.stringify(this.selectedPlayerDetails));\r\n            const {identity} = _selectedPlayerDetails;\r\n            const obj = {\r\n                firstName: identity['firstName'],\r\n                lastName: identity['lastName'],\r\n                reason: 'reason',\r\n                comment: 'comment'\r\n            }\r\n            const url = `${config.SERVER_BASE_URL}/v1/claim/${claimReferenceNumber}/transactions/history`;\r\n            fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(obj),\r\n            })\r\n                .then(response => response.json())\r\n                .then(res => {\r\n                    if (res && res.error) {\r\n                        this.successMessage = null;\r\n                        this.errorMessage = res.error\r\n                        this.showToast = true;\r\n                    } else if (res && res.transactions) {\r\n                        this.setPaymentHistoryData(res.transactions);\r\n                    } else {\r\n                        this.successMessage = 'No Results.';\r\n                        this.errorMessage = null;\r\n                        this.showToast = true;\r\n                        this.paymentHistoryData = []\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.errorMessage = error.toString();\r\n                });\r\n        }\r\n    }\r\n    \r\n    @action clearESig(){\r\n        this.eSignatureURL = null;\r\n    }\r\n\r\n    /*\r\n    @action fetchESigFormForClaim() {\r\n        const id = this.selectedClaimId;\r\n        let isFailed = false;\r\n        fetch(`${config.SERVER_BASE_URL}/v1/claim/${id}/ESig`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json application/pdf',\r\n            },\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    this.setToastErrorSuccessMessage(true, 'No E-Signature is associated to this Claim.', null)\r\n                    return\r\n                }\r\n                if(response.status === 404) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = 'No E-Signature is associated to this Claim';\r\n                    this.showToast = true;\r\n                    isFailed = true;\r\n                    return 0;\r\n                }\r\n                return response.blob(); //Will need to examine the data coming back here\r\n            })\r\n            .then(data => this.eSignatureData = data)\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n    */\r\n    @action fetchW2GFormForClaim() {\r\n        const id = this.selectedClaimId;\r\n        let isFailed = false;\r\n        fetch(`${config.SERVER_BASE_URL}/v1/claim/${id}/W2G`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json application/pdf',\r\n            },\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    this.setToastErrorSuccessMessage(true, 'No W2G is attached to this Claim.', null)\r\n                    return\r\n                }\r\n                if (response.status === 404) {\r\n                    this.successMessage = null;\r\n                    this.errorMessage = 'No W2G is attached to this Claim';\r\n                    this.showToast = true;\r\n                    isFailed = true;\r\n                    return 0;\r\n                }\r\n                return response.blob();\r\n            })\r\n            .then(data => this.showFileNewTab(data, isFailed))\r\n            .catch((error) => {\r\n                this.errorMessage = error.toString();\r\n            });\r\n    }\r\n\r\n    setSelectedTabKey(key) {\r\n        this.selectedTabKey = key;\r\n    }\r\n\r\n    setPaymentDetails(data, cb) {\r\n        this.paymentDetails = data;\r\n        cb();\r\n    }\r\n\r\n    setSpinnerState(flag) {\r\n        this.isSpinnerLoading = flag;\r\n    }\r\n\r\n    @action unlockUser(userData, cb) {\r\n        if(userData && userData.id) {\r\n\r\n            this.loading = true;\r\n            const obj ={\r\n                id: userData.id,\r\n                username: userData.username\r\n            }\r\n            fetch(`${config.SERVER_BASE_URL}/v1/user/unlock`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${localStorage.getItem('accessToken')}`,\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json application/pdf',\r\n                },\r\n                body: JSON.stringify(obj),\r\n            })\r\n                .then(response => response.json())\r\n                .then(res => {\r\n                    if (res && res.error) {\r\n                        this.mainSuccessMessage = null;\r\n                        this.mainErrorMessage = res.error.toString();\r\n                        this.showMainToast = true;\r\n                        this.isSpinnerLoading = false;\r\n                    } else if (res && res.success) {\r\n                        this.mainErrorMessage = null;\r\n                        this.mainSuccessMessage = 'User unlocked';\r\n                        this.showMainToast = true;\r\n                        this.isSpinnerLoading = false;\r\n                        cb();\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    this.mainErrorMessage = error.toString();\r\n                    this.mainSuccessMessage = null;\r\n                    this.showMainToast = true;\r\n                    this.isSpinnerLoading = false;\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}