{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\ReactExampleCode\\\\test-typescript-compile-within-a-javascript-project\\\\Code\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{Link}from'react-router-dom';//import styles from './../../../../../styles/FindPrescriptionHome.module.scss';\n/**\r\n * @context prescription\r\n * \r\n * uses \r\n * \r\n * @serviceApi prescription\r\n *  \r\n * \r\n * */ /**\r\n * @Pages\r\n * \r\n * It does a search of the prescirption wanted by entering key words\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language // the languages selected English|Spanish\r\n * @param location //the location where to find the prescription\r\n * @param prescriptionFromRoute // the prescription passed in when using the route function\r\n * @useState getPrescriptionDetails // prescrition set from the setPrescriptionsDetails\r\n * @useState setPrescriptionDetails // sets the prescription chosen \r\n */export default function FindPrescriptionHome(_ref){var language=_ref.language,_ref$location=_ref.location,location=_ref$location===void 0?undefined:_ref$location,prescriptionFromRoute=_ref.prescriptionFromRoute,getPrescriptionDetails=_ref.getPrescriptionDetails,setPrescriptionDetails=_ref.setPrescriptionDetails;/**@gets @sets the prescriptions array passed in from the mutation used for datalist */var _useState=useState([]),_useState2=_slicedToArray(_useState,2),prescriptionsforDataList=_useState2[0],setPrescriptionsForDataList=_useState2[1];/**@gets @sets The prescriptionDetails to be passed in the Prescriptions Detail component */var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),prescriptionDetailsForPrescriptionDetailComponent=_useState4[0],setPrescriptionDetailsForPrescriptionDetailComponent=_useState4[1];/** @gets @sets resets a flag to set prescritpionFromRoute to null */var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),resetDataFromRoute=_useState6[0],setResetDataFromRoute=_useState6[1];/**@gets @sets the value from the input field */var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),valueForInputValue=_useState8[0],setValueForInputValue=_useState8[1];/**@gets @sets the value from the input field */var _useState9=useState(prescriptionFromRoute!==undefined?true:false),_useState10=_slicedToArray(_useState9,2),ifPrescriptionDetailsExists=_useState10[0],setIfPrescriptionDetailsExists=_useState10[1];/**\r\n   * Call to the service Prescription to retreve the prescriptionsfordatalist available\r\n   * @useState  setPrescriptionDetailsForPrescriptionDetailComponent\r\n   * @param setPrescriptionDetails // passed in from the function\r\n   * @useState\r\n   *  \r\n   */ // const [getPrescriptions, { loading: mutationLoading, error: mutationError },] = useMutation(GET_PRESCRIPTIONS, {\n//   onError(err) {\n//     console.log(err);\n//     alert(err);\n//   },\n//   update(proxy, result) {\n//     console.log('result',result);\n//     if (result.data.prescription.code === 200) {\n//       if (result.data.prescription.prescriptions.length === 1) {\n//         setIfPrescriptionDetailsExists(true);\n//         console.log('result.data', result.data.prescription.prescriptions);\n//         //setPrescriptionDetailsForPrescriptionDetailComponent(result.data.prescription.prescriptions);\n//         let data = {\n//           search_name: result.data.prescription.prescriptions[0]._text,\n//         }\n//         setPrescriptionDetails(data);\n//         return;\n//       }\n//       let options = [];\n//       setPrescriptionsForDataList(result.data.prescription.prescriptions);\n//     }\n//     else{\n//       alert(result.data.prescription.message);\n//     }\n//   }\n// });\n/**\r\n   * It searches for the prescription comming from the input \r\n   * @param e \r\n   * @useState setValueForInputValue // sets the value on the input field\r\n   * @mutation getPrescriptions\r\n   * @context prescription // used for apollo.link curently baseUri\r\n   */var clicked=0;var searchPrescription=function searchPrescription(e){e.preventDefault();var value=prescriptionsforDataList.find(function(element){return e.target.value.trim()===element._text;});if(value!==undefined&&value._text===e.target.value.trim()){console.log('inside test',value._text,value._text===e.target.value.trim());var data={search_name:value._text};setIfPrescriptionDetailsExists(true);setPrescriptionDetails(data);}else if(e.target.value.trim().length>=3){console.log('clicked',clicked++);//getPrescriptions({ variables: { prescription: e.target.value.trim() }, context: { clientName: 'prescriptions' } });\n}else{console.log('minimum of 3 charaters');}setValueForInputValue(e.target.value.trim());};/**\r\n   * Resets the component to initial state \r\n   * @param e\r\n   * @useState setValueForInputValue\r\n   * @useState set_prescriptionDetails\r\n   * @useState setResetDataFromValue\r\n   */var clearInput=function clearInput(e){setValueForInputValue(\"\");setPrescriptionDetailsForPrescriptionDetailComponent([]);setResetDataFromRoute(true);setIfPrescriptionDetailsExists(false);};/**\r\n   * Use for when the prescription is passed in by the route\r\n   * @funciton setPrescriptionsDataFromRoute\r\n   */useEffect(function(){if(prescriptionFromRoute!==undefined){setPrescriptionsDataFromRoute();setIfPrescriptionDetailsExists(true);}},[]);/**\r\n   * Sets the Prescription been passed in by the route\r\n   * @param setPrescriptionDetails // useState passed in from the function\r\n   * @useState setValueForInputValue\r\n   * @mutation getPrescriptions  \r\n   */var setPrescriptionsDataFromRoute=function setPrescriptionsDataFromRoute(){var value=JSON.parse(prescriptionFromRoute);setPrescriptionDetails(value);setValueForInputValue(value.search_name);//getPrescriptions({ variables: { prescription: prescriptionFromRoute.search_name } });\n};return/*#__PURE__*/React.createElement(\"div\",null,resetDataFromRoute&&(prescriptionFromRoute=undefined),(language==='english'||language===undefined)&&/*#__PURE__*/React.createElement(React.Fragment,null,\" \",/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(\"span\",null,\"Start Here: Step 1 of 3: \"),\"Your Prescription\")),language==='spanish'&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h3\",null,/*#__PURE__*/React.createElement(\"span\",null,'<Spanish>',\" Start Here: Step 1 of 3: \"),\"Your Prescription\")),/*#__PURE__*/React.createElement(\"form\",{id:\"find_rx\",className:\"find_rx\"},(language==='english'||language===undefined)&&/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"find_rx\"},\"Enter Drug Name\"),language==='spanish'&&/*#__PURE__*/React.createElement(\"label\",{htmlFor:\"find_rx\"},'<Spanish>',\"Enter Drug Name\"),/*#__PURE__*/React.createElement(\"input\",{autoComplete:\"off\",onFocus:clearInput,placeholder:\"Type Drug Name\",id:\"first_rx\",value:valueForInputValue,type:\"text\",list:\"prescriptions\",onChange:searchPrescription}),/*#__PURE__*/React.createElement(\"datalist\",{className:\"desktop-main-left-find-prescription-home-datalist\",id:\"prescriptions\"},prescriptionsforDataList.map(function(element,i){return/*#__PURE__*/React.createElement(\"option\",{key:\"prescription\".concat(i),value:element._text});})),ifPrescriptionDetailsExists&&/*#__PURE__*/React.createElement(React.Fragment,null,console.log('ifPrescriptionDetailsExists',ifPrescriptionDetailsExists),/*#__PURE__*/React.createElement(\"div\",{style:{width:'inherit',height:'3vh'}},\" \"),/*#__PURE__*/React.createElement(\"div\",{className:\"clickthrough\"},/*#__PURE__*/React.createElement(\"a\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"back cursor\",onClick:clearInput},\"Start Over\")),/*#__PURE__*/React.createElement(Link,{className:\"cursor\",to:{pathname:'/src/components/Home',query:{component:'location',prescriptions:JSON.stringify(getPrescriptionDetails),location:location,language:language}}},\" \",(language==='english'||language===undefined)&&'Next: Step2 >>',\" \",language==='spanish'&&'<Spanish>Next: Step2 >>'))),!ifPrescriptionDetailsExists&&/*#__PURE__*/React.createElement(\"section\",{className:\"help\"},(language==='english'||language===undefined)&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"p\",null,\"FirstRx is a free service. No login or account is needed.\"),/*#__PURE__*/React.createElement(\"ol\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Enter Your Prescription information (Step 1)\"),/*#__PURE__*/React.createElement(\"li\",null,\"Indicate your location (Step 2)\"),/*#__PURE__*/React.createElement(\"li\",null,\"Pick a coupon from the pharmacy where you\\u2019d like to go. Pharmacies might have different prices but we\\u2019ll show show you the lowest priced pharmacies first. (Step 3)\")),/*#__PURE__*/React.createElement(\"p\",null,\"Then FirstRx will text you a coupon that you can show to the pharmacist.\")),language==='spanish'&&/*#__PURE__*/React.createElement(React.Fragment,null,'<Spanish>',/*#__PURE__*/React.createElement(\"p\",null,\"FirstRx is a free service. No login or account is needed.\"),/*#__PURE__*/React.createElement(\"ol\",null,/*#__PURE__*/React.createElement(\"li\",null,\"Enter Your Prescription information (Step 1)\"),/*#__PURE__*/React.createElement(\"li\",null,\"Indicate your location (Step 2)\"),/*#__PURE__*/React.createElement(\"li\",null,\"Pick a coupon from the pharmacy where you\\u2019d like to go. Pharmacies might have different prices but we\\u2019ll show show you the lowest priced pharmacies first. (Step 3)\")),/*#__PURE__*/React.createElement(\"p\",null,\"Then FirstRx will text you a coupon that you can show to the pharmacist.\")))));}","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/ReactExampleCode/test-typescript-compile-within-a-javascript-project/Code/src/pages/src/components/Home/FindPrescriptionHome/index.tsx"],"names":["React","useEffect","useState","Link","FindPrescriptionHome","language","location","undefined","prescriptionFromRoute","getPrescriptionDetails","setPrescriptionDetails","prescriptionsforDataList","setPrescriptionsForDataList","prescriptionDetailsForPrescriptionDetailComponent","setPrescriptionDetailsForPrescriptionDetailComponent","resetDataFromRoute","setResetDataFromRoute","valueForInputValue","setValueForInputValue","ifPrescriptionDetailsExists","setIfPrescriptionDetailsExists","clicked","searchPrescription","e","preventDefault","value","find","element","target","trim","_text","console","log","data","search_name","length","clearInput","setPrescriptionsDataFromRoute","JSON","parse","map","i","width","height","pathname","query","component","prescriptions","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport PrescriptionDetailedForm from '../../component/PrescriptionDetailedForm';\r\nimport { Link } from 'react-router-dom';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n//import styles from './../../../../../styles/FindPrescriptionHome.module.scss';\r\n\r\n/**\r\n * @context prescription\r\n * \r\n * uses \r\n * \r\n * @serviceApi prescription\r\n *  \r\n * \r\n * */\r\n\r\n\r\n\r\n/**\r\n * @Pages\r\n * \r\n * It does a search of the prescirption wanted by entering key words\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language // the languages selected English|Spanish\r\n * @param location //the location where to find the prescription\r\n * @param prescriptionFromRoute // the prescription passed in when using the route function\r\n * @useState getPrescriptionDetails // prescrition set from the setPrescriptionsDetails\r\n * @useState setPrescriptionDetails // sets the prescription chosen \r\n */\r\n\r\nexport default function FindPrescriptionHome({ language, location = undefined, prescriptionFromRoute, getPrescriptionDetails, setPrescriptionDetails }:any) {\r\n\r\n  /**@gets @sets the prescriptions array passed in from the mutation used for datalist */\r\n  const [prescriptionsforDataList, setPrescriptionsForDataList] = useState([]);\r\n\r\n  /**@gets @sets The prescriptionDetails to be passed in the Prescriptions Detail component */\r\n  const [prescriptionDetailsForPrescriptionDetailComponent, setPrescriptionDetailsForPrescriptionDetailComponent] = useState([]);\r\n\r\n  /** @gets @sets resets a flag to set prescritpionFromRoute to null */\r\n  const [resetDataFromRoute, setResetDataFromRoute] = useState(false);\r\n\r\n  /**@gets @sets the value from the input field */\r\n  const [valueForInputValue, setValueForInputValue] = useState(\"\");\r\n\r\n  /**@gets @sets the value from the input field */\r\n  const [ifPrescriptionDetailsExists, setIfPrescriptionDetailsExists] = useState((prescriptionFromRoute !== undefined ? true : false));\r\n\r\n\r\n\r\n \r\n  \r\n\r\n  /**\r\n   * Call to the service Prescription to retreve the prescriptionsfordatalist available\r\n   * @useState  setPrescriptionDetailsForPrescriptionDetailComponent\r\n   * @param setPrescriptionDetails // passed in from the function\r\n   * @useState\r\n   *  \r\n   */\r\n  // const [getPrescriptions, { loading: mutationLoading, error: mutationError },] = useMutation(GET_PRESCRIPTIONS, {\r\n  //   onError(err) {\r\n  //     console.log(err);\r\n  //     alert(err);\r\n  //   },\r\n  //   update(proxy, result) {\r\n  //     console.log('result',result);\r\n  //     if (result.data.prescription.code === 200) {\r\n  //       if (result.data.prescription.prescriptions.length === 1) {\r\n  //         setIfPrescriptionDetailsExists(true);\r\n  //         console.log('result.data', result.data.prescription.prescriptions);\r\n  //         //setPrescriptionDetailsForPrescriptionDetailComponent(result.data.prescription.prescriptions);\r\n  //         let data = {\r\n  //           search_name: result.data.prescription.prescriptions[0]._text,\r\n  //         }\r\n  //         setPrescriptionDetails(data);\r\n  //         return;\r\n  //       }\r\n  //       let options = [];\r\n  //       setPrescriptionsForDataList(result.data.prescription.prescriptions);\r\n  //     }\r\n  //     else{\r\n  //       alert(result.data.prescription.message);\r\n  //     }\r\n  //   }\r\n  // });\r\n\r\n  /**\r\n   * It searches for the prescription comming from the input \r\n   * @param e \r\n   * @useState setValueForInputValue // sets the value on the input field\r\n   * @mutation getPrescriptions\r\n   * @context prescription // used for apollo.link curently baseUri\r\n   */\r\n  let clicked = 0;\r\n  const searchPrescription = (e:any) => {\r\n    e.preventDefault();\r\n    let value:any = prescriptionsforDataList.find((element:any) => e.target.value.trim() === element._text );\r\n    if(value !== undefined && value._text === e.target.value.trim())\r\n    {\r\n      console.log( 'inside test', value._text, value._text === e.target.value.trim() )\r\n      let data = {\r\n        search_name: value._text,\r\n      }\r\n      setIfPrescriptionDetailsExists(true);\r\n      setPrescriptionDetails(data);\r\n      \r\n    }  \r\n    else if (e.target.value.trim().length >= 3 )\r\n    {  \r\n      console.log('clicked',clicked++);     \r\n       //getPrescriptions({ variables: { prescription: e.target.value.trim() }, context: { clientName: 'prescriptions' } });\r\n    }\r\n    else{\r\n      console.log('minimum of 3 charaters');\r\n    }\r\n    setValueForInputValue(e.target.value.trim());\r\n\r\n  }\r\n  /**\r\n   * Resets the component to initial state \r\n   * @param e\r\n   * @useState setValueForInputValue\r\n   * @useState set_prescriptionDetails\r\n   * @useState setResetDataFromValue\r\n   */\r\n  const clearInput = (e:any) => {\r\n    setValueForInputValue(\"\");\r\n    setPrescriptionDetailsForPrescriptionDetailComponent([]);\r\n    setResetDataFromRoute(true);\r\n    setIfPrescriptionDetailsExists(false);\r\n  }\r\n\r\n  /**\r\n   * Use for when the prescription is passed in by the route\r\n   * @funciton setPrescriptionsDataFromRoute\r\n   */\r\n  useEffect(() => {\r\n\r\n    if (prescriptionFromRoute !== undefined) {\r\n      setPrescriptionsDataFromRoute();\r\n      setIfPrescriptionDetailsExists(true);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Sets the Prescription been passed in by the route\r\n   * @param setPrescriptionDetails // useState passed in from the function\r\n   * @useState setValueForInputValue\r\n   * @mutation getPrescriptions  \r\n   */\r\n  const setPrescriptionsDataFromRoute = () => {\r\n    let value = JSON.parse(prescriptionFromRoute);\r\n\r\n    setPrescriptionDetails(value);\r\n    setValueForInputValue(value.search_name);\r\n    //getPrescriptions({ variables: { prescription: prescriptionFromRoute.search_name } });\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      {/**\r\n       * refrencing version of: 1/28/2021\r\n       * source: https://github.com/emilynorton?tab=repositories\r\n       */}\r\n      {/* {mutationError && <>{console.log('m',mutationError)}</>}\r\n      {mutationLoading && < div className='circular_progress'>\r\n        <CircularProgress style={{ width: '6vmax', height: '6vmax' }} />\r\n      </div>} */}\r\n       \r\n      {resetDataFromRoute && (prescriptionFromRoute = undefined)}\r\n      {(language === 'english' || language === undefined) && <> <h3><span>Start Here: Step 1 of 3: </span>Your Prescription</h3></>}\r\n      {language === 'spanish' && <><h3><span>{'<Spanish>'} Start Here: Step 1 of 3: </span>Your Prescription</h3></>}\r\n\r\n\r\n      <form id=\"find_rx\" className=\"find_rx\">\r\n        {(language === 'english' || language === undefined) && <label htmlFor=\"find_rx\">Enter Drug Name</label>}\r\n        {language === 'spanish' && <label htmlFor=\"find_rx\">{'<Spanish>'}Enter Drug Name</label>}\r\n\r\n        <input\r\n          autoComplete=\"off\"\r\n          onFocus={clearInput}\r\n          placeholder=\"Type Drug Name\"\r\n          id='first_rx'\r\n          value={valueForInputValue}\r\n          type=\"text\"\r\n          list=\"prescriptions\"\r\n          onChange={searchPrescription}\r\n        />\r\n        <datalist\r\n          className=\"desktop-main-left-find-prescription-home-datalist\"\r\n          id=\"prescriptions\">\r\n         {prescriptionsforDataList.map((element:any,i) => <option key={`prescription${i}`} value={element._text} />)}\r\n        </datalist>\r\n        \r\n\r\n        {ifPrescriptionDetailsExists &&\r\n          <>\r\n            {console.log('ifPrescriptionDetailsExists',ifPrescriptionDetailsExists)}\r\n            <div style={{width:'inherit',height:'3vh'}} > </div>\r\n             {/* <PrescriptionDetailedForm language={language} dataFromServer={prescriptionDetailsForPrescriptionDetailComponent} prescriptionFromRoute={prescriptionFromRoute} setPrescriptionDetails={setPrescriptionDetails} /> */}\r\n            <div className=\"clickthrough\">\r\n              <a><div className=\"back cursor\" onClick={clearInput}>Start Over</div></a>\r\n              <Link className='cursor' to={                \r\n                  {\r\n                    pathname: '/src/components/Home',\r\n                    query: {\r\n                      component: 'location',\r\n                      prescriptions: JSON.stringify(getPrescriptionDetails),\r\n                      location: location,\r\n                      language: language\r\n                    }\r\n                  }                \r\n                }\r\n              > {(language === 'english' || language === undefined) && 'Next: Step2 >>'} {language === 'spanish' && '<Spanish>Next: Step2 >>'}\r\n              </Link>\r\n            </div>\r\n\r\n          </>}\r\n\r\n        {(!ifPrescriptionDetailsExists) && <section className=\"help\">\r\n          {(language === 'english' || language === undefined) &&\r\n            <>\r\n              <p>FirstRx is a free service. No login or account is needed.</p>\r\n\r\n              <ol>\r\n                <li>Enter Your Prescription information (Step 1)</li>\r\n                <li>Indicate your location (Step 2)</li>\r\n                <li>Pick a coupon from the pharmacy where you’d like to go. Pharmacies might have different prices but we’ll show show you the lowest priced pharmacies first. (Step 3)</li>\r\n              </ol>\r\n\r\n              <p>Then FirstRx will text you a coupon that you can show to the pharmacist.</p>\r\n            </>}\r\n          {(language === 'spanish') &&\r\n            <>\r\n              {'<Spanish>'}\r\n              <p>FirstRx is a free service. No login or account is needed.</p>\r\n\r\n              <ol>\r\n                <li>Enter Your Prescription information (Step 1)</li>\r\n                <li>Indicate your location (Step 2)</li>\r\n                <li>Pick a coupon from the pharmacy where you’d like to go. Pharmacies might have different prices but we’ll show show you the lowest priced pharmacies first. (Step 3)</li>\r\n              </ol>\r\n\r\n              <p>Then FirstRx will text you a coupon that you can show to the pharmacist.</p>\r\n            </>}\r\n\r\n        </section>}\r\n\r\n      </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/* \r\n        \r\n        used in version 1 with wire frames\r\n        // version 1 from wire frames\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=25%3A1&viewport=520%2C440%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=102%3A1390&viewport=212%2C389%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=349%3A797&viewport=317%2C508%2C0.5&scaling=scale-down \r\n\r\n\r\n      {(language === 'english' || language === undefined) && <span className={styles.desktop_main_left_find_prescription_home_title} >Step 1: Your Prescription</span>}\r\n      {language === 'spanish'  && <span className={styles.desktop_main_left_find_prescription_home_title} >{'<Spanish>'} Step 1: Your Prescription</span>}\r\n       \r\n        <input \r\n        autoComplete=\"off\" \r\n        onFocus={clearInput} \r\n        placeholder=\"Type Drug Name\" \r\n        className={styles.desktop_main_left_find_prescription_home_input}\r\n        value={valueForInputValue} \r\n        type=\"text\" \r\n        list=\"prescriptionsfordatalist\" \r\n        onChange={searchPrescription} \r\n        id=\"prescription\" />\r\n        <datalist \r\n        className=\"desktop-main-left-find-prescription-home-datalist\" \r\n        id=\"prescriptions\">\r\n          {prescriptionsfordatalist}\r\n        </datalist>\r\n      \r\n      {prescriptionDetailsForPrescriptionDetailComponent.length === 1 &&\r\n        <>\r\n          <PrescriptionDetailedForm  language={language} dataFromServer={prescriptionDetailsForPrescriptionDetailComponent} prescriptionFromRoute={prescriptionFromRoute} setPrescriptionDetails={setPrescriptionDetails} />\r\n          <button className={`next-button ${styles.next_button_find_prescription}`} onClick={() => router.push\r\n            (\r\n              {\r\n                pathname: '/src/components/Home',\r\n                query: {\r\n                  component: 'location',\r\n                  prescriptions: JSON.stringify(getPrescriptionDetails),\r\n                  location: location,\r\n                  language:language\r\n                }\r\n              }\r\n            )\r\n          }> {(language === 'english' || language === undefined) && 'Next: Step2 >>'} {language === 'spanish'  && '<Spanish>Next: Step2 >>'} </button>\r\n          {mutationLoading && <p>Loading...</p>}\r\n          {mutationError && <p>Error :( Please try again</p>}\r\n        </>\r\n      } */}\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}