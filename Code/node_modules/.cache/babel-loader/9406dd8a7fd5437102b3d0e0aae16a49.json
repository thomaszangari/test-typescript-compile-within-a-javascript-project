{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tomsa\\\\OneDrive\\\\Desktop\\\\ReactExampleCode\\\\test-typescript-compile-within-a-javascript-project\\\\Code\\\\src\\\\pages\\\\src\\\\components\\\\Home\\\\FindPrescriptionHome\\\\index.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n//import styles from './../../../../../styles/FindPrescriptionHome.module.scss';\n\n/**\r\n * @context prescription\r\n * \r\n * uses \r\n * \r\n * @serviceApi prescription\r\n *  \r\n * \r\n * */\n\n/**\r\n * @Pages\r\n * \r\n * It does a search of the prescirption wanted by entering key words\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language // the languages selected English|Spanish\r\n * @param location //the location where to find the prescription\r\n * @param prescriptionFromRoute // the prescription passed in when using the route function\r\n * @useState getPrescriptionDetails // prescrition set from the setPrescriptionsDetails\r\n * @useState setPrescriptionDetails // sets the prescription chosen \r\n */\nexport default function FindPrescriptionHome({\n  language,\n  location = undefined,\n  prescriptionFromRoute,\n  getPrescriptionDetails,\n  setPrescriptionDetails\n}) {\n  /**@gets @sets the prescriptions array passed in from the mutation used for datalist */\n  const [prescriptionsforDataList, setPrescriptionsForDataList] = useState([]);\n  /**@gets @sets The prescriptionDetails to be passed in the Prescriptions Detail component */\n\n  const [prescriptionDetailsForPrescriptionDetailComponent, setPrescriptionDetailsForPrescriptionDetailComponent] = useState([]);\n  /** @gets @sets resets a flag to set prescritpionFromRoute to null */\n\n  const [resetDataFromRoute, setResetDataFromRoute] = useState(false);\n  /**@gets @sets the value from the input field */\n\n  const [valueForInputValue, setValueForInputValue] = useState(\"\");\n  /**@gets @sets the value from the input field */\n\n  const [ifPrescriptionDetailsExists, setIfPrescriptionDetailsExists] = useState(prescriptionFromRoute !== undefined ? true : false);\n  /**\r\n   * Call to the service Prescription to retreve the prescriptionsfordatalist available\r\n   * @useState  setPrescriptionDetailsForPrescriptionDetailComponent\r\n   * @param setPrescriptionDetails // passed in from the function\r\n   * @useState\r\n   *  \r\n   */\n  // const [getPrescriptions, { loading: mutationLoading, error: mutationError },] = useMutation(GET_PRESCRIPTIONS, {\n  //   onError(err) {\n  //     console.log(err);\n  //     alert(err);\n  //   },\n  //   update(proxy, result) {\n  //     console.log('result',result);\n  //     if (result.data.prescription.code === 200) {\n  //       if (result.data.prescription.prescriptions.length === 1) {\n  //         setIfPrescriptionDetailsExists(true);\n  //         console.log('result.data', result.data.prescription.prescriptions);\n  //         //setPrescriptionDetailsForPrescriptionDetailComponent(result.data.prescription.prescriptions);\n  //         let data = {\n  //           search_name: result.data.prescription.prescriptions[0]._text,\n  //         }\n  //         setPrescriptionDetails(data);\n  //         return;\n  //       }\n  //       let options = [];\n  //       setPrescriptionsForDataList(result.data.prescription.prescriptions);\n  //     }\n  //     else{\n  //       alert(result.data.prescription.message);\n  //     }\n  //   }\n  // });\n\n  /**\r\n   * It searches for the prescription comming from the input \r\n   * @param e \r\n   * @useState setValueForInputValue // sets the value on the input field\r\n   * @mutation getPrescriptions\r\n   * @context prescription // used for apollo.link curently baseUri\r\n   */\n\n  let clicked = 0;\n\n  const searchPrescription = e => {\n    e.preventDefault();\n    let value = prescriptionsforDataList.find(element => e.target.value.trim() === element._text);\n\n    if (value !== undefined && value._text === e.target.value.trim()) {\n      console.log('inside test', value._text, value._text === e.target.value.trim());\n      let data = {\n        search_name: value._text\n      };\n      setIfPrescriptionDetailsExists(true);\n      setPrescriptionDetails(data);\n    } else if (e.target.value.trim().length >= 3) {\n      console.log('clicked', clicked++); //getPrescriptions({ variables: { prescription: e.target.value.trim() }, context: { clientName: 'prescriptions' } });\n    } else {\n      console.log('minimum of 3 charaters');\n    }\n\n    setValueForInputValue(e.target.value.trim());\n  };\n  /**\r\n   * Resets the component to initial state \r\n   * @param e\r\n   * @useState setValueForInputValue\r\n   * @useState set_prescriptionDetails\r\n   * @useState setResetDataFromValue\r\n   */\n\n\n  const clearInput = e => {\n    setValueForInputValue(\"\");\n    setPrescriptionDetailsForPrescriptionDetailComponent([]);\n    setResetDataFromRoute(true);\n    setIfPrescriptionDetailsExists(false);\n  };\n  /**\r\n   * Use for when the prescription is passed in by the route\r\n   * @funciton setPrescriptionsDataFromRoute\r\n   */\n\n\n  useEffect(() => {\n    if (prescriptionFromRoute !== undefined) {\n      setPrescriptionsDataFromRoute();\n      setIfPrescriptionDetailsExists(true);\n    }\n  }, []);\n  /**\r\n   * Sets the Prescription been passed in by the route\r\n   * @param setPrescriptionDetails // useState passed in from the function\r\n   * @useState setValueForInputValue\r\n   * @mutation getPrescriptions  \r\n   */\n\n  const setPrescriptionsDataFromRoute = () => {\n    let value = JSON.parse(prescriptionFromRoute);\n    setPrescriptionDetails(value);\n    setValueForInputValue(value.search_name); //getPrescriptions({ variables: { prescription: prescriptionFromRoute.search_name } });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }\n  }, resetDataFromRoute && (prescriptionFromRoute = undefined), (language === 'english' || language === undefined) && /*#__PURE__*/React.createElement(React.Fragment, null, \" \", /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 65\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 69\n    }\n  }, \"Start Here: Step 1 of 3: \"), \"Your Prescription\")), language === 'spanish' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 36\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 40\n    }\n  }, '<Spanish>', \" Start Here: Step 1 of 3: \"), \"Your Prescription\")), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"find_rx\",\n    className: \"find_rx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, (language === 'english' || language === undefined) && /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"find_rx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 64\n    }\n  }, \"Enter Drug Name\"), language === 'spanish' && /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"find_rx\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 36\n    }\n  }, '<Spanish>', \"Enter Drug Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    autoComplete: \"off\",\n    onFocus: clearInput,\n    placeholder: \"Type Drug Name\",\n    id: \"first_rx\",\n    value: valueForInputValue,\n    type: \"text\",\n    list: \"prescriptions\",\n    onChange: searchPrescription,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"datalist\", {\n    className: \"desktop-main-left-find-prescription-home-datalist\",\n    id: \"prescriptions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, prescriptionsforDataList.map((element, i) => /*#__PURE__*/React.createElement(\"option\", {\n    key: `prescription${i}`,\n    value: element._text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 59\n    }\n  }))), ifPrescriptionDetailsExists && /*#__PURE__*/React.createElement(React.Fragment, null, console.log('ifPrescriptionDetailsExists', ifPrescriptionDetailsExists), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: 'inherit',\n      height: '3vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"clickthrough\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"back cursor\",\n    onClick: clearInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 18\n    }\n  }, \"Start Over\")), /*#__PURE__*/React.createElement(Link, {\n    className: \"cursor\",\n    to: {\n      pathname: '/src/components/Home',\n      query: {\n        component: 'location',\n        prescriptions: JSON.stringify(getPrescriptionDetails),\n        location: location,\n        language: language\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  }, \" \", (language === 'english' || language === undefined) && 'Next: Step2 >>', \" \", language === 'spanish' && '<Spanish>Next: Step2 >>'))), !ifPrescriptionDetailsExists && /*#__PURE__*/React.createElement(\"section\", {\n    className: \"help\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 44\n    }\n  }, (language === 'english' || language === undefined) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }, \"FirstRx is a free service. No login or account is needed.\"), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, \"Enter Your Prescription information (Step 1)\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }\n  }, \"Indicate your location (Step 2)\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, \"Pick a coupon from the pharmacy where you\\u2019d like to go. Pharmacies might have different prices but we\\u2019ll show show you the lowest priced pharmacies first. (Step 3)\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 15\n    }\n  }, \"Then FirstRx will text you a coupon that you can show to the pharmacist.\")), language === 'spanish' && /*#__PURE__*/React.createElement(React.Fragment, null, '<Spanish>', /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }, \"FirstRx is a free service. No login or account is needed.\"), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }\n  }, \"Enter Your Prescription information (Step 1)\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  }, \"Indicate your location (Step 2)\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, \"Pick a coupon from the pharmacy where you\\u2019d like to go. Pharmacies might have different prices but we\\u2019ll show show you the lowest priced pharmacies first. (Step 3)\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }, \"Then FirstRx will text you a coupon that you can show to the pharmacist.\")))));\n}","map":{"version":3,"sources":["C:/Users/tomsa/OneDrive/Desktop/ReactExampleCode/test-typescript-compile-within-a-javascript-project/Code/src/pages/src/components/Home/FindPrescriptionHome/index.tsx"],"names":["React","useEffect","useState","Link","FindPrescriptionHome","language","location","undefined","prescriptionFromRoute","getPrescriptionDetails","setPrescriptionDetails","prescriptionsforDataList","setPrescriptionsForDataList","prescriptionDetailsForPrescriptionDetailComponent","setPrescriptionDetailsForPrescriptionDetailComponent","resetDataFromRoute","setResetDataFromRoute","valueForInputValue","setValueForInputValue","ifPrescriptionDetailsExists","setIfPrescriptionDetailsExists","clicked","searchPrescription","e","preventDefault","value","find","element","target","trim","_text","console","log","data","search_name","length","clearInput","setPrescriptionsDataFromRoute","JSON","parse","map","i","width","height","pathname","query","component","prescriptions","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport PrescriptionDetailedForm from '../../component/PrescriptionDetailedForm';\r\nimport { Link } from 'react-router-dom';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n//import styles from './../../../../../styles/FindPrescriptionHome.module.scss';\r\n\r\n/**\r\n * @context prescription\r\n * \r\n * uses \r\n * \r\n * @serviceApi prescription\r\n *  \r\n * \r\n * */\r\n\r\n\r\n\r\n/**\r\n * @Pages\r\n * \r\n * It does a search of the prescirption wanted by entering key words\r\n * \r\n * refrencing version of: 1/28/2021\r\n * source: https://github.com/emilynorton?tab=repositories\r\n * \r\n * @param language // the languages selected English|Spanish\r\n * @param location //the location where to find the prescription\r\n * @param prescriptionFromRoute // the prescription passed in when using the route function\r\n * @useState getPrescriptionDetails // prescrition set from the setPrescriptionsDetails\r\n * @useState setPrescriptionDetails // sets the prescription chosen \r\n */\r\n\r\nexport default function FindPrescriptionHome({ language, location = undefined, prescriptionFromRoute, getPrescriptionDetails, setPrescriptionDetails }:any) {\r\n\r\n  /**@gets @sets the prescriptions array passed in from the mutation used for datalist */\r\n  const [prescriptionsforDataList, setPrescriptionsForDataList] = useState([]);\r\n\r\n  /**@gets @sets The prescriptionDetails to be passed in the Prescriptions Detail component */\r\n  const [prescriptionDetailsForPrescriptionDetailComponent, setPrescriptionDetailsForPrescriptionDetailComponent] = useState([]);\r\n\r\n  /** @gets @sets resets a flag to set prescritpionFromRoute to null */\r\n  const [resetDataFromRoute, setResetDataFromRoute] = useState(false);\r\n\r\n  /**@gets @sets the value from the input field */\r\n  const [valueForInputValue, setValueForInputValue] = useState(\"\");\r\n\r\n  /**@gets @sets the value from the input field */\r\n  const [ifPrescriptionDetailsExists, setIfPrescriptionDetailsExists] = useState((prescriptionFromRoute !== undefined ? true : false));\r\n\r\n\r\n\r\n \r\n  \r\n\r\n  /**\r\n   * Call to the service Prescription to retreve the prescriptionsfordatalist available\r\n   * @useState  setPrescriptionDetailsForPrescriptionDetailComponent\r\n   * @param setPrescriptionDetails // passed in from the function\r\n   * @useState\r\n   *  \r\n   */\r\n  // const [getPrescriptions, { loading: mutationLoading, error: mutationError },] = useMutation(GET_PRESCRIPTIONS, {\r\n  //   onError(err) {\r\n  //     console.log(err);\r\n  //     alert(err);\r\n  //   },\r\n  //   update(proxy, result) {\r\n  //     console.log('result',result);\r\n  //     if (result.data.prescription.code === 200) {\r\n  //       if (result.data.prescription.prescriptions.length === 1) {\r\n  //         setIfPrescriptionDetailsExists(true);\r\n  //         console.log('result.data', result.data.prescription.prescriptions);\r\n  //         //setPrescriptionDetailsForPrescriptionDetailComponent(result.data.prescription.prescriptions);\r\n  //         let data = {\r\n  //           search_name: result.data.prescription.prescriptions[0]._text,\r\n  //         }\r\n  //         setPrescriptionDetails(data);\r\n  //         return;\r\n  //       }\r\n  //       let options = [];\r\n  //       setPrescriptionsForDataList(result.data.prescription.prescriptions);\r\n  //     }\r\n  //     else{\r\n  //       alert(result.data.prescription.message);\r\n  //     }\r\n  //   }\r\n  // });\r\n\r\n  /**\r\n   * It searches for the prescription comming from the input \r\n   * @param e \r\n   * @useState setValueForInputValue // sets the value on the input field\r\n   * @mutation getPrescriptions\r\n   * @context prescription // used for apollo.link curently baseUri\r\n   */\r\n  let clicked = 0;\r\n  const searchPrescription = (e:any) => {\r\n    e.preventDefault();\r\n    let value:any = prescriptionsforDataList.find((element:any) => e.target.value.trim() === element._text );\r\n    if(value !== undefined && value._text === e.target.value.trim())\r\n    {\r\n      console.log( 'inside test', value._text, value._text === e.target.value.trim() )\r\n      let data = {\r\n        search_name: value._text,\r\n      }\r\n      setIfPrescriptionDetailsExists(true);\r\n      setPrescriptionDetails(data);\r\n      \r\n    }  \r\n    else if (e.target.value.trim().length >= 3 )\r\n    {  \r\n      console.log('clicked',clicked++);     \r\n       //getPrescriptions({ variables: { prescription: e.target.value.trim() }, context: { clientName: 'prescriptions' } });\r\n    }\r\n    else{\r\n      console.log('minimum of 3 charaters');\r\n    }\r\n    setValueForInputValue(e.target.value.trim());\r\n\r\n  }\r\n  /**\r\n   * Resets the component to initial state \r\n   * @param e\r\n   * @useState setValueForInputValue\r\n   * @useState set_prescriptionDetails\r\n   * @useState setResetDataFromValue\r\n   */\r\n  const clearInput = (e:any) => {\r\n    setValueForInputValue(\"\");\r\n    setPrescriptionDetailsForPrescriptionDetailComponent([]);\r\n    setResetDataFromRoute(true);\r\n    setIfPrescriptionDetailsExists(false);\r\n  }\r\n\r\n  /**\r\n   * Use for when the prescription is passed in by the route\r\n   * @funciton setPrescriptionsDataFromRoute\r\n   */\r\n  useEffect(() => {\r\n\r\n    if (prescriptionFromRoute !== undefined) {\r\n      setPrescriptionsDataFromRoute();\r\n      setIfPrescriptionDetailsExists(true);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Sets the Prescription been passed in by the route\r\n   * @param setPrescriptionDetails // useState passed in from the function\r\n   * @useState setValueForInputValue\r\n   * @mutation getPrescriptions  \r\n   */\r\n  const setPrescriptionsDataFromRoute = () => {\r\n    let value = JSON.parse(prescriptionFromRoute);\r\n\r\n    setPrescriptionDetails(value);\r\n    setValueForInputValue(value.search_name);\r\n    //getPrescriptions({ variables: { prescription: prescriptionFromRoute.search_name } });\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      {/**\r\n       * refrencing version of: 1/28/2021\r\n       * source: https://github.com/emilynorton?tab=repositories\r\n       */}\r\n      {/* {mutationError && <>{console.log('m',mutationError)}</>}\r\n      {mutationLoading && < div className='circular_progress'>\r\n        <CircularProgress style={{ width: '6vmax', height: '6vmax' }} />\r\n      </div>} */}\r\n       \r\n      {resetDataFromRoute && (prescriptionFromRoute = undefined)}\r\n      {(language === 'english' || language === undefined) && <> <h3><span>Start Here: Step 1 of 3: </span>Your Prescription</h3></>}\r\n      {language === 'spanish' && <><h3><span>{'<Spanish>'} Start Here: Step 1 of 3: </span>Your Prescription</h3></>}\r\n\r\n\r\n      <form id=\"find_rx\" className=\"find_rx\">\r\n        {(language === 'english' || language === undefined) && <label htmlFor=\"find_rx\">Enter Drug Name</label>}\r\n        {language === 'spanish' && <label htmlFor=\"find_rx\">{'<Spanish>'}Enter Drug Name</label>}\r\n\r\n        <input\r\n          autoComplete=\"off\"\r\n          onFocus={clearInput}\r\n          placeholder=\"Type Drug Name\"\r\n          id='first_rx'\r\n          value={valueForInputValue}\r\n          type=\"text\"\r\n          list=\"prescriptions\"\r\n          onChange={searchPrescription}\r\n        />\r\n        <datalist\r\n          className=\"desktop-main-left-find-prescription-home-datalist\"\r\n          id=\"prescriptions\">\r\n         {prescriptionsforDataList.map((element:any,i) => <option key={`prescription${i}`} value={element._text} />)}\r\n        </datalist>\r\n        \r\n\r\n        {ifPrescriptionDetailsExists &&\r\n          <>\r\n            {console.log('ifPrescriptionDetailsExists',ifPrescriptionDetailsExists)}\r\n            <div style={{width:'inherit',height:'3vh'}} > </div>\r\n             {/* <PrescriptionDetailedForm language={language} dataFromServer={prescriptionDetailsForPrescriptionDetailComponent} prescriptionFromRoute={prescriptionFromRoute} setPrescriptionDetails={setPrescriptionDetails} /> */}\r\n            <div className=\"clickthrough\">\r\n              <a><div className=\"back cursor\" onClick={clearInput}>Start Over</div></a>\r\n              <Link className='cursor' to={                \r\n                  {\r\n                    pathname: '/src/components/Home',\r\n                    query: {\r\n                      component: 'location',\r\n                      prescriptions: JSON.stringify(getPrescriptionDetails),\r\n                      location: location,\r\n                      language: language\r\n                    }\r\n                  }                \r\n                }\r\n              > {(language === 'english' || language === undefined) && 'Next: Step2 >>'} {language === 'spanish' && '<Spanish>Next: Step2 >>'}\r\n              </Link>\r\n            </div>\r\n\r\n          </>}\r\n\r\n        {(!ifPrescriptionDetailsExists) && <section className=\"help\">\r\n          {(language === 'english' || language === undefined) &&\r\n            <>\r\n              <p>FirstRx is a free service. No login or account is needed.</p>\r\n\r\n              <ol>\r\n                <li>Enter Your Prescription information (Step 1)</li>\r\n                <li>Indicate your location (Step 2)</li>\r\n                <li>Pick a coupon from the pharmacy where you’d like to go. Pharmacies might have different prices but we’ll show show you the lowest priced pharmacies first. (Step 3)</li>\r\n              </ol>\r\n\r\n              <p>Then FirstRx will text you a coupon that you can show to the pharmacist.</p>\r\n            </>}\r\n          {(language === 'spanish') &&\r\n            <>\r\n              {'<Spanish>'}\r\n              <p>FirstRx is a free service. No login or account is needed.</p>\r\n\r\n              <ol>\r\n                <li>Enter Your Prescription information (Step 1)</li>\r\n                <li>Indicate your location (Step 2)</li>\r\n                <li>Pick a coupon from the pharmacy where you’d like to go. Pharmacies might have different prices but we’ll show show you the lowest priced pharmacies first. (Step 3)</li>\r\n              </ol>\r\n\r\n              <p>Then FirstRx will text you a coupon that you can show to the pharmacist.</p>\r\n            </>}\r\n\r\n        </section>}\r\n\r\n      </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/* \r\n        \r\n        used in version 1 with wire frames\r\n        // version 1 from wire frames\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=25%3A1&viewport=520%2C440%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=102%3A1390&viewport=212%2C389%2C0.5&scaling=min-zoom\r\n        // https://www.figma.com/proto/f1Af0b6joE7OVyo4R4hb7i/FirstRx-Design?node-id=349%3A797&viewport=317%2C508%2C0.5&scaling=scale-down \r\n\r\n\r\n      {(language === 'english' || language === undefined) && <span className={styles.desktop_main_left_find_prescription_home_title} >Step 1: Your Prescription</span>}\r\n      {language === 'spanish'  && <span className={styles.desktop_main_left_find_prescription_home_title} >{'<Spanish>'} Step 1: Your Prescription</span>}\r\n       \r\n        <input \r\n        autoComplete=\"off\" \r\n        onFocus={clearInput} \r\n        placeholder=\"Type Drug Name\" \r\n        className={styles.desktop_main_left_find_prescription_home_input}\r\n        value={valueForInputValue} \r\n        type=\"text\" \r\n        list=\"prescriptionsfordatalist\" \r\n        onChange={searchPrescription} \r\n        id=\"prescription\" />\r\n        <datalist \r\n        className=\"desktop-main-left-find-prescription-home-datalist\" \r\n        id=\"prescriptions\">\r\n          {prescriptionsfordatalist}\r\n        </datalist>\r\n      \r\n      {prescriptionDetailsForPrescriptionDetailComponent.length === 1 &&\r\n        <>\r\n          <PrescriptionDetailedForm  language={language} dataFromServer={prescriptionDetailsForPrescriptionDetailComponent} prescriptionFromRoute={prescriptionFromRoute} setPrescriptionDetails={setPrescriptionDetails} />\r\n          <button className={`next-button ${styles.next_button_find_prescription}`} onClick={() => router.push\r\n            (\r\n              {\r\n                pathname: '/src/components/Home',\r\n                query: {\r\n                  component: 'location',\r\n                  prescriptions: JSON.stringify(getPrescriptionDetails),\r\n                  location: location,\r\n                  language:language\r\n                }\r\n              }\r\n            )\r\n          }> {(language === 'english' || language === undefined) && 'Next: Step2 >>'} {language === 'spanish'  && '<Spanish>Next: Step2 >>'} </button>\r\n          {mutationLoading && <p>Loading...</p>}\r\n          {mutationError && <p>Error :( Please try again</p>}\r\n        </>\r\n      } */}\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}